
React_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800456c  0800456c  0001456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004674  08004674  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800467c  0800467c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000bc  08004740  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004740  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f9  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f7  00000000  00000000  0002b621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091d  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174b6  00000000  00000000  0002ec4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8c7  00000000  00000000  00046103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d645  00000000  00000000  000539ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad8  00000000  00000000  000e1010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e4ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000bc 	.word	0x200000bc
 8000158:	00000000 	.word	0x00000000
 800015c:	08004554 	.word	0x08004554

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000c0 	.word	0x200000c0
 8000178:	08004554 	.word	0x08004554

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <set_new_state>:
		};

int tab_case[5][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0,
		0, 1 }, { 1, 1, 1, 1 } };

static void set_new_state(FSM_State_Enum _new_state) {
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz)) {
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b31      	ldr	r3, [pc, #196]	; (8000550 <set_new_state+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d257      	bcs.n	8000542 <set_new_state+0xc6>
		fsm_handle->state = fsm_handle->states_list[_new_state];
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <set_new_state+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	441a      	add	r2, r3
 800049e:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <set_new_state+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}

		fsm_handle->controllers.state_execution_count = 0;
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <set_new_state+0xd4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
		fsm_handle->controllers.animation_state = ANIMATION_RUNNING;
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <set_new_state+0xd4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
		fsm_handle->controllers.state_base_time = HAL_GetTick();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <set_new_state+0xd4>)
 80004bc:	681c      	ldr	r4, [r3, #0]
 80004be:	f001 f995 	bl	80017ec <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	61a3      	str	r3, [r4, #24]

		actualBTN1 = fsm_handle->inputs.nb_press_btn1;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <set_new_state+0xd4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	7c1a      	ldrb	r2, [r3, #16]
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <set_new_state+0xd8>)
 80004ce:	701a      	strb	r2, [r3, #0]
		actualBTN2 = fsm_handle->inputs.nb_press_btn2;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <set_new_state+0xd4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7c5a      	ldrb	r2, [r3, #17]
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <set_new_state+0xdc>)
 80004d8:	701a      	strb	r2, [r3, #0]
		actualBTN3 = fsm_handle->inputs.nb_press_btn3;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <set_new_state+0xd4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	7c9a      	ldrb	r2, [r3, #18]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <set_new_state+0xe0>)
 80004e2:	701a      	strb	r2, [r3, #0]
		actualBTN4 = fsm_handle->inputs.nb_press_btn4;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <set_new_state+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	7cda      	ldrb	r2, [r3, #19]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <set_new_state+0xe4>)
 80004ec:	701a      	strb	r2, [r3, #0]

		srand(HAL_GetTick());
 80004ee:	f001 f97d 	bl	80017ec <HAL_GetTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 f811 	bl	800351c <srand>

		fsm_handle->controllers.randomTime = (rand() % 4501) + 500;
 80004fa:	f003 f83d 	bl	8003578 <rand>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <set_new_state+0xe8>)
 8000502:	fb83 1302 	smull	r1, r3, r3, r2
 8000506:	1259      	asrs	r1, r3, #9
 8000508:	17d3      	asrs	r3, r2, #31
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	f241 1195 	movw	r1, #4501	; 0x1195
 8000510:	fb01 f303 	mul.w	r3, r1, r3
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <set_new_state+0xd4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	621a      	str	r2, [r3, #32]
		fsm_handle->controllers.randomCase = rand() % 5;
 8000520:	f003 f82a 	bl	8003578 <rand>
 8000524:	4602      	mov	r2, r0
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <set_new_state+0xec>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1059      	asrs	r1, r3, #1
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	1ad1      	subs	r1, r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <set_new_state+0xd4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	460a      	mov	r2, r1
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	max7219_erase_no_decode();
 8000542:	f001 f8b1 	bl	80016a8 <max7219_erase_no_decode>
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	200000dc 	.word	0x200000dc
 8000554:	200000e4 	.word	0x200000e4
 8000558:	200000e5 	.word	0x200000e5
 800055c:	200000e6 	.word	0x200000e6
 8000560:	200000e7 	.word	0x200000e7
 8000564:	1d1ee241 	.word	0x1d1ee241
 8000568:	66666667 	.word	0x66666667

0800056c <init_game>:

HAL_StatusTypeDef init_game(Game_Handle_TypeDef *_game_handle,
		FSM_Handle_TypeDef *_fsm_handle) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef led_array_status = HAL_OK;

	game_handle = _game_handle;
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <init_game+0x64>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <init_game+0x68>)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]

	max7219_status = max7219_init(&game_handle->max7219_handle);
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <init_game+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ffb2 	bl	80014f4 <max7219_init>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]

	if (max7219_status != HAL_OK)
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <init_game+0x32>
		return max7219_status;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	e013      	b.n	80005c6 <init_game+0x5a>

	fsm_handle->states_list = states_list;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <init_game+0x68>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <init_game+0x6c>)
 80005a4:	609a      	str	r2, [r3, #8]
	fsm_handle->states_list_sz = sizeof(states_list)
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <init_game+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2206      	movs	r2, #6
 80005ac:	60da      	str	r2, [r3, #12]
			/ sizeof(FSM_State_TypeDef);

	fsm_handle->controllers.randomTime = 0;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <init_game+0x68>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
	fsm_handle->controllers.randomCase = 0;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <init_game+0x68>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24

	set_new_state(STATE_START);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5c 	bl	800047c <set_new_state>

	return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	200000dc 	.word	0x200000dc
 80005d8:	20000000 	.word	0x20000000

080005dc <run_game>:

HAL_StatusTypeDef run_game(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	fsm_handle->state.state_callback();
 80005e0:	4b82      	ldr	r3, [pc, #520]	; (80007ec <run_game+0x210>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4798      	blx	r3
	fsm_handle->controllers.state_execution_count += 1;
 80005e8:	4b80      	ldr	r3, [pc, #512]	; (80007ec <run_game+0x210>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <run_game+0x210>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3201      	adds	r2, #1
 80005f4:	615a      	str	r2, [r3, #20]

	switch (fsm_handle->state.state) {
 80005f6:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <run_game+0x210>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	f200 817d 	bhi.w	80008fc <run_game+0x320>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <run_game+0x2c>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000621 	.word	0x08000621
 800060c:	08000635 	.word	0x08000635
 8000610:	080006cd 	.word	0x080006cd
 8000614:	080008c3 	.word	0x080008c3
 8000618:	080008b1 	.word	0x080008b1
 800061c:	080008d5 	.word	0x080008d5
	case STATE_START:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 8000620:	4b72      	ldr	r3, [pc, #456]	; (80007ec <run_game+0x210>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7f1b      	ldrb	r3, [r3, #28]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 815d 	bne.w	80008e6 <run_game+0x30a>
			set_new_state(STATE_WP);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff25 	bl	800047c <set_new_state>
		}
		break;
 8000632:	e158      	b.n	80008e6 <run_game+0x30a>
	case STATE_WP:
		checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000634:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <run_game+0x210>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	7c1a      	ldrb	r2, [r3, #16]
 800063a:	4b6d      	ldr	r3, [pc, #436]	; (80007f0 <run_game+0x214>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <run_game+0x218>)
 8000644:	701a      	strb	r2, [r3, #0]
		checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000646:	4b69      	ldr	r3, [pc, #420]	; (80007ec <run_game+0x210>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7c5a      	ldrb	r2, [r3, #17]
 800064c:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <run_game+0x21c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b69      	ldr	r3, [pc, #420]	; (80007fc <run_game+0x220>)
 8000656:	701a      	strb	r2, [r3, #0]
		checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000658:	4b64      	ldr	r3, [pc, #400]	; (80007ec <run_game+0x210>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	7c9a      	ldrb	r2, [r3, #18]
 800065e:	4b68      	ldr	r3, [pc, #416]	; (8000800 <run_game+0x224>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b67      	ldr	r3, [pc, #412]	; (8000804 <run_game+0x228>)
 8000668:	701a      	strb	r2, [r3, #0]
		checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 800066a:	4b60      	ldr	r3, [pc, #384]	; (80007ec <run_game+0x210>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7cda      	ldrb	r2, [r3, #19]
 8000670:	4b65      	ldr	r3, [pc, #404]	; (8000808 <run_game+0x22c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b64      	ldr	r3, [pc, #400]	; (800080c <run_game+0x230>)
 800067a:	701a      	strb	r2, [r3, #0]
		if (checkP1 != 0 || checkP2 != 0 || checkP3 != 0 || checkP4 != 0) {
 800067c:	4b5d      	ldr	r3, [pc, #372]	; (80007f4 <run_game+0x218>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <run_game+0xc0>
 8000684:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <run_game+0x220>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d107      	bne.n	800069c <run_game+0xc0>
 800068c:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <run_game+0x228>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <run_game+0xc0>
 8000694:	4b5d      	ldr	r3, [pc, #372]	; (800080c <run_game+0x230>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <run_game+0xc6>
			set_new_state(STATE_WAIT);
 800069c:	2003      	movs	r0, #3
 800069e:	f7ff feed 	bl	800047c <set_new_state>
		}
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 10000){
 80006a2:	f001 f8a3 	bl	80017ec <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	4b50      	ldr	r3, [pc, #320]	; (80007ec <run_game+0x210>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b4:	4293      	cmp	r3, r2
 80006b6:	f240 8118 	bls.w	80008ea <run_game+0x30e>
			HAL_SuspendTick();
 80006ba:	f001 f8a1 	bl	8001800 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006be:	2101      	movs	r1, #1
 80006c0:	2000      	movs	r0, #0
 80006c2:	f001 fb79 	bl	8001db8 <HAL_PWR_EnterSLEEPMode>
			SystemClock_Config();
 80006c6:	f000 fbd3 	bl	8000e70 <SystemClock_Config>
		}

		break;
 80006ca:	e10e      	b.n	80008ea <run_game+0x30e>
	case STATE_GP:
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time <= 10000) {
 80006cc:	f001 f88e 	bl	80017ec <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <run_game+0x210>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	f242 7210 	movw	r2, #10000	; 0x2710
 80006de:	4293      	cmp	r3, r2
 80006e0:	f200 80d8 	bhi.w	8000894 <run_game+0x2b8>
			switch (fsm_handle->controllers.randomCase) {
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <run_game+0x210>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	f200 80ff 	bhi.w	80008ee <run_game+0x312>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <run_game+0x11c>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	0800070d 	.word	0x0800070d
 80006fc:	08000745 	.word	0x08000745
 8000700:	0800077d 	.word	0x0800077d
 8000704:	080007b5 	.word	0x080007b5
 8000708:	08000811 	.word	0x08000811
			case 0:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <run_game+0x210>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7c1a      	ldrb	r2, [r3, #16]
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <run_game+0x214>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <run_game+0x218>)
 800071c:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0) {
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <run_game+0x218>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 80ba 	beq.w	800089c <run_game+0x2c0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000728:	f001 f860 	bl	80017ec <HAL_GetTick>
 800072c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <run_game+0x210>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <run_game+0x210>)
 8000736:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000738:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800073c:	2004      	movs	r0, #4
 800073e:	f7ff fe9d 	bl	800047c <set_new_state>
				}
				break;
 8000742:	e0ab      	b.n	800089c <run_game+0x2c0>
			case 1:
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <run_game+0x210>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7c5a      	ldrb	r2, [r3, #17]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <run_game+0x21c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <run_game+0x220>)
 8000754:	701a      	strb	r2, [r3, #0]
				if (checkP2 != 0) {
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <run_game+0x220>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	f000 80a0 	beq.w	80008a0 <run_game+0x2c4>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000760:	f001 f844 	bl	80017ec <HAL_GetTick>
 8000764:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <run_game+0x210>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <run_game+0x210>)
 800076e:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000770:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff fe81 	bl	800047c <set_new_state>
				}
				break;
 800077a:	e091      	b.n	80008a0 <run_game+0x2c4>
			case 2:
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <run_game+0x210>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	7c9a      	ldrb	r2, [r3, #18]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <run_game+0x224>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <run_game+0x228>)
 800078c:	701a      	strb	r2, [r3, #0]
				if (checkP3 != 0) {
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <run_game+0x228>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8086 	beq.w	80008a4 <run_game+0x2c8>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000798:	f001 f828 	bl	80017ec <HAL_GetTick>
 800079c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <run_game+0x210>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <run_game+0x210>)
 80007a6:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007a8:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007ac:	2004      	movs	r0, #4
 80007ae:	f7ff fe65 	bl	800047c <set_new_state>
				}
				break;
 80007b2:	e077      	b.n	80008a4 <run_game+0x2c8>
			case 3:
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <run_game+0x210>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7cda      	ldrb	r2, [r3, #19]
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <run_game+0x22c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <run_game+0x230>)
 80007c4:	701a      	strb	r2, [r3, #0]
				if (checkP4 != 0) {
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <run_game+0x230>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d06c      	beq.n	80008a8 <run_game+0x2cc>
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007ce:	f001 f80d 	bl	80017ec <HAL_GetTick>
 80007d2:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <run_game+0x210>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <run_game+0x210>)
 80007dc:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007de:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f7ff fe4a 	bl	800047c <set_new_state>
				}
				break;
 80007e8:	e05e      	b.n	80008a8 <run_game+0x2cc>
 80007ea:	bf00      	nop
 80007ec:	200000dc 	.word	0x200000dc
 80007f0:	200000e4 	.word	0x200000e4
 80007f4:	200000e0 	.word	0x200000e0
 80007f8:	200000e5 	.word	0x200000e5
 80007fc:	200000e1 	.word	0x200000e1
 8000800:	200000e6 	.word	0x200000e6
 8000804:	200000e2 	.word	0x200000e2
 8000808:	200000e7 	.word	0x200000e7
 800080c:	200000e3 	.word	0x200000e3

			case 4:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000810:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <run_game+0x328>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c1a      	ldrb	r2, [r3, #16]
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <run_game+0x32c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <run_game+0x330>)
 8000820:	701a      	strb	r2, [r3, #0]
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <run_game+0x328>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	7c5a      	ldrb	r2, [r3, #17]
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <run_game+0x334>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <run_game+0x338>)
 8000832:	701a      	strb	r2, [r3, #0]
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <run_game+0x328>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7c9a      	ldrb	r2, [r3, #18]
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <run_game+0x33c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <run_game+0x340>)
 8000844:	701a      	strb	r2, [r3, #0]
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <run_game+0x328>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	7cda      	ldrb	r2, [r3, #19]
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <run_game+0x344>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <run_game+0x348>)
 8000856:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0 && checkP2 != 0 && checkP3 != 0
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <run_game+0x330>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d025      	beq.n	80008ac <run_game+0x2d0>
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <run_game+0x338>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d021      	beq.n	80008ac <run_game+0x2d0>
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <run_game+0x340>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d01d      	beq.n	80008ac <run_game+0x2d0>
						&& checkP4 != 0) {
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <run_game+0x348>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d019      	beq.n	80008ac <run_game+0x2d0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000878:	f000 ffb8 	bl	80017ec <HAL_GetTick>
 800087c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <run_game+0x328>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <run_game+0x328>)
 8000886:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000888:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800088c:	2004      	movs	r0, #4
 800088e:	f7ff fdf5 	bl	800047c <set_new_state>
				}
				break;
 8000892:	e00b      	b.n	80008ac <run_game+0x2d0>
			}
		} else {
			set_new_state(STATE_LOOSE);
 8000894:	2005      	movs	r0, #5
 8000896:	f7ff fdf1 	bl	800047c <set_new_state>
		}
		break;
 800089a:	e028      	b.n	80008ee <run_game+0x312>
				break;
 800089c:	bf00      	nop
 800089e:	e026      	b.n	80008ee <run_game+0x312>
				break;
 80008a0:	bf00      	nop
 80008a2:	e024      	b.n	80008ee <run_game+0x312>
				break;
 80008a4:	bf00      	nop
 80008a6:	e022      	b.n	80008ee <run_game+0x312>
				break;
 80008a8:	bf00      	nop
 80008aa:	e020      	b.n	80008ee <run_game+0x312>
				break;
 80008ac:	bf00      	nop
		break;
 80008ae:	e01e      	b.n	80008ee <run_game+0x312>
	case STATE_DISP:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <run_game+0x328>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7f1b      	ldrb	r3, [r3, #28]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d11b      	bne.n	80008f2 <run_game+0x316>
			set_new_state(STATE_WP);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fdde 	bl	800047c <set_new_state>
		}
		break;
 80008c0:	e017      	b.n	80008f2 <run_game+0x316>
	case STATE_WAIT:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <run_game+0x328>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d114      	bne.n	80008f6 <run_game+0x31a>
			set_new_state(STATE_GP);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fdd5 	bl	800047c <set_new_state>
		}
		break;
 80008d2:	e010      	b.n	80008f6 <run_game+0x31a>
	case STATE_LOOSE:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <run_game+0x328>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7f1b      	ldrb	r3, [r3, #28]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10d      	bne.n	80008fa <run_game+0x31e>
			set_new_state(STATE_WP);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fdcc 	bl	800047c <set_new_state>
		}
		break;
 80008e4:	e009      	b.n	80008fa <run_game+0x31e>
		break;
 80008e6:	bf00      	nop
 80008e8:	e008      	b.n	80008fc <run_game+0x320>
		break;
 80008ea:	bf00      	nop
 80008ec:	e006      	b.n	80008fc <run_game+0x320>
		break;
 80008ee:	bf00      	nop
 80008f0:	e004      	b.n	80008fc <run_game+0x320>
		break;
 80008f2:	bf00      	nop
 80008f4:	e002      	b.n	80008fc <run_game+0x320>
		break;
 80008f6:	bf00      	nop
 80008f8:	e000      	b.n	80008fc <run_game+0x320>
		break;
 80008fa:	bf00      	nop
	}

	return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000dc 	.word	0x200000dc
 8000908:	200000e4 	.word	0x200000e4
 800090c:	200000e0 	.word	0x200000e0
 8000910:	200000e5 	.word	0x200000e5
 8000914:	200000e1 	.word	0x200000e1
 8000918:	200000e6 	.word	0x200000e6
 800091c:	200000e2 	.word	0x200000e2
 8000920:	200000e7 	.word	0x200000e7
 8000924:	200000e3 	.word	0x200000e3

08000928 <state_start>:

void state_start(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	//Affichage
	max7219_status = display_letter(game_handle->max7219_handle, 'G', 0);
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <state_start+0xa4>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2347      	movs	r3, #71	; 0x47
 8000938:	ca07      	ldmia	r2, {r0, r1, r2}
 800093a:	f000 fa0d 	bl	8000d58 <display_letter>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <state_start+0x24>
		Error_Handler();
 8000948:	f000 fbcc 	bl	80010e4 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'A', 1);
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <state_start+0xa4>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2341      	movs	r3, #65	; 0x41
 8000956:	ca07      	ldmia	r2, {r0, r1, r2}
 8000958:	f000 f9fe 	bl	8000d58 <display_letter>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <state_start+0x42>
		Error_Handler();
 8000966:	f000 fbbd 	bl	80010e4 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'M', 2);
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <state_start+0xa4>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	2302      	movs	r3, #2
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	234d      	movs	r3, #77	; 0x4d
 8000974:	ca07      	ldmia	r2, {r0, r1, r2}
 8000976:	f000 f9ef 	bl	8000d58 <display_letter>
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <state_start+0x60>
		Error_Handler();
 8000984:	f000 fbae 	bl	80010e4 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 3);
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <state_start+0xa4>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2303      	movs	r3, #3
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2345      	movs	r3, #69	; 0x45
 8000992:	ca07      	ldmia	r2, {r0, r1, r2}
 8000994:	f000 f9e0 	bl	8000d58 <display_letter>
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <state_start+0x7e>
		Error_Handler();
 80009a2:	f000 fb9f 	bl	80010e4 <Error_Handler>

	//Ellapsed time
	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 80009a6:	f000 ff21 	bl	80017ec <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <state_start+0xa8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d903      	bls.n	80009c4 <state_start+0x9c>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <state_start+0xa8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	771a      	strb	r2, [r3, #28]
	}

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	200000dc 	.word	0x200000dc

080009d4 <state_wp>:
void state_wp(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	max7219_status = display_letter(game_handle->max7219_handle, 'P', 0);
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <state_wp+0x88>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2350      	movs	r3, #80	; 0x50
 80009e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e6:	f000 f9b7 	bl	8000d58 <display_letter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <state_wp+0x24>
		Error_Handler();
 80009f4:	f000 fb76 	bl	80010e4 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'R', 1);
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <state_wp+0x88>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2352      	movs	r3, #82	; 0x52
 8000a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a04:	f000 f9a8 	bl	8000d58 <display_letter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <state_wp+0x42>
		Error_Handler();
 8000a12:	f000 fb67 	bl	80010e4 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 2);
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <state_wp+0x88>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2345      	movs	r3, #69	; 0x45
 8000a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a22:	f000 f999 	bl	8000d58 <display_letter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <state_wp+0x60>
		Error_Handler();
 8000a30:	f000 fb58 	bl	80010e4 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <state_wp+0x88>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2303      	movs	r3, #3
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2353      	movs	r3, #83	; 0x53
 8000a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a40:	f000 f98a 	bl	8000d58 <display_letter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <state_wp+0x7e>
		Error_Handler();
 8000a4e:	f000 fb49 	bl	80010e4 <Error_Handler>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d8 	.word	0x200000d8

08000a60 <state_gp>:
void state_gp(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef max7219_status;
	switch (fsm_handle->controllers.randomCase) {
 8000a66:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <state_gp+0x100>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d873      	bhi.n	8000b58 <state_gp+0xf8>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <state_gp+0x18>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a8d 	.word	0x08000a8d
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000abd 	.word	0x08000abd
 8000a84:	08000ad5 	.word	0x08000ad5
 8000a88:	08000aed 	.word	0x08000aed
	case 0:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000a8c:	2130      	movs	r1, #48	; 0x30
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fd8e 	bl	80015b0 <max7219_display_no_decode>
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d053      	beq.n	8000b46 <state_gp+0xe6>
			Error_Handler();
 8000a9e:	f000 fb21 	bl	80010e4 <Error_Handler>
		break;
 8000aa2:	e050      	b.n	8000b46 <state_gp+0xe6>
	case 1:
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000aa4:	216d      	movs	r1, #109	; 0x6d
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fd82 	bl	80015b0 <max7219_display_no_decode>
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d049      	beq.n	8000b4a <state_gp+0xea>
			Error_Handler();
 8000ab6:	f000 fb15 	bl	80010e4 <Error_Handler>
		break;
 8000aba:	e046      	b.n	8000b4a <state_gp+0xea>
	case 2:
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000abc:	2179      	movs	r1, #121	; 0x79
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f000 fd76 	bl	80015b0 <max7219_display_no_decode>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d03f      	beq.n	8000b4e <state_gp+0xee>
			Error_Handler();
 8000ace:	f000 fb09 	bl	80010e4 <Error_Handler>
		break;
 8000ad2:	e03c      	b.n	8000b4e <state_gp+0xee>
	case 3:
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000ad4:	2133      	movs	r1, #51	; 0x33
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 fd6a 	bl	80015b0 <max7219_display_no_decode>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d035      	beq.n	8000b52 <state_gp+0xf2>
			Error_Handler();
 8000ae6:	f000 fafd 	bl	80010e4 <Error_Handler>
		break;
 8000aea:	e032      	b.n	8000b52 <state_gp+0xf2>

	case 4:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000aec:	2130      	movs	r1, #48	; 0x30
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fd5e 	bl	80015b0 <max7219_display_no_decode>
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <state_gp+0xa2>
			Error_Handler();
 8000afe:	f000 faf1 	bl	80010e4 <Error_Handler>
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000b02:	216d      	movs	r1, #109	; 0x6d
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fd53 	bl	80015b0 <max7219_display_no_decode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <state_gp+0xb8>
			Error_Handler();
 8000b14:	f000 fae6 	bl	80010e4 <Error_Handler>
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000b18:	2179      	movs	r1, #121	; 0x79
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fd48 	bl	80015b0 <max7219_display_no_decode>
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <state_gp+0xce>
			Error_Handler();
 8000b2a:	f000 fadb 	bl	80010e4 <Error_Handler>
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000b2e:	2133      	movs	r1, #51	; 0x33
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fd3d 	bl	80015b0 <max7219_display_no_decode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00a      	beq.n	8000b56 <state_gp+0xf6>
			Error_Handler();
 8000b40:	f000 fad0 	bl	80010e4 <Error_Handler>
		break;
 8000b44:	e007      	b.n	8000b56 <state_gp+0xf6>
		break;
 8000b46:	bf00      	nop
 8000b48:	e006      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b4a:	bf00      	nop
 8000b4c:	e004      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b4e:	bf00      	nop
 8000b50:	e002      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b52:	bf00      	nop
 8000b54:	e000      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b56:	bf00      	nop
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <state_disp>:

void state_disp(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status;
	int mil, cent, diz, ent;

	mil = fsm_handle->controllers.timing / 1000;
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <state_disp+0x104>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <state_disp+0x108>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	099b      	lsrs	r3, r3, #6
 8000b78:	617b      	str	r3, [r7, #20]
	cent = (fsm_handle->controllers.timing / 100) % 10;
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <state_disp+0x104>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <state_disp+0x10c>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	0959      	lsrs	r1, r3, #5
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <state_disp+0x110>)
 8000b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	1aca      	subs	r2, r1, r3
 8000b9a:	613a      	str	r2, [r7, #16]
	diz = (fsm_handle->controllers.timing / 10) % 10;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <state_disp+0x104>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <state_disp+0x110>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	08d9      	lsrs	r1, r3, #3
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <state_disp+0x110>)
 8000bac:	fba3 2301 	umull	r2, r3, r3, r1
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	60fa      	str	r2, [r7, #12]
	ent = fsm_handle->controllers.timing % 10;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <state_disp+0x104>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <state_disp+0x110>)
 8000bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	1aca      	subs	r2, r1, r3
 8000bd6:	60ba      	str	r2, [r7, #8]

	max7219_status = max7219_display_decode(0, mil);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 fd24 	bl	800162c <max7219_display_decode>
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <state_disp+0x8e>
		Error_Handler();
 8000bee:	f000 fa79 	bl	80010e4 <Error_Handler>
	max7219_status = max7219_display_decode(1, cent);
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fd17 	bl	800162c <max7219_display_decode>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <state_disp+0xa8>
		Error_Handler();
 8000c08:	f000 fa6c 	bl	80010e4 <Error_Handler>
	max7219_status = max7219_display_decode(2, diz);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	2002      	movs	r0, #2
 8000c14:	f000 fd0a 	bl	800162c <max7219_display_decode>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <state_disp+0xc2>
		Error_Handler();
 8000c22:	f000 fa5f 	bl	80010e4 <Error_Handler>
	max7219_status = max7219_display_decode(3, ent);
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fcfd 	bl	800162c <max7219_display_decode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <state_disp+0xdc>
		Error_Handler();
 8000c3c:	f000 fa52 	bl	80010e4 <Error_Handler>

	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 8000c40:	f000 fdd4 	bl	80017ec <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <state_disp+0x104>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d903      	bls.n	8000c5e <state_disp+0xfa>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <state_disp+0x104>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	771a      	strb	r2, [r3, #28]
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000dc 	.word	0x200000dc
 8000c6c:	10624dd3 	.word	0x10624dd3
 8000c70:	51eb851f 	.word	0x51eb851f
 8000c74:	cccccccd 	.word	0xcccccccd

08000c78 <state_wait>:

void state_wait(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time)
 8000c7c:	bf00      	nop
 8000c7e:	f000 fdb5 	bl	80017ec <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <state_wait+0x2c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	1ad2      	subs	r2, r2, r3
			< fsm_handle->controllers.randomTime)
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <state_wait+0x2c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3f3      	bcc.n	8000c7e <state_wait+0x6>
		;
	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c96:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <state_wait+0x2c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	771a      	strb	r2, [r3, #28]
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <state_loose>:

void state_loose(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000cae:	e03b      	b.n	8000d28 <state_loose+0x80>
		max7219_status = display_letter(game_handle->max7219_handle, 'L', 0);
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <state_loose+0xa8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	234c      	movs	r3, #76	; 0x4c
 8000cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cbc:	f000 f84c 	bl	8000d58 <display_letter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <state_loose+0x26>
			Error_Handler();
 8000cca:	f000 fa0b 	bl	80010e4 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 1);
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <state_loose+0xa8>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	234f      	movs	r3, #79	; 0x4f
 8000cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cda:	f000 f83d 	bl	8000d58 <display_letter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <state_loose+0x44>
			Error_Handler();
 8000ce8:	f000 f9fc 	bl	80010e4 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 2);
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <state_loose+0xa8>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	234f      	movs	r3, #79	; 0x4f
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	f000 f82e 	bl	8000d58 <display_letter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <state_loose+0x62>
			Error_Handler();
 8000d06:	f000 f9ed 	bl	80010e4 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <state_loose+0xa8>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	2303      	movs	r3, #3
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2353      	movs	r3, #83	; 0x53
 8000d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d16:	f000 f81f 	bl	8000d58 <display_letter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <state_loose+0x80>
			Error_Handler();
 8000d24:	f000 f9de 	bl	80010e4 <Error_Handler>
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000d28:	f000 fd60 	bl	80017ec <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <state_loose+0xac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d9b8      	bls.n	8000cb0 <state_loose+0x8>
	}

	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <state_loose+0xac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2201      	movs	r2, #1
 8000d44:	771a      	strb	r2, [r3, #28]
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000d8 	.word	0x200000d8
 8000d54:	200000dc 	.word	0x200000dc

08000d58 <display_letter>:

HAL_StatusTypeDef display_letter(MAX7219_Handle_TypeDef max7219_handle,char letter, int pos) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	1d3c      	adds	r4, r7, #4
 8000d60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d64:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef max7219_status;

	if (letter >= 'A' && letter <= 'Z') {
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	2b40      	cmp	r3, #64	; 0x40
 8000d6a:	d90e      	bls.n	8000d8a <display_letter+0x32>
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b5a      	cmp	r3, #90	; 0x5a
 8000d70:	d80b      	bhi.n	8000d8a <display_letter+0x32>
		max7219_status = max7219_display_no_decode(pos, LETTERS[letter - 'A']);
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	3b41      	subs	r3, #65	; 0x41
 8000d7a:	4906      	ldr	r1, [pc, #24]	; (8000d94 <display_letter+0x3c>)
 8000d7c:	5ccb      	ldrb	r3, [r1, r3]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4610      	mov	r0, r2
 8000d82:	f000 fc15 	bl	80015b0 <max7219_display_no_decode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	75fb      	strb	r3, [r7, #23]
	}
	return max7219_status;
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000030 	.word	0x20000030

08000d98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin) {
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000da8:	d014      	beq.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x3c>
 8000daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dae:	dc26      	bgt.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
 8000db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_EXTI_Callback+0x2e>
 8000db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dba:	dc20      	bgt.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_EXTI_Callback+0x58>
 8000dc0:	2b40      	cmp	r3, #64	; 0x40
 8000dc2:	d00e      	beq.n	8000de2 <HAL_GPIO_EXTI_Callback+0x4a>
	case BTN4_Pin:
		fsm_handle->inputs.nb_press_btn4++;
		break;
	}

}
 8000dc4:	e01b      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn1++;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	7c1a      	ldrb	r2, [r3, #16]
 8000dcc:	3201      	adds	r2, #1
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	741a      	strb	r2, [r3, #16]
		break;
 8000dd2:	e014      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn2++;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	7c5a      	ldrb	r2, [r3, #17]
 8000dda:	3201      	adds	r2, #1
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	745a      	strb	r2, [r3, #17]
		break;
 8000de0:	e00d      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn3++;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	7c9a      	ldrb	r2, [r3, #18]
 8000de8:	3201      	adds	r2, #1
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	749a      	strb	r2, [r3, #18]
		break;
 8000dee:	e006      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn4++;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	7cda      	ldrb	r2, [r3, #19]
 8000df6:	3201      	adds	r2, #1
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	74da      	strb	r2, [r3, #19]
		break;
 8000dfc:	bf00      	nop
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	200000dc 	.word	0x200000dc

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b092      	sub	sp, #72	; 0x48
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fc87 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f82b 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f8f5 	bl	8001008 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1e:	f000 f86f 	bl	8000f00 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e22:	f000 f8a3 	bl	8000f6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Handle_TypeDef max7219_handle ={
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <main+0x60>)
 8000e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            &hspi1,
            NCS_GPIO_Port,
            NCS_Pin,
            4
    };
  HAL_StatusTypeDef game_status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    Game_Handle_TypeDef game_handler = {
 8000e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            max7219_handle,
    };

    FSM_Handle_TypeDef fsm_handler;

    init_game(&game_handler, &fsm_handler);
 8000e46:	463a      	mov	r2, r7
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb8c 	bl	800056c <init_game>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  game_status=run_game();
 8000e54:	f7ff fbc2 	bl	80005dc <run_game>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  if(game_status != HAL_OK)Error_Handler();
 8000e5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f6      	beq.n	8000e54 <main+0x48>
 8000e66:	f000 f93d 	bl	80010e4 <Error_Handler>
	  game_status=run_game();
 8000e6a:	e7f3      	b.n	8000e54 <main+0x48>
 8000e6c:	0800456c 	.word	0x0800456c

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b092      	sub	sp, #72	; 0x48
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fcbd 	bl	80037fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <SystemClock_Config+0x8c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <SystemClock_Config+0x8c>)
 8000e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000eae:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 ffa1 	bl	8001e04 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 f90c 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 fabd 	bl	8002464 <HAL_RCC_ClockConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ef0:	f000 f8f8 	bl	80010e4 <Error_Handler>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3748      	adds	r7, #72	; 0x48
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40007000 	.word	0x40007000

08000f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f001 fcd9 	bl	8002908 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f000 f8c2 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000e8 	.word	0x200000e8
 8000f68:	40013000 	.word	0x40013000

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_TIM2_Init+0x98>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_TIM2_Init+0x98>)
 8000f92:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_TIM2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fa0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000fa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb2:	4814      	ldr	r0, [pc, #80]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fb4:	f001 ff3e 	bl	8002e34 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fbe:	f000 f891 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fd0:	f002 f84b 	bl	800306a <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fda:	f000 f883 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_TIM2_Init+0x98>)
 8000fec:	f002 fa38 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ff6:	f000 f875 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000140 	.word	0x20000140

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a2d      	ldr	r2, [pc, #180]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MX_GPIO_Init+0xd0>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <MX_GPIO_Init+0xd0>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <MX_GPIO_Init+0xd0>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	4821      	ldr	r0, [pc, #132]	; (80010dc <MX_GPIO_Init+0xd4>)
 8001056:	f000 fe7f 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800105a:	2360      	movs	r3, #96	; 0x60
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_GPIO_Init+0xd8>)
 8001070:	f000 fce2 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_GPIO_Init+0xd4>)
 800108e:	f000 fcd3 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001092:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001098:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_GPIO_Init+0xd4>)
 80010aa:	f000 fcc5 	bl	8001a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2017      	movs	r0, #23
 80010b4:	f000 fc89 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010b8:	2017      	movs	r0, #23
 80010ba:	f000 fca2 	bl	8001a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2028      	movs	r0, #40	; 0x28
 80010c4:	f000 fc81 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c8:	2028      	movs	r0, #40	; 0x28
 80010ca:	f000 fc9a 	bl	8001a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020800 	.word	0x40020800

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	e7fe      	b.n	80010ec <Error_Handler+0x8>
	...

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_MspInit+0x58>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <HAL_MspInit+0x58>)
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	6253      	str	r3, [r2, #36]	; 0x24
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_MspInit+0x58>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_MspInit+0x58>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <HAL_MspInit+0x58>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_MspInit+0x58>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_MspInit+0x58>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_MspInit+0x58>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6253      	str	r3, [r2, #36]	; 0x24
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_MspInit+0x58>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_SPI_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d127      	bne.n	80011be <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6213      	str	r3, [r2, #32]
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_SPI_MspInit+0x80>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_SPI_MspInit+0x80>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_SPI_MspInit+0x80>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ae:	2305      	movs	r3, #5
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_SPI_MspInit+0x84>)
 80011ba:	f000 fc3d 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40013000 	.word	0x40013000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e4:	d113      	bne.n	800120e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6253      	str	r3, [r2, #36]	; 0x24
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	201c      	movs	r0, #28
 8001204:	f000 fbe1 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001208:	201c      	movs	r0, #28
 800120a:	f000 fbfa 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 fab1 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 800126e:	2020      	movs	r0, #32
 8001270:	f000 fd8a 	bl	8001d88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001274:	2040      	movs	r0, #64	; 0x40
 8001276:	f000 fd87 	bl	8001d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <TIM2_IRQHandler+0x10>)
 8001286:	f001 fe14 	bl	8002eb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000140 	.word	0x20000140

08001294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001298:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800129c:	f000 fd74 	bl	8001d88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80012a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012a4:	f000 fd70 	bl	8001d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_kill>:

int _kill(int pid, int sig)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012c4:	f002 faea 	bl	800389c <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2216      	movs	r2, #22
 80012cc:	601a      	str	r2, [r3, #0]
  return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_exit>:

void _exit (int status)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e2:	f04f 31ff 	mov.w	r1, #4294967295
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffe7 	bl	80012ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ec:	e7fe      	b.n	80012ec <_exit+0x12>

080012ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00a      	b.n	8001316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001300:	f3af 8000 	nop.w
 8001304:	4601      	mov	r1, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf0      	blt.n	8001300 <_read+0x12>
  }

  return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e009      	b.n	800134e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	60ba      	str	r2, [r7, #8]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf1      	blt.n	800133a <_write+0x12>
  }
  return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_close>:

int _close(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001386:	605a      	str	r2, [r3, #4]
  return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_isatty>:

int _isatty(int file)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f002 fa54 	bl	800389c <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20014000 	.word	0x20014000
 8001420:	00000400 	.word	0x00000400
 8001424:	20000180 	.word	0x20000180
 8001428:	200002d8 	.word	0x200002d8

0800142c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001438:	f7ff fff8 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800143e:	490c      	ldr	r1, [pc, #48]	; (8001470 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001454:	4c09      	ldr	r4, [pc, #36]	; (800147c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f002 fa21 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7ff fcd1 	bl	8000e0c <main>
  bx lr
 800146a:	4770      	bx	lr
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001474:	08004684 	.word	0x08004684
  ldr r2, =_sbss
 8001478:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800147c:	200002d8 	.word	0x200002d8

08001480 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_IRQHandler>
	...

08001484 <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	723b      	strb	r3, [r7, #8]
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 800149c:	2302      	movs	r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 80014a0:	2300      	movs	r3, #0
 80014a2:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <max7219_transmit+0x6c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6858      	ldr	r0, [r3, #4]
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <max7219_transmit+0x6c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	891b      	ldrh	r3, [r3, #8]
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f000 fc50 	bl	8001d58 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <max7219_transmit+0x6c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f107 0108 	add.w	r1, r7, #8
 80014c6:	2364      	movs	r3, #100	; 0x64
 80014c8:	f001 faa7 	bl	8002a1a <HAL_SPI_Transmit>
 80014cc:	4603      	mov	r3, r0
 80014ce:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <max7219_transmit+0x6c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6858      	ldr	r0, [r3, #4]
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <max7219_transmit+0x6c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	891b      	ldrh	r3, [r3, #8]
 80014dc:	2201      	movs	r2, #1
 80014de:	4619      	mov	r1, r3
 80014e0:	f000 fc3a 	bl	8001d58 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 80014e4:	7afb      	ldrb	r3, [r7, #11]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000184 	.word	0x20000184

080014f4 <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 80014fc:	4a2b      	ldr	r2, [pc, #172]	; (80015ac <max7219_init+0xb8>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <max7219_init+0xb8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d104      	bne.n	8001514 <max7219_init+0x20>
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <max7219_init+0xb8>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	e047      	b.n	80015a4 <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8001518:	2100      	movs	r1, #0
 800151a:	200c      	movs	r0, #12
 800151c:	f7ff ffb2 	bl	8001484 <max7219_transmit>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <max7219_init+0x3a>
		return max7219_status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	e03a      	b.n	80015a4 <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 800152e:	2101      	movs	r1, #1
 8001530:	200c      	movs	r0, #12
 8001532:	f7ff ffa7 	bl	8001484 <max7219_transmit>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <max7219_init+0x50>
		return max7219_status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	e02f      	b.n	80015a4 <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <max7219_init+0xb8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	7a9b      	ldrb	r3, [r3, #10]
 800154a:	3b01      	subs	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4619      	mov	r1, r3
 8001550:	200b      	movs	r0, #11
 8001552:	f7ff ff97 	bl	8001484 <max7219_transmit>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <max7219_init+0x70>
		return max7219_status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	e01f      	b.n	80015a4 <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001564:	2100      	movs	r1, #0
 8001566:	2009      	movs	r0, #9
 8001568:	f7ff ff8c 	bl	8001484 <max7219_transmit>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <max7219_init+0x86>
		return max7219_status;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	e014      	b.n	80015a4 <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 800157a:	2108      	movs	r1, #8
 800157c:	200a      	movs	r0, #10
 800157e:	f7ff ff81 	bl	8001484 <max7219_transmit>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <max7219_init+0x9c>
		return max7219_status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	e009      	b.n	80015a4 <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 8001590:	f000 f88a 	bl	80016a8 <max7219_erase_no_decode>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <max7219_init+0xae>
		return max7219_status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	e000      	b.n	80015a4 <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000184 	.word	0x20000184

080015b0 <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	460a      	mov	r2, r1
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	4613      	mov	r3, r2
 80015be:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <max7219_display_no_decode+0x74>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d104      	bne.n	80015d6 <max7219_display_no_decode+0x26>
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <max7219_display_no_decode+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	2301      	movs	r3, #1
 80015d4:	e022      	b.n	800161c <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2009      	movs	r0, #9
 80015da:	f7ff ff53 	bl	8001484 <max7219_transmit>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <max7219_display_no_decode+0x3c>
		return max7219_status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	e017      	b.n	800161c <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <max7219_display_no_decode+0x74>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	7a9b      	ldrb	r3, [r3, #10]
 80015f2:	79fa      	ldrb	r2, [r7, #7]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d901      	bls.n	80015fc <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00f      	b.n	800161c <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <max7219_display_no_decode+0x78>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	79ba      	ldrb	r2, [r7, #6]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff3c 	bl	8001484 <max7219_transmit>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <max7219_display_no_decode+0x6a>
		return max7219_status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	e000      	b.n	800161c <max7219_display_no_decode+0x6c>

	return max7219_status;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000184 	.word	0x20000184
 8001628:	20000050 	.word	0x20000050

0800162c <max7219_display_decode>:
 * @brief Display value with code B decoding.
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_decode(uint8_t _digit_index, uint8_t _digit_value){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <max7219_display_decode+0x74>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d104      	bne.n	8001652 <max7219_display_decode+0x26>
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <max7219_display_decode+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	e022      	b.n	8001698 <max7219_display_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <max7219_display_decode+0x74>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	7a9b      	ldrb	r3, [r3, #10]
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	429a      	cmp	r2, r3
 800165c:	d901      	bls.n	8001662 <max7219_display_decode+0x36>
		return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e01a      	b.n	8001698 <max7219_display_decode+0x6c>

	// Set decode mode to 'decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0xFF);
 8001662:	21ff      	movs	r1, #255	; 0xff
 8001664:	2009      	movs	r0, #9
 8001666:	f7ff ff0d 	bl	8001484 <max7219_transmit>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <max7219_display_decode+0x4c>
		return max7219_status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	e00f      	b.n	8001698 <max7219_display_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <max7219_display_decode+0x78>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	79ba      	ldrb	r2, [r7, #6]
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fefe 	bl	8001484 <max7219_transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <max7219_display_decode+0x6a>
		return max7219_status;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	e000      	b.n	8001698 <max7219_display_decode+0x6c>

	return max7219_status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000184 	.word	0x20000184
 80016a4:	20000050 	.word	0x20000050

080016a8 <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <max7219_erase_no_decode+0x74>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d104      	bne.n	80016c4 <max7219_erase_no_decode+0x1c>
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <max7219_erase_no_decode+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	2301      	movs	r3, #1
 80016c2:	e027      	b.n	8001714 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2009      	movs	r0, #9
 80016c8:	f7ff fedc 	bl	8001484 <max7219_transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <max7219_erase_no_decode+0x32>
		return max7219_status;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	e01c      	b.n	8001714 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	e011      	b.n	8001704 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <max7219_erase_no_decode+0x78>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff feca 	bl	8001484 <max7219_transmit>
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <max7219_erase_no_decode+0x56>
			return max7219_status;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	e00a      	b.n	8001714 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <max7219_erase_no_decode+0x74>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	7a9b      	ldrb	r3, [r3, #10]
 800170a:	461a      	mov	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4293      	cmp	r3, r2
 8001710:	dbe6      	blt.n	80016e0 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 8001712:	79fb      	ldrb	r3, [r7, #7]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000184 	.word	0x20000184
 8001720:	20000050 	.word	0x20000050

08001724 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172e:	2003      	movs	r0, #3
 8001730:	f000 f940 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001734:	200f      	movs	r0, #15
 8001736:	f000 f80d 	bl	8001754 <HAL_InitTick>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	e001      	b.n	800174a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001746:	f7ff fcd3 	bl	80010f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174a:	79fb      	ldrb	r3, [r7, #7]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_InitTick+0x68>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d022      	beq.n	80017ae <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_InitTick+0x6c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_InitTick+0x68>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001774:	fbb1 f3f3 	udiv	r3, r1, r3
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f000 f94e 	bl	8001a1e <HAL_SYSTICK_Config>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10f      	bne.n	80017a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b0f      	cmp	r3, #15
 800178c:	d809      	bhi.n	80017a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178e:	2200      	movs	r2, #0
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	f04f 30ff 	mov.w	r0, #4294967295
 8001796:	f000 f918 	bl	80019ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_InitTick+0x70>)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e007      	b.n	80017b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e004      	b.n	80017b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	e001      	b.n	80017b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000005c 	.word	0x2000005c
 80017c0:	2000004c 	.word	0x2000004c
 80017c4:	20000058 	.word	0x20000058

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x1c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_IncTick+0x20>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a03      	ldr	r2, [pc, #12]	; (80017e4 <HAL_IncTick+0x1c>)
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000188 	.word	0x20000188
 80017e8:	2000005c 	.word	0x2000005c

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_GetTick+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000188 	.word	0x20000188

08001800 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <HAL_SuspendTick+0x18>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_SuspendTick+0x18>)
 800180a:	f023 0302 	bic.w	r3, r3, #2
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	e000e010 	.word	0xe000e010

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4906      	ldr	r1, [pc, #24]	; (80018b4 <__NVIC_EnableIRQ+0x34>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff90 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff2d 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff42 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff35 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a4e:	e160      	b.n	8001d12 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8152 	beq.w	8001d0c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d005      	beq.n	8001a80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d130      	bne.n	8001ae2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 0201 	and.w	r2, r3, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d017      	beq.n	8001b1e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d123      	bne.n	8001b72 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0203 	and.w	r2, r3, #3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80ac 	beq.w	8001d0c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a5d      	ldr	r2, [pc, #372]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6213      	str	r3, [r2, #32]
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bcc:	4a59      	ldr	r2, [pc, #356]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d025      	beq.n	8001c44 <HAL_GPIO_Init+0x20c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01f      	beq.n	8001c40 <HAL_GPIO_Init+0x208>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d019      	beq.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_GPIO_Init+0x200>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a4d      	ldr	r2, [pc, #308]	; (8001d48 <HAL_GPIO_Init+0x310>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00d      	beq.n	8001c34 <HAL_GPIO_Init+0x1fc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_GPIO_Init+0x314>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d007      	beq.n	8001c30 <HAL_GPIO_Init+0x1f8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <HAL_GPIO_Init+0x318>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_GPIO_Init+0x1f4>
 8001c28:	2306      	movs	r3, #6
 8001c2a:	e00c      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	e00a      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c44:	2300      	movs	r3, #0
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c56:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8e:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb2:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f ae97 	bne.w	8001a50 <HAL_GPIO_Init+0x18>
  }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fff6 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 0203 	bic.w	r2, r3, #3
 8001dcc:	490b      	ldr	r1, [pc, #44]	; (8001dfc <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001dda:	f023 0304 	bic.w	r3, r3, #4
 8001dde:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001de6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001de8:	e002      	b.n	8001df0 <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 8001dea:	bf40      	sev
    __WFE();
 8001dec:	bf20      	wfe
    __WFE();
 8001dee:	bf20      	wfe
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e31d      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e16:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e20:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d07b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d006      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d10f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5e>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d10b      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4a:	4b87      	ldr	r3, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d06a      	beq.n	8001f2c <HAL_RCC_OscConfig+0x128>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d166      	bne.n	8001f2c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e2f7      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d106      	bne.n	8001e78 <HAL_RCC_OscConfig+0x74>
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7e      	ldr	r2, [pc, #504]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e02d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_OscConfig+0x96>
 8001e80:	4b79      	ldr	r3, [pc, #484]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a78      	ldr	r2, [pc, #480]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e01c      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd0>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xb8>
 8001ea2:	4b71      	ldr	r3, [pc, #452]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a70      	ldr	r2, [pc, #448]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6e      	ldr	r3, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6d      	ldr	r2, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd0>
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc86 	bl	80017ec <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fc82 	bl	80017ec <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e2ad      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe0>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc72 	bl	80017ec <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fc6e 	bl	80017ec <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e299      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f1e:	4b52      	ldr	r3, [pc, #328]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x108>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d05a      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d119      	bne.n	8001f7a <HAL_RCC_OscConfig+0x176>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d116      	bne.n	8001f7a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x160>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e276      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	493d      	ldr	r1, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f78:	e03a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d020      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCC_OscConfig+0x268>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fc30 	bl	80017ec <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7ff fc2c 	bl	80017ec <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e257      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	492a      	ldr	r1, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
 8001fc2:	e015      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCC_OscConfig+0x268>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fc0f 	bl	80017ec <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fc0b 	bl	80017ec <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e236      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b8 	beq.w	800216e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d170      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_OscConfig+0x218>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e21a      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1a      	ldr	r2, [r3, #32]
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002028:	429a      	cmp	r2, r3
 800202a:	d921      	bls.n	8002070 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fc09 	bl	8002848 <RCC_SetFlashLatencyFromMSIRange>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e208      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4906      	ldr	r1, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	4901      	ldr	r1, [pc, #4]	; (8002068 <HAL_RCC_OscConfig+0x264>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
 8002066:	e020      	b.n	80020aa <HAL_RCC_OscConfig+0x2a6>
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b99      	ldr	r3, [pc, #612]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4996      	ldr	r1, [pc, #600]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002082:	4b95      	ldr	r3, [pc, #596]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	061b      	lsls	r3, r3, #24
 8002090:	4991      	ldr	r1, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fbd4 	bl	8002848 <RCC_SetFlashLatencyFromMSIRange>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e1d3      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	0b5b      	lsrs	r3, r3, #13
 80020b0:	3301      	adds	r3, #1
 80020b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80020bc:	6892      	ldr	r2, [r2, #8]
 80020be:	0912      	lsrs	r2, r2, #4
 80020c0:	f002 020f 	and.w	r2, r2, #15
 80020c4:	4985      	ldr	r1, [pc, #532]	; (80022dc <HAL_RCC_OscConfig+0x4d8>)
 80020c6:	5c8a      	ldrb	r2, [r1, r2]
 80020c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ca:	4a85      	ldr	r2, [pc, #532]	; (80022e0 <HAL_RCC_OscConfig+0x4dc>)
 80020cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020ce:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <HAL_RCC_OscConfig+0x4e0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fb3e 	bl	8001754 <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d045      	beq.n	800216e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	e1b5      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d029      	beq.n	8002142 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ee:	4b7e      	ldr	r3, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x4e4>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fb7a 	bl	80017ec <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020fc:	f7ff fb76 	bl	80017ec <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1a1      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	496c      	ldr	r1, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	4967      	ldr	r1, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002142:	4b69      	ldr	r3, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x4e4>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fb50 	bl	80017ec <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002150:	f7ff fb4c 	bl	80017ec <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e177      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d030      	beq.n	80021dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d016      	beq.n	80021b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b5a      	ldr	r3, [pc, #360]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff fb30 	bl	80017ec <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff fb2c 	bl	80017ec <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e157      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x38c>
 80021ae:	e015      	b.n	80021dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b0:	4b4e      	ldr	r3, [pc, #312]	; (80022ec <HAL_RCC_OscConfig+0x4e8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fb19 	bl	80017ec <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7ff fb15 	bl	80017ec <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e140      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f0      	bne.n	80021be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80b5 	beq.w	8002354 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	6253      	str	r3, [r2, #36]	; 0x24
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002212:	2301      	movs	r3, #1
 8002214:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7ff fadd 	bl	80017ec <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7ff fad9 	bl	80017ec <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e104      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x4ec>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x466>
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002266:	6353      	str	r3, [r2, #52]	; 0x34
 8002268:	e02d      	b.n	80022c6 <HAL_RCC_OscConfig+0x4c2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x488>
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227c:	6353      	str	r3, [r2, #52]	; 0x34
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002288:	6353      	str	r3, [r2, #52]	; 0x34
 800228a:	e01c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4c2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x4aa>
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229e:	6353      	str	r3, [r2, #52]	; 0x34
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6353      	str	r3, [r2, #52]	; 0x34
 80022ac:	e00b      	b.n	80022c6 <HAL_RCC_OscConfig+0x4c2>
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80022b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022b8:	6353      	str	r3, [r2, #52]	; 0x34
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fa8d 	bl	80017ec <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022d4:	e019      	b.n	800230a <HAL_RCC_OscConfig+0x506>
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	08004584 	.word	0x08004584
 80022e0:	2000004c 	.word	0x2000004c
 80022e4:	20000058 	.word	0x20000058
 80022e8:	42470020 	.word	0x42470020
 80022ec:	42470680 	.word	0x42470680
 80022f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7ff fa7a 	bl	80017ec <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0a3      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800230a:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_RCC_OscConfig+0x658>)
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ee      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4f0>
 8002316:	e014      	b.n	8002342 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7ff fa68 	bl	80017ec <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7ff fa64 	bl	80017ec <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e08d      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCC_OscConfig+0x658>)
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ee      	bne.n	8002320 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4b44      	ldr	r3, [pc, #272]	; (800245c <HAL_RCC_OscConfig+0x658>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4a43      	ldr	r2, [pc, #268]	; (800245c <HAL_RCC_OscConfig+0x658>)
 800234e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002352:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d079      	beq.n	8002450 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d056      	beq.n	8002410 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2b02      	cmp	r3, #2
 8002368:	d13b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCC_OscConfig+0x65c>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff fa3c 	bl	80017ec <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff fa38 	bl	80017ec <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e063      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800238a:	4b34      	ldr	r3, [pc, #208]	; (800245c <HAL_RCC_OscConfig+0x658>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_RCC_OscConfig+0x658>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	4319      	orrs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	430b      	orrs	r3, r1
 80023ae:	492b      	ldr	r1, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x658>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <HAL_RCC_OscConfig+0x65c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff fa17 	bl	80017ec <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff fa13 	bl	80017ec <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e03e      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_RCC_OscConfig+0x658>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x5be>
 80023e0:	e036      	b.n	8002450 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <HAL_RCC_OscConfig+0x65c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fa00 	bl	80017ec <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f9fc 	bl	80017ec <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e027      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_RCC_OscConfig+0x658>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5ec>
 800240e:	e01f      	b.n	8002450 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e01a      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_RCC_OscConfig+0x658>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	429a      	cmp	r2, r3
 800242e:	d10d      	bne.n	800244c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	42470060 	.word	0x42470060

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e11a      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b8f      	ldr	r3, [pc, #572]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d919      	bls.n	80024ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_ClockConfig+0x34>
 800248c:	4b8a      	ldr	r3, [pc, #552]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a89      	ldr	r2, [pc, #548]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 0201 	bic.w	r2, r3, #1
 80024a0:	4985      	ldr	r1, [pc, #532]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a8:	4b83      	ldr	r3, [pc, #524]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0f9      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c6:	4b7d      	ldr	r3, [pc, #500]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	497a      	ldr	r1, [pc, #488]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 808e 	beq.w	8002602 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d121      	bne.n	800253e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0d7      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002506:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d115      	bne.n	800253e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0cb      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0bf      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0b7      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	495c      	ldr	r1, [pc, #368]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7ff f94c 	bl	80017ec <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d112      	bne.n	8002584 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800255e:	e00a      	b.n	8002576 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7ff f944 	bl	80017ec <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f241 3288 	movw	r2, #5000	; 0x1388
 800256e:	4293      	cmp	r3, r2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e09b      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d1ee      	bne.n	8002560 <HAL_RCC_ClockConfig+0xfc>
 8002582:	e03e      	b.n	8002602 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d112      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258e:	f7ff f92d 	bl	80017ec <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e084      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b45      	ldr	r3, [pc, #276]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	d1ee      	bne.n	800258e <HAL_RCC_ClockConfig+0x12a>
 80025b0:	e027      	b.n	8002602 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d11d      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff f916 	bl	80017ec <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e06d      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d1ee      	bne.n	80025bc <HAL_RCC_ClockConfig+0x158>
 80025de:	e010      	b.n	8002602 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff f904 	bl	80017ec <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e05b      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ee      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d219      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCC_ClockConfig+0x1be>
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0201 	bic.w	r2, r3, #1
 800262a:	4923      	ldr	r1, [pc, #140]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_ClockConfig+0x254>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e034      	b.n	80026ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4917      	ldr	r1, [pc, #92]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490f      	ldr	r1, [pc, #60]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f823 	bl	80026cc <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_RCC_ClockConfig+0x258>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490b      	ldr	r1, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x25c>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x260>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x264>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f856 	bl	8001754 <HAL_InitTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80026ac:	7afb      	ldrb	r3, [r7, #11]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08004584 	.word	0x08004584
 80026c4:	2000004c 	.word	0x2000004c
 80026c8:	20000058 	.word	0x20000058

080026cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d0:	b08e      	sub	sp, #56	; 0x38
 80026d2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80026d4:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d00d      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x34>
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	f200 8092 	bhi.w	800280e <HAL_RCC_GetSysClockFreq+0x142>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x28>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x2e>
 80026f2:	e08c      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b51      	ldr	r3, [pc, #324]	; (800283c <HAL_RCC_GetSysClockFreq+0x170>)
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026f8:	e097      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026fa:	4b51      	ldr	r3, [pc, #324]	; (8002840 <HAL_RCC_GetSysClockFreq+0x174>)
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026fe:	e094      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	0c9b      	lsrs	r3, r3, #18
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <HAL_RCC_GetSysClockFreq+0x178>)
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	0d9b      	lsrs	r3, r3, #22
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_GetSysClockFreq+0x16c>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d021      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	2200      	movs	r2, #0
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	61fa      	str	r2, [r7, #28]
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <HAL_RCC_GetSysClockFreq+0x174>)
 8002730:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002734:	464a      	mov	r2, r9
 8002736:	fb03 f202 	mul.w	r2, r3, r2
 800273a:	2300      	movs	r3, #0
 800273c:	4644      	mov	r4, r8
 800273e:	fb04 f303 	mul.w	r3, r4, r3
 8002742:	4413      	add	r3, r2
 8002744:	4a3e      	ldr	r2, [pc, #248]	; (8002840 <HAL_RCC_GetSysClockFreq+0x174>)
 8002746:	4644      	mov	r4, r8
 8002748:	fba4 0102 	umull	r0, r1, r4, r2
 800274c:	440b      	add	r3, r1
 800274e:	4619      	mov	r1, r3
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	2200      	movs	r2, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	617a      	str	r2, [r7, #20]
 8002758:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800275c:	f7fd fd0e 	bl	800017c <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
 8002768:	e04e      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	2200      	movs	r2, #0
 800276e:	469a      	mov	sl, r3
 8002770:	4693      	mov	fp, r2
 8002772:	4652      	mov	r2, sl
 8002774:	465b      	mov	r3, fp
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	ebb2 080a 	subs.w	r8, r2, sl
 800278e:	eb63 090b 	sbc.w	r9, r3, fp
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800279e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027a6:	ebb2 0408 	subs.w	r4, r2, r8
 80027aa:	eb63 0509 	sbc.w	r5, r3, r9
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	00eb      	lsls	r3, r5, #3
 80027b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027bc:	00e2      	lsls	r2, r4, #3
 80027be:	4614      	mov	r4, r2
 80027c0:	461d      	mov	r5, r3
 80027c2:	eb14 030a 	adds.w	r3, r4, sl
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	eb45 030b 	adc.w	r3, r5, fp
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4620      	mov	r0, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	4604      	mov	r4, r0
 80027e4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80027e8:	4601      	mov	r1, r0
 80027ea:	028a      	lsls	r2, r1, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2200      	movs	r2, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	60fa      	str	r2, [r7, #12]
 80027f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027fc:	f7fd fcbe 	bl	800017c <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4613      	mov	r3, r2
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800280c:	e00d      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	3301      	adds	r3, #1
 800281e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800282c:	4618      	mov	r0, r3
 800282e:	3738      	adds	r7, #56	; 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400
 8002840:	016e3600 	.word	0x016e3600
 8002844:	08004578 	.word	0x08004578

08002848 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002854:	4b29      	ldr	r3, [pc, #164]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d12c      	bne.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002860:	4b26      	ldr	r3, [pc, #152]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e016      	b.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002882:	6253      	str	r3, [r2, #36]	; 0x24
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002898:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4b18      	ldr	r3, [pc, #96]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028ac:	d105      	bne.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x72>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028b4:	d101      	bne.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80028b6:	2301      	movs	r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 0201 	bic.w	r2, r3, #1
 80028d4:	490b      	ldr	r1, [pc, #44]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800
 8002900:	40007000 	.word	0x40007000
 8002904:	40023c00 	.word	0x40023c00

08002908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07b      	b.n	8002a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292a:	d009      	beq.n	8002940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
 8002932:	e005      	b.n	8002940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fbf6 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	ea42 0103 	orr.w	r1, r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	0c1b      	lsrs	r3, r3, #16
 80029de:	f003 0104 	and.w	r1, r3, #4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f003 0210 	and.w	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b088      	sub	sp, #32
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_SPI_Transmit+0x22>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e12d      	b.n	8002c98 <HAL_SPI_Transmit+0x27e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a44:	f7fe fed2 	bl	80017ec <HAL_GetTick>
 8002a48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a5e:	e116      	b.n	8002c8e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_Transmit+0x52>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a70:	e10d      	b.n	8002c8e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2203      	movs	r2, #3
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	88fa      	ldrh	r2, [r7, #6]
 8002a8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d10f      	bne.n	8002ada <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d007      	beq.n	8002af8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b00:	d14f      	bne.n	8002ba2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0xf6>
 8002b0a:	8afb      	ldrh	r3, [r7, #22]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d142      	bne.n	8002b96 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	881a      	ldrh	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b34:	e02f      	b.n	8002b96 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d112      	bne.n	8002b6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	881a      	ldrh	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	1c9a      	adds	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b68:	e015      	b.n	8002b96 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b6a:	f7fe fe3f 	bl	80017ec <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d803      	bhi.n	8002b82 <HAL_SPI_Transmit+0x168>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d102      	bne.n	8002b88 <HAL_SPI_Transmit+0x16e>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002b94:	e07b      	b.n	8002c8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ca      	bne.n	8002b36 <HAL_SPI_Transmit+0x11c>
 8002ba0:	e050      	b.n	8002c44 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_Transmit+0x196>
 8002baa:	8afb      	ldrh	r3, [r7, #22]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d144      	bne.n	8002c3a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bd6:	e030      	b.n	8002c3a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d113      	bne.n	8002c0e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	330c      	adds	r3, #12
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c0c:	e015      	b.n	8002c3a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c0e:	f7fe fded 	bl	80017ec <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d803      	bhi.n	8002c26 <HAL_SPI_Transmit+0x20c>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_Transmit+0x212>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c38:	e029      	b.n	8002c8e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1c9      	bne.n	8002bd8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f8b1 	bl	8002db0 <SPI_EndRxTxTransaction>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	77fb      	strb	r3, [r7, #31]
 8002c84:	e003      	b.n	8002c8e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cb0:	f7fe fd9c 	bl	80017ec <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cc0:	f7fe fd94 	bl	80017ec <HAL_GetTick>
 8002cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cc6:	4b39      	ldr	r3, [pc, #228]	; (8002dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	0d1b      	lsrs	r3, r3, #20
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	fb02 f303 	mul.w	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd6:	e054      	b.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d050      	beq.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ce0:	f7fe fd84 	bl	80017ec <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13d      	bne.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d0e:	d111      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d18:	d004      	beq.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d107      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3c:	d10f      	bne.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e017      	b.n	8002da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	bf0c      	ite	eq
 8002d92:	2301      	moveq	r3, #1
 8002d94:	2300      	movne	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d19b      	bne.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000004c 	.word	0x2000004c

08002db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <SPI_EndRxTxTransaction+0x7c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <SPI_EndRxTxTransaction+0x80>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0d5b      	lsrs	r3, r3, #21
 8002dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dda:	d112      	bne.n	8002e02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff5a 	bl	8002ca0 <SPI_WaitFlagStateUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e00f      	b.n	8002e22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d0f2      	beq.n	8002e02 <SPI_EndRxTxTransaction+0x52>
 8002e1c:	e000      	b.n	8002e20 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e1e:	bf00      	nop
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000004c 	.word	0x2000004c
 8002e30:	165e9f81 	.word	0x165e9f81

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e031      	b.n	8002eaa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe f9ba 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 f9ee 	bl	8003254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d122      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d11b      	bne.n	8002f0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f06f 0202 	mvn.w	r2, #2
 8002ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f991 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002efa:	e005      	b.n	8002f08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f984 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f993 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d122      	bne.n	8002f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d11b      	bne.n	8002f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f06f 0204 	mvn.w	r2, #4
 8002f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f967 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002f4e:	e005      	b.n	8002f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f95a 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f969 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d122      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11b      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f06f 0208 	mvn.w	r2, #8
 8002f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f93d 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002fa2:	e005      	b.n	8002fb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f930 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f93f 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b10      	cmp	r3, #16
 8002fc2:	d122      	bne.n	800300a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d11b      	bne.n	800300a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f06f 0210 	mvn.w	r2, #16
 8002fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f913 	bl	800321c <HAL_TIM_IC_CaptureCallback>
 8002ff6:	e005      	b.n	8003004 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f906 	bl	800320a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f915 	bl	800322e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10e      	bne.n	8003036 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d107      	bne.n	8003036 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0201 	mvn.w	r2, #1
 800302e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8e1 	bl	80031f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d10e      	bne.n	8003062 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d107      	bne.n	8003062 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8ef 	bl	8003240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_TIM_ConfigClockSource+0x1c>
 8003082:	2302      	movs	r3, #2
 8003084:	e0b4      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x186>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030be:	d03e      	beq.n	800313e <HAL_TIM_ConfigClockSource+0xd4>
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	f200 8087 	bhi.w	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	f000 8086 	beq.w	80031dc <HAL_TIM_ConfigClockSource+0x172>
 80030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d4:	d87f      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030d6:	2b70      	cmp	r3, #112	; 0x70
 80030d8:	d01a      	beq.n	8003110 <HAL_TIM_ConfigClockSource+0xa6>
 80030da:	2b70      	cmp	r3, #112	; 0x70
 80030dc:	d87b      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030de:	2b60      	cmp	r3, #96	; 0x60
 80030e0:	d050      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0x11a>
 80030e2:	2b60      	cmp	r3, #96	; 0x60
 80030e4:	d877      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030e6:	2b50      	cmp	r3, #80	; 0x50
 80030e8:	d03c      	beq.n	8003164 <HAL_TIM_ConfigClockSource+0xfa>
 80030ea:	2b50      	cmp	r3, #80	; 0x50
 80030ec:	d873      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d058      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x13a>
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d86f      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030f6:	2b30      	cmp	r3, #48	; 0x30
 80030f8:	d064      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x15a>
 80030fa:	2b30      	cmp	r3, #48	; 0x30
 80030fc:	d86b      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d060      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x15a>
 8003102:	2b20      	cmp	r3, #32
 8003104:	d867      	bhi.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d05c      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x15a>
 800310a:	2b10      	cmp	r3, #16
 800310c:	d05a      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x15a>
 800310e:	e062      	b.n	80031d6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003120:	f000 f97f 	bl	8003422 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003132:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	609a      	str	r2, [r3, #8]
      break;
 800313c:	e04f      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800314e:	f000 f968 	bl	8003422 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003160:	609a      	str	r2, [r3, #8]
      break;
 8003162:	e03c      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003170:	461a      	mov	r2, r3
 8003172:	f000 f8df 	bl	8003334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2150      	movs	r1, #80	; 0x50
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f936 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8003182:	e02c      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003190:	461a      	mov	r2, r3
 8003192:	f000 f8fd 	bl	8003390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2160      	movs	r1, #96	; 0x60
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f926 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 80031a2:	e01c      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b0:	461a      	mov	r2, r3
 80031b2:	f000 f8bf 	bl	8003334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2140      	movs	r1, #64	; 0x40
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f916 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 80031c2:	e00c      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f000 f90d 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 80031d4:	e003      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      break;
 80031da:	e000      	b.n	80031de <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
	...

08003254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d00f      	beq.n	800328c <TIM_Base_SetConfig+0x38>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a2b      	ldr	r2, [pc, #172]	; (800331c <TIM_Base_SetConfig+0xc8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_Base_SetConfig+0x38>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <TIM_Base_SetConfig+0xcc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_Base_SetConfig+0x38>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a29      	ldr	r2, [pc, #164]	; (8003324 <TIM_Base_SetConfig+0xd0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0x38>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a28      	ldr	r2, [pc, #160]	; (8003328 <TIM_Base_SetConfig+0xd4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d108      	bne.n	800329e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d017      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <TIM_Base_SetConfig+0xc8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <TIM_Base_SetConfig+0xcc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00f      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <TIM_Base_SetConfig+0xd0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <TIM_Base_SetConfig+0xd4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <TIM_Base_SetConfig+0xd8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_Base_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <TIM_Base_SetConfig+0xdc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d108      	bne.n	80032e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40010800 	.word	0x40010800
 800332c:	40010c00 	.word	0x40010c00
 8003330:	40011000 	.word	0x40011000

08003334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 030a 	bic.w	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0210 	bic.w	r2, r3, #16
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	031b      	lsls	r3, r3, #12
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	f043 0307 	orr.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	021a      	lsls	r2, r3, #8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	609a      	str	r2, [r3, #8]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e046      	b.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ba:	d00e      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a10      	ldr	r2, [pc, #64]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10c      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40010800 	.word	0x40010800

0800351c <srand>:
 800351c:	b538      	push	{r3, r4, r5, lr}
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <srand+0x44>)
 8003520:	4604      	mov	r4, r0
 8003522:	681d      	ldr	r5, [r3, #0]
 8003524:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003526:	b9b3      	cbnz	r3, 8003556 <srand+0x3a>
 8003528:	2018      	movs	r0, #24
 800352a:	f000 fa4b 	bl	80039c4 <malloc>
 800352e:	4602      	mov	r2, r0
 8003530:	6328      	str	r0, [r5, #48]	; 0x30
 8003532:	b920      	cbnz	r0, 800353e <srand+0x22>
 8003534:	2146      	movs	r1, #70	; 0x46
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <srand+0x48>)
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <srand+0x4c>)
 800353a:	f000 f9dd 	bl	80038f8 <__assert_func>
 800353e:	490b      	ldr	r1, [pc, #44]	; (800356c <srand+0x50>)
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <srand+0x54>)
 8003542:	e9c0 1300 	strd	r1, r3, [r0]
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <srand+0x58>)
 8003548:	2100      	movs	r1, #0
 800354a:	6083      	str	r3, [r0, #8]
 800354c:	230b      	movs	r3, #11
 800354e:	8183      	strh	r3, [r0, #12]
 8003550:	2001      	movs	r0, #1
 8003552:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003556:	2200      	movs	r2, #0
 8003558:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800355a:	611c      	str	r4, [r3, #16]
 800355c:	615a      	str	r2, [r3, #20]
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	200000b8 	.word	0x200000b8
 8003564:	08004594 	.word	0x08004594
 8003568:	080045ab 	.word	0x080045ab
 800356c:	abcd330e 	.word	0xabcd330e
 8003570:	e66d1234 	.word	0xe66d1234
 8003574:	0005deec 	.word	0x0005deec

08003578 <rand>:
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <rand+0x5c>)
 800357a:	b510      	push	{r4, lr}
 800357c:	681c      	ldr	r4, [r3, #0]
 800357e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003580:	b9b3      	cbnz	r3, 80035b0 <rand+0x38>
 8003582:	2018      	movs	r0, #24
 8003584:	f000 fa1e 	bl	80039c4 <malloc>
 8003588:	4602      	mov	r2, r0
 800358a:	6320      	str	r0, [r4, #48]	; 0x30
 800358c:	b920      	cbnz	r0, 8003598 <rand+0x20>
 800358e:	2152      	movs	r1, #82	; 0x52
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <rand+0x60>)
 8003592:	4812      	ldr	r0, [pc, #72]	; (80035dc <rand+0x64>)
 8003594:	f000 f9b0 	bl	80038f8 <__assert_func>
 8003598:	4911      	ldr	r1, [pc, #68]	; (80035e0 <rand+0x68>)
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <rand+0x6c>)
 800359c:	e9c0 1300 	strd	r1, r3, [r0]
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <rand+0x70>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	6083      	str	r3, [r0, #8]
 80035a6:	230b      	movs	r3, #11
 80035a8:	8183      	strh	r3, [r0, #12]
 80035aa:	2001      	movs	r0, #1
 80035ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80035b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035b2:	480e      	ldr	r0, [pc, #56]	; (80035ec <rand+0x74>)
 80035b4:	690b      	ldr	r3, [r1, #16]
 80035b6:	694c      	ldr	r4, [r1, #20]
 80035b8:	4358      	muls	r0, r3
 80035ba:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <rand+0x78>)
 80035bc:	fb02 0004 	mla	r0, r2, r4, r0
 80035c0:	fba3 3202 	umull	r3, r2, r3, r2
 80035c4:	3301      	adds	r3, #1
 80035c6:	eb40 0002 	adc.w	r0, r0, r2
 80035ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80035ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80035d2:	bd10      	pop	{r4, pc}
 80035d4:	200000b8 	.word	0x200000b8
 80035d8:	08004594 	.word	0x08004594
 80035dc:	080045ab 	.word	0x080045ab
 80035e0:	abcd330e 	.word	0xabcd330e
 80035e4:	e66d1234 	.word	0xe66d1234
 80035e8:	0005deec 	.word	0x0005deec
 80035ec:	5851f42d 	.word	0x5851f42d
 80035f0:	4c957f2d 	.word	0x4c957f2d

080035f4 <std>:
 80035f4:	2300      	movs	r3, #0
 80035f6:	b510      	push	{r4, lr}
 80035f8:	4604      	mov	r4, r0
 80035fa:	e9c0 3300 	strd	r3, r3, [r0]
 80035fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003602:	6083      	str	r3, [r0, #8]
 8003604:	8181      	strh	r1, [r0, #12]
 8003606:	6643      	str	r3, [r0, #100]	; 0x64
 8003608:	81c2      	strh	r2, [r0, #14]
 800360a:	6183      	str	r3, [r0, #24]
 800360c:	4619      	mov	r1, r3
 800360e:	2208      	movs	r2, #8
 8003610:	305c      	adds	r0, #92	; 0x5c
 8003612:	f000 f8f4 	bl	80037fe <memset>
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <std+0x58>)
 8003618:	6224      	str	r4, [r4, #32]
 800361a:	6263      	str	r3, [r4, #36]	; 0x24
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <std+0x5c>)
 800361e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <std+0x60>)
 8003622:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <std+0x64>)
 8003626:	6323      	str	r3, [r4, #48]	; 0x30
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <std+0x68>)
 800362a:	429c      	cmp	r4, r3
 800362c:	d006      	beq.n	800363c <std+0x48>
 800362e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003632:	4294      	cmp	r4, r2
 8003634:	d002      	beq.n	800363c <std+0x48>
 8003636:	33d0      	adds	r3, #208	; 0xd0
 8003638:	429c      	cmp	r4, r3
 800363a:	d105      	bne.n	8003648 <std+0x54>
 800363c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003644:	f000 b954 	b.w	80038f0 <__retarget_lock_init_recursive>
 8003648:	bd10      	pop	{r4, pc}
 800364a:	bf00      	nop
 800364c:	08003779 	.word	0x08003779
 8003650:	0800379b 	.word	0x0800379b
 8003654:	080037d3 	.word	0x080037d3
 8003658:	080037f7 	.word	0x080037f7
 800365c:	2000018c 	.word	0x2000018c

08003660 <stdio_exit_handler>:
 8003660:	4a02      	ldr	r2, [pc, #8]	; (800366c <stdio_exit_handler+0xc>)
 8003662:	4903      	ldr	r1, [pc, #12]	; (8003670 <stdio_exit_handler+0x10>)
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <stdio_exit_handler+0x14>)
 8003666:	f000 b869 	b.w	800373c <_fwalk_sglue>
 800366a:	bf00      	nop
 800366c:	20000060 	.word	0x20000060
 8003670:	08003c31 	.word	0x08003c31
 8003674:	2000006c 	.word	0x2000006c

08003678 <cleanup_stdio>:
 8003678:	6841      	ldr	r1, [r0, #4]
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <cleanup_stdio+0x34>)
 800367c:	b510      	push	{r4, lr}
 800367e:	4299      	cmp	r1, r3
 8003680:	4604      	mov	r4, r0
 8003682:	d001      	beq.n	8003688 <cleanup_stdio+0x10>
 8003684:	f000 fad4 	bl	8003c30 <_fflush_r>
 8003688:	68a1      	ldr	r1, [r4, #8]
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <cleanup_stdio+0x38>)
 800368c:	4299      	cmp	r1, r3
 800368e:	d002      	beq.n	8003696 <cleanup_stdio+0x1e>
 8003690:	4620      	mov	r0, r4
 8003692:	f000 facd 	bl	8003c30 <_fflush_r>
 8003696:	68e1      	ldr	r1, [r4, #12]
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <cleanup_stdio+0x3c>)
 800369a:	4299      	cmp	r1, r3
 800369c:	d004      	beq.n	80036a8 <cleanup_stdio+0x30>
 800369e:	4620      	mov	r0, r4
 80036a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a4:	f000 bac4 	b.w	8003c30 <_fflush_r>
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	bf00      	nop
 80036ac:	2000018c 	.word	0x2000018c
 80036b0:	200001f4 	.word	0x200001f4
 80036b4:	2000025c 	.word	0x2000025c

080036b8 <global_stdio_init.part.0>:
 80036b8:	b510      	push	{r4, lr}
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <global_stdio_init.part.0+0x30>)
 80036bc:	4c0b      	ldr	r4, [pc, #44]	; (80036ec <global_stdio_init.part.0+0x34>)
 80036be:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <global_stdio_init.part.0+0x38>)
 80036c0:	4620      	mov	r0, r4
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	2104      	movs	r1, #4
 80036c6:	2200      	movs	r2, #0
 80036c8:	f7ff ff94 	bl	80035f4 <std>
 80036cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036d0:	2201      	movs	r2, #1
 80036d2:	2109      	movs	r1, #9
 80036d4:	f7ff ff8e 	bl	80035f4 <std>
 80036d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80036dc:	2202      	movs	r2, #2
 80036de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e2:	2112      	movs	r1, #18
 80036e4:	f7ff bf86 	b.w	80035f4 <std>
 80036e8:	200002c4 	.word	0x200002c4
 80036ec:	2000018c 	.word	0x2000018c
 80036f0:	08003661 	.word	0x08003661

080036f4 <__sfp_lock_acquire>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__sfp_lock_acquire+0x8>)
 80036f6:	f000 b8fc 	b.w	80038f2 <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	200002cd 	.word	0x200002cd

08003700 <__sfp_lock_release>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__sfp_lock_release+0x8>)
 8003702:	f000 b8f7 	b.w	80038f4 <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	200002cd 	.word	0x200002cd

0800370c <__sinit>:
 800370c:	b510      	push	{r4, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	f7ff fff0 	bl	80036f4 <__sfp_lock_acquire>
 8003714:	6a23      	ldr	r3, [r4, #32]
 8003716:	b11b      	cbz	r3, 8003720 <__sinit+0x14>
 8003718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800371c:	f7ff bff0 	b.w	8003700 <__sfp_lock_release>
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__sinit+0x28>)
 8003722:	6223      	str	r3, [r4, #32]
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <__sinit+0x2c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f5      	bne.n	8003718 <__sinit+0xc>
 800372c:	f7ff ffc4 	bl	80036b8 <global_stdio_init.part.0>
 8003730:	e7f2      	b.n	8003718 <__sinit+0xc>
 8003732:	bf00      	nop
 8003734:	08003679 	.word	0x08003679
 8003738:	200002c4 	.word	0x200002c4

0800373c <_fwalk_sglue>:
 800373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003740:	4607      	mov	r7, r0
 8003742:	4688      	mov	r8, r1
 8003744:	4614      	mov	r4, r2
 8003746:	2600      	movs	r6, #0
 8003748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800374c:	f1b9 0901 	subs.w	r9, r9, #1
 8003750:	d505      	bpl.n	800375e <_fwalk_sglue+0x22>
 8003752:	6824      	ldr	r4, [r4, #0]
 8003754:	2c00      	cmp	r4, #0
 8003756:	d1f7      	bne.n	8003748 <_fwalk_sglue+0xc>
 8003758:	4630      	mov	r0, r6
 800375a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800375e:	89ab      	ldrh	r3, [r5, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d907      	bls.n	8003774 <_fwalk_sglue+0x38>
 8003764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003768:	3301      	adds	r3, #1
 800376a:	d003      	beq.n	8003774 <_fwalk_sglue+0x38>
 800376c:	4629      	mov	r1, r5
 800376e:	4638      	mov	r0, r7
 8003770:	47c0      	blx	r8
 8003772:	4306      	orrs	r6, r0
 8003774:	3568      	adds	r5, #104	; 0x68
 8003776:	e7e9      	b.n	800374c <_fwalk_sglue+0x10>

08003778 <__sread>:
 8003778:	b510      	push	{r4, lr}
 800377a:	460c      	mov	r4, r1
 800377c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003780:	f000 f868 	bl	8003854 <_read_r>
 8003784:	2800      	cmp	r0, #0
 8003786:	bfab      	itete	ge
 8003788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800378a:	89a3      	ldrhlt	r3, [r4, #12]
 800378c:	181b      	addge	r3, r3, r0
 800378e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003792:	bfac      	ite	ge
 8003794:	6563      	strge	r3, [r4, #84]	; 0x54
 8003796:	81a3      	strhlt	r3, [r4, #12]
 8003798:	bd10      	pop	{r4, pc}

0800379a <__swrite>:
 800379a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379e:	461f      	mov	r7, r3
 80037a0:	898b      	ldrh	r3, [r1, #12]
 80037a2:	4605      	mov	r5, r0
 80037a4:	05db      	lsls	r3, r3, #23
 80037a6:	460c      	mov	r4, r1
 80037a8:	4616      	mov	r6, r2
 80037aa:	d505      	bpl.n	80037b8 <__swrite+0x1e>
 80037ac:	2302      	movs	r3, #2
 80037ae:	2200      	movs	r2, #0
 80037b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b4:	f000 f83c 	bl	8003830 <_lseek_r>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	4632      	mov	r2, r6
 80037bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c0:	81a3      	strh	r3, [r4, #12]
 80037c2:	4628      	mov	r0, r5
 80037c4:	463b      	mov	r3, r7
 80037c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ce:	f000 b853 	b.w	8003878 <_write_r>

080037d2 <__sseek>:
 80037d2:	b510      	push	{r4, lr}
 80037d4:	460c      	mov	r4, r1
 80037d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037da:	f000 f829 	bl	8003830 <_lseek_r>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	bf15      	itete	ne
 80037e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80037e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037ee:	81a3      	strheq	r3, [r4, #12]
 80037f0:	bf18      	it	ne
 80037f2:	81a3      	strhne	r3, [r4, #12]
 80037f4:	bd10      	pop	{r4, pc}

080037f6 <__sclose>:
 80037f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037fa:	f000 b809 	b.w	8003810 <_close_r>

080037fe <memset>:
 80037fe:	4603      	mov	r3, r0
 8003800:	4402      	add	r2, r0
 8003802:	4293      	cmp	r3, r2
 8003804:	d100      	bne.n	8003808 <memset+0xa>
 8003806:	4770      	bx	lr
 8003808:	f803 1b01 	strb.w	r1, [r3], #1
 800380c:	e7f9      	b.n	8003802 <memset+0x4>
	...

08003810 <_close_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	2300      	movs	r3, #0
 8003814:	4d05      	ldr	r5, [pc, #20]	; (800382c <_close_r+0x1c>)
 8003816:	4604      	mov	r4, r0
 8003818:	4608      	mov	r0, r1
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	f7fd fda0 	bl	8001360 <_close>
 8003820:	1c43      	adds	r3, r0, #1
 8003822:	d102      	bne.n	800382a <_close_r+0x1a>
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	b103      	cbz	r3, 800382a <_close_r+0x1a>
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	200002c8 	.word	0x200002c8

08003830 <_lseek_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4604      	mov	r4, r0
 8003834:	4608      	mov	r0, r1
 8003836:	4611      	mov	r1, r2
 8003838:	2200      	movs	r2, #0
 800383a:	4d05      	ldr	r5, [pc, #20]	; (8003850 <_lseek_r+0x20>)
 800383c:	602a      	str	r2, [r5, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f7fd fdb2 	bl	80013a8 <_lseek>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_lseek_r+0x1e>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_lseek_r+0x1e>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	200002c8 	.word	0x200002c8

08003854 <_read_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	2200      	movs	r2, #0
 800385e:	4d05      	ldr	r5, [pc, #20]	; (8003874 <_read_r+0x20>)
 8003860:	602a      	str	r2, [r5, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	f7fd fd43 	bl	80012ee <_read>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_read_r+0x1e>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_read_r+0x1e>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	200002c8 	.word	0x200002c8

08003878 <_write_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	4611      	mov	r1, r2
 8003880:	2200      	movs	r2, #0
 8003882:	4d05      	ldr	r5, [pc, #20]	; (8003898 <_write_r+0x20>)
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	f7fd fd4e 	bl	8001328 <_write>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_write_r+0x1e>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_write_r+0x1e>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	200002c8 	.word	0x200002c8

0800389c <__errno>:
 800389c:	4b01      	ldr	r3, [pc, #4]	; (80038a4 <__errno+0x8>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	200000b8 	.word	0x200000b8

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	2600      	movs	r6, #0
 80038ac:	4d0c      	ldr	r5, [pc, #48]	; (80038e0 <__libc_init_array+0x38>)
 80038ae:	4c0d      	ldr	r4, [pc, #52]	; (80038e4 <__libc_init_array+0x3c>)
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	f000 fe4c 	bl	8004554 <_init>
 80038bc:	2600      	movs	r6, #0
 80038be:	4d0a      	ldr	r5, [pc, #40]	; (80038e8 <__libc_init_array+0x40>)
 80038c0:	4c0a      	ldr	r4, [pc, #40]	; (80038ec <__libc_init_array+0x44>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	0800467c 	.word	0x0800467c
 80038e4:	0800467c 	.word	0x0800467c
 80038e8:	0800467c 	.word	0x0800467c
 80038ec:	08004680 	.word	0x08004680

080038f0 <__retarget_lock_init_recursive>:
 80038f0:	4770      	bx	lr

080038f2 <__retarget_lock_acquire_recursive>:
 80038f2:	4770      	bx	lr

080038f4 <__retarget_lock_release_recursive>:
 80038f4:	4770      	bx	lr
	...

080038f8 <__assert_func>:
 80038f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038fa:	4614      	mov	r4, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <__assert_func+0x2c>)
 8003900:	4605      	mov	r5, r0
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68d8      	ldr	r0, [r3, #12]
 8003906:	b14c      	cbz	r4, 800391c <__assert_func+0x24>
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <__assert_func+0x30>)
 800390a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800390e:	9100      	str	r1, [sp, #0]
 8003910:	462b      	mov	r3, r5
 8003912:	4906      	ldr	r1, [pc, #24]	; (800392c <__assert_func+0x34>)
 8003914:	f000 f9b4 	bl	8003c80 <fiprintf>
 8003918:	f000 f9d4 	bl	8003cc4 <abort>
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__assert_func+0x38>)
 800391e:	461c      	mov	r4, r3
 8003920:	e7f3      	b.n	800390a <__assert_func+0x12>
 8003922:	bf00      	nop
 8003924:	200000b8 	.word	0x200000b8
 8003928:	08004603 	.word	0x08004603
 800392c:	08004610 	.word	0x08004610
 8003930:	0800463e 	.word	0x0800463e

08003934 <_free_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4605      	mov	r5, r0
 8003938:	2900      	cmp	r1, #0
 800393a:	d040      	beq.n	80039be <_free_r+0x8a>
 800393c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003940:	1f0c      	subs	r4, r1, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfb8      	it	lt
 8003946:	18e4      	addlt	r4, r4, r3
 8003948:	f000 f8e4 	bl	8003b14 <__malloc_lock>
 800394c:	4a1c      	ldr	r2, [pc, #112]	; (80039c0 <_free_r+0x8c>)
 800394e:	6813      	ldr	r3, [r2, #0]
 8003950:	b933      	cbnz	r3, 8003960 <_free_r+0x2c>
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	6014      	str	r4, [r2, #0]
 8003956:	4628      	mov	r0, r5
 8003958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800395c:	f000 b8e0 	b.w	8003b20 <__malloc_unlock>
 8003960:	42a3      	cmp	r3, r4
 8003962:	d908      	bls.n	8003976 <_free_r+0x42>
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	1821      	adds	r1, r4, r0
 8003968:	428b      	cmp	r3, r1
 800396a:	bf01      	itttt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	1809      	addeq	r1, r1, r0
 8003972:	6021      	streq	r1, [r4, #0]
 8003974:	e7ed      	b.n	8003952 <_free_r+0x1e>
 8003976:	461a      	mov	r2, r3
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b10b      	cbz	r3, 8003980 <_free_r+0x4c>
 800397c:	42a3      	cmp	r3, r4
 800397e:	d9fa      	bls.n	8003976 <_free_r+0x42>
 8003980:	6811      	ldr	r1, [r2, #0]
 8003982:	1850      	adds	r0, r2, r1
 8003984:	42a0      	cmp	r0, r4
 8003986:	d10b      	bne.n	80039a0 <_free_r+0x6c>
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	4401      	add	r1, r0
 800398c:	1850      	adds	r0, r2, r1
 800398e:	4283      	cmp	r3, r0
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	d1e0      	bne.n	8003956 <_free_r+0x22>
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4408      	add	r0, r1
 800399a:	6010      	str	r0, [r2, #0]
 800399c:	6053      	str	r3, [r2, #4]
 800399e:	e7da      	b.n	8003956 <_free_r+0x22>
 80039a0:	d902      	bls.n	80039a8 <_free_r+0x74>
 80039a2:	230c      	movs	r3, #12
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	e7d6      	b.n	8003956 <_free_r+0x22>
 80039a8:	6820      	ldr	r0, [r4, #0]
 80039aa:	1821      	adds	r1, r4, r0
 80039ac:	428b      	cmp	r3, r1
 80039ae:	bf01      	itttt	eq
 80039b0:	6819      	ldreq	r1, [r3, #0]
 80039b2:	685b      	ldreq	r3, [r3, #4]
 80039b4:	1809      	addeq	r1, r1, r0
 80039b6:	6021      	streq	r1, [r4, #0]
 80039b8:	6063      	str	r3, [r4, #4]
 80039ba:	6054      	str	r4, [r2, #4]
 80039bc:	e7cb      	b.n	8003956 <_free_r+0x22>
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	200002d0 	.word	0x200002d0

080039c4 <malloc>:
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <malloc+0xc>)
 80039c6:	4601      	mov	r1, r0
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f000 b823 	b.w	8003a14 <_malloc_r>
 80039ce:	bf00      	nop
 80039d0:	200000b8 	.word	0x200000b8

080039d4 <sbrk_aligned>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4e0e      	ldr	r6, [pc, #56]	; (8003a10 <sbrk_aligned+0x3c>)
 80039d8:	460c      	mov	r4, r1
 80039da:	6831      	ldr	r1, [r6, #0]
 80039dc:	4605      	mov	r5, r0
 80039de:	b911      	cbnz	r1, 80039e6 <sbrk_aligned+0x12>
 80039e0:	f000 f960 	bl	8003ca4 <_sbrk_r>
 80039e4:	6030      	str	r0, [r6, #0]
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f95b 	bl	8003ca4 <_sbrk_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d00a      	beq.n	8003a08 <sbrk_aligned+0x34>
 80039f2:	1cc4      	adds	r4, r0, #3
 80039f4:	f024 0403 	bic.w	r4, r4, #3
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d007      	beq.n	8003a0c <sbrk_aligned+0x38>
 80039fc:	1a21      	subs	r1, r4, r0
 80039fe:	4628      	mov	r0, r5
 8003a00:	f000 f950 	bl	8003ca4 <_sbrk_r>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d101      	bne.n	8003a0c <sbrk_aligned+0x38>
 8003a08:	f04f 34ff 	mov.w	r4, #4294967295
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	200002d4 	.word	0x200002d4

08003a14 <_malloc_r>:
 8003a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a18:	1ccd      	adds	r5, r1, #3
 8003a1a:	f025 0503 	bic.w	r5, r5, #3
 8003a1e:	3508      	adds	r5, #8
 8003a20:	2d0c      	cmp	r5, #12
 8003a22:	bf38      	it	cc
 8003a24:	250c      	movcc	r5, #12
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	4607      	mov	r7, r0
 8003a2a:	db01      	blt.n	8003a30 <_malloc_r+0x1c>
 8003a2c:	42a9      	cmp	r1, r5
 8003a2e:	d905      	bls.n	8003a3c <_malloc_r+0x28>
 8003a30:	230c      	movs	r3, #12
 8003a32:	2600      	movs	r6, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4630      	mov	r0, r6
 8003a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b10 <_malloc_r+0xfc>
 8003a40:	f000 f868 	bl	8003b14 <__malloc_lock>
 8003a44:	f8d8 3000 	ldr.w	r3, [r8]
 8003a48:	461c      	mov	r4, r3
 8003a4a:	bb5c      	cbnz	r4, 8003aa4 <_malloc_r+0x90>
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f7ff ffc0 	bl	80039d4 <sbrk_aligned>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	4604      	mov	r4, r0
 8003a58:	d155      	bne.n	8003b06 <_malloc_r+0xf2>
 8003a5a:	f8d8 4000 	ldr.w	r4, [r8]
 8003a5e:	4626      	mov	r6, r4
 8003a60:	2e00      	cmp	r6, #0
 8003a62:	d145      	bne.n	8003af0 <_malloc_r+0xdc>
 8003a64:	2c00      	cmp	r4, #0
 8003a66:	d048      	beq.n	8003afa <_malloc_r+0xe6>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	eb04 0903 	add.w	r9, r4, r3
 8003a72:	f000 f917 	bl	8003ca4 <_sbrk_r>
 8003a76:	4581      	cmp	r9, r0
 8003a78:	d13f      	bne.n	8003afa <_malloc_r+0xe6>
 8003a7a:	6821      	ldr	r1, [r4, #0]
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	1a6d      	subs	r5, r5, r1
 8003a80:	4629      	mov	r1, r5
 8003a82:	f7ff ffa7 	bl	80039d4 <sbrk_aligned>
 8003a86:	3001      	adds	r0, #1
 8003a88:	d037      	beq.n	8003afa <_malloc_r+0xe6>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	442b      	add	r3, r5
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	f8d8 3000 	ldr.w	r3, [r8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d038      	beq.n	8003b0a <_malloc_r+0xf6>
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	42a2      	cmp	r2, r4
 8003a9c:	d12b      	bne.n	8003af6 <_malloc_r+0xe2>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e00f      	b.n	8003ac4 <_malloc_r+0xb0>
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	1b52      	subs	r2, r2, r5
 8003aa8:	d41f      	bmi.n	8003aea <_malloc_r+0xd6>
 8003aaa:	2a0b      	cmp	r2, #11
 8003aac:	d917      	bls.n	8003ade <_malloc_r+0xca>
 8003aae:	1961      	adds	r1, r4, r5
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	6025      	str	r5, [r4, #0]
 8003ab4:	bf18      	it	ne
 8003ab6:	6059      	strne	r1, [r3, #4]
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	bf08      	it	eq
 8003abc:	f8c8 1000 	streq.w	r1, [r8]
 8003ac0:	5162      	str	r2, [r4, r5]
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	f104 060b 	add.w	r6, r4, #11
 8003aca:	f000 f829 	bl	8003b20 <__malloc_unlock>
 8003ace:	f026 0607 	bic.w	r6, r6, #7
 8003ad2:	1d23      	adds	r3, r4, #4
 8003ad4:	1af2      	subs	r2, r6, r3
 8003ad6:	d0ae      	beq.n	8003a36 <_malloc_r+0x22>
 8003ad8:	1b9b      	subs	r3, r3, r6
 8003ada:	50a3      	str	r3, [r4, r2]
 8003adc:	e7ab      	b.n	8003a36 <_malloc_r+0x22>
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	6862      	ldr	r2, [r4, #4]
 8003ae2:	d1dd      	bne.n	8003aa0 <_malloc_r+0x8c>
 8003ae4:	f8c8 2000 	str.w	r2, [r8]
 8003ae8:	e7ec      	b.n	8003ac4 <_malloc_r+0xb0>
 8003aea:	4623      	mov	r3, r4
 8003aec:	6864      	ldr	r4, [r4, #4]
 8003aee:	e7ac      	b.n	8003a4a <_malloc_r+0x36>
 8003af0:	4634      	mov	r4, r6
 8003af2:	6876      	ldr	r6, [r6, #4]
 8003af4:	e7b4      	b.n	8003a60 <_malloc_r+0x4c>
 8003af6:	4613      	mov	r3, r2
 8003af8:	e7cc      	b.n	8003a94 <_malloc_r+0x80>
 8003afa:	230c      	movs	r3, #12
 8003afc:	4638      	mov	r0, r7
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	f000 f80e 	bl	8003b20 <__malloc_unlock>
 8003b04:	e797      	b.n	8003a36 <_malloc_r+0x22>
 8003b06:	6025      	str	r5, [r4, #0]
 8003b08:	e7dc      	b.n	8003ac4 <_malloc_r+0xb0>
 8003b0a:	605b      	str	r3, [r3, #4]
 8003b0c:	deff      	udf	#255	; 0xff
 8003b0e:	bf00      	nop
 8003b10:	200002d0 	.word	0x200002d0

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_lock+0x8>)
 8003b16:	f7ff beec 	b.w	80038f2 <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	200002cc 	.word	0x200002cc

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f7ff bee7 	b.w	80038f4 <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	200002cc 	.word	0x200002cc

08003b2c <__sflush_r>:
 8003b2c:	898a      	ldrh	r2, [r1, #12]
 8003b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b30:	4605      	mov	r5, r0
 8003b32:	0710      	lsls	r0, r2, #28
 8003b34:	460c      	mov	r4, r1
 8003b36:	d457      	bmi.n	8003be8 <__sflush_r+0xbc>
 8003b38:	684b      	ldr	r3, [r1, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	dc04      	bgt.n	8003b48 <__sflush_r+0x1c>
 8003b3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	dc01      	bgt.n	8003b48 <__sflush_r+0x1c>
 8003b44:	2000      	movs	r0, #0
 8003b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b4a:	2e00      	cmp	r6, #0
 8003b4c:	d0fa      	beq.n	8003b44 <__sflush_r+0x18>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b54:	682f      	ldr	r7, [r5, #0]
 8003b56:	6a21      	ldr	r1, [r4, #32]
 8003b58:	602b      	str	r3, [r5, #0]
 8003b5a:	d032      	beq.n	8003bc2 <__sflush_r+0x96>
 8003b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	075a      	lsls	r2, r3, #29
 8003b62:	d505      	bpl.n	8003b70 <__sflush_r+0x44>
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	1ac0      	subs	r0, r0, r3
 8003b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b6a:	b10b      	cbz	r3, 8003b70 <__sflush_r+0x44>
 8003b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b6e:	1ac0      	subs	r0, r0, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	4602      	mov	r2, r0
 8003b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b76:	4628      	mov	r0, r5
 8003b78:	6a21      	ldr	r1, [r4, #32]
 8003b7a:	47b0      	blx	r6
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	d106      	bne.n	8003b90 <__sflush_r+0x64>
 8003b82:	6829      	ldr	r1, [r5, #0]
 8003b84:	291d      	cmp	r1, #29
 8003b86:	d82b      	bhi.n	8003be0 <__sflush_r+0xb4>
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <__sflush_r+0x100>)
 8003b8a:	410a      	asrs	r2, r1
 8003b8c:	07d6      	lsls	r6, r2, #31
 8003b8e:	d427      	bmi.n	8003be0 <__sflush_r+0xb4>
 8003b90:	2200      	movs	r2, #0
 8003b92:	6062      	str	r2, [r4, #4]
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	04d9      	lsls	r1, r3, #19
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	d504      	bpl.n	8003ba6 <__sflush_r+0x7a>
 8003b9c:	1c42      	adds	r2, r0, #1
 8003b9e:	d101      	bne.n	8003ba4 <__sflush_r+0x78>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	b903      	cbnz	r3, 8003ba6 <__sflush_r+0x7a>
 8003ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8003ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ba8:	602f      	str	r7, [r5, #0]
 8003baa:	2900      	cmp	r1, #0
 8003bac:	d0ca      	beq.n	8003b44 <__sflush_r+0x18>
 8003bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bb2:	4299      	cmp	r1, r3
 8003bb4:	d002      	beq.n	8003bbc <__sflush_r+0x90>
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7ff febc 	bl	8003934 <_free_r>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8003bc0:	e7c1      	b.n	8003b46 <__sflush_r+0x1a>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	47b0      	blx	r6
 8003bc8:	1c41      	adds	r1, r0, #1
 8003bca:	d1c8      	bne.n	8003b5e <__sflush_r+0x32>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0c5      	beq.n	8003b5e <__sflush_r+0x32>
 8003bd2:	2b1d      	cmp	r3, #29
 8003bd4:	d001      	beq.n	8003bda <__sflush_r+0xae>
 8003bd6:	2b16      	cmp	r3, #22
 8003bd8:	d101      	bne.n	8003bde <__sflush_r+0xb2>
 8003bda:	602f      	str	r7, [r5, #0]
 8003bdc:	e7b2      	b.n	8003b44 <__sflush_r+0x18>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	e7ae      	b.n	8003b46 <__sflush_r+0x1a>
 8003be8:	690f      	ldr	r7, [r1, #16]
 8003bea:	2f00      	cmp	r7, #0
 8003bec:	d0aa      	beq.n	8003b44 <__sflush_r+0x18>
 8003bee:	0793      	lsls	r3, r2, #30
 8003bf0:	bf18      	it	ne
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	680e      	ldr	r6, [r1, #0]
 8003bf6:	bf08      	it	eq
 8003bf8:	694b      	ldreq	r3, [r1, #20]
 8003bfa:	1bf6      	subs	r6, r6, r7
 8003bfc:	600f      	str	r7, [r1, #0]
 8003bfe:	608b      	str	r3, [r1, #8]
 8003c00:	2e00      	cmp	r6, #0
 8003c02:	dd9f      	ble.n	8003b44 <__sflush_r+0x18>
 8003c04:	4633      	mov	r3, r6
 8003c06:	463a      	mov	r2, r7
 8003c08:	4628      	mov	r0, r5
 8003c0a:	6a21      	ldr	r1, [r4, #32]
 8003c0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c10:	47e0      	blx	ip
 8003c12:	2800      	cmp	r0, #0
 8003c14:	dc06      	bgt.n	8003c24 <__sflush_r+0xf8>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	e790      	b.n	8003b46 <__sflush_r+0x1a>
 8003c24:	4407      	add	r7, r0
 8003c26:	1a36      	subs	r6, r6, r0
 8003c28:	e7ea      	b.n	8003c00 <__sflush_r+0xd4>
 8003c2a:	bf00      	nop
 8003c2c:	dfbffffe 	.word	0xdfbffffe

08003c30 <_fflush_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	690b      	ldr	r3, [r1, #16]
 8003c34:	4605      	mov	r5, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	b913      	cbnz	r3, 8003c40 <_fflush_r+0x10>
 8003c3a:	2500      	movs	r5, #0
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	b118      	cbz	r0, 8003c4a <_fflush_r+0x1a>
 8003c42:	6a03      	ldr	r3, [r0, #32]
 8003c44:	b90b      	cbnz	r3, 8003c4a <_fflush_r+0x1a>
 8003c46:	f7ff fd61 	bl	800370c <__sinit>
 8003c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f3      	beq.n	8003c3a <_fflush_r+0xa>
 8003c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c54:	07d0      	lsls	r0, r2, #31
 8003c56:	d404      	bmi.n	8003c62 <_fflush_r+0x32>
 8003c58:	0599      	lsls	r1, r3, #22
 8003c5a:	d402      	bmi.n	8003c62 <_fflush_r+0x32>
 8003c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c5e:	f7ff fe48 	bl	80038f2 <__retarget_lock_acquire_recursive>
 8003c62:	4628      	mov	r0, r5
 8003c64:	4621      	mov	r1, r4
 8003c66:	f7ff ff61 	bl	8003b2c <__sflush_r>
 8003c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	07da      	lsls	r2, r3, #31
 8003c70:	d4e4      	bmi.n	8003c3c <_fflush_r+0xc>
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	059b      	lsls	r3, r3, #22
 8003c76:	d4e1      	bmi.n	8003c3c <_fflush_r+0xc>
 8003c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c7a:	f7ff fe3b 	bl	80038f4 <__retarget_lock_release_recursive>
 8003c7e:	e7dd      	b.n	8003c3c <_fflush_r+0xc>

08003c80 <fiprintf>:
 8003c80:	b40e      	push	{r1, r2, r3}
 8003c82:	b503      	push	{r0, r1, lr}
 8003c84:	4601      	mov	r1, r0
 8003c86:	ab03      	add	r3, sp, #12
 8003c88:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <fiprintf+0x20>)
 8003c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c8e:	6800      	ldr	r0, [r0, #0]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	f000 f845 	bl	8003d20 <_vfiprintf_r>
 8003c96:	b002      	add	sp, #8
 8003c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c9c:	b003      	add	sp, #12
 8003c9e:	4770      	bx	lr
 8003ca0:	200000b8 	.word	0x200000b8

08003ca4 <_sbrk_r>:
 8003ca4:	b538      	push	{r3, r4, r5, lr}
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4d05      	ldr	r5, [pc, #20]	; (8003cc0 <_sbrk_r+0x1c>)
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	f7fd fb86 	bl	80013c0 <_sbrk>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_sbrk_r+0x1a>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_sbrk_r+0x1a>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200002c8 	.word	0x200002c8

08003cc4 <abort>:
 8003cc4:	2006      	movs	r0, #6
 8003cc6:	b508      	push	{r3, lr}
 8003cc8:	f000 fb96 	bl	80043f8 <raise>
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f7fd fb04 	bl	80012da <_exit>

08003cd2 <__sfputc_r>:
 8003cd2:	6893      	ldr	r3, [r2, #8]
 8003cd4:	b410      	push	{r4}
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	da07      	bge.n	8003cee <__sfputc_r+0x1c>
 8003cde:	6994      	ldr	r4, [r2, #24]
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	db01      	blt.n	8003ce8 <__sfputc_r+0x16>
 8003ce4:	290a      	cmp	r1, #10
 8003ce6:	d102      	bne.n	8003cee <__sfputc_r+0x1c>
 8003ce8:	bc10      	pop	{r4}
 8003cea:	f000 bac7 	b.w	800427c <__swbuf_r>
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	1c58      	adds	r0, r3, #1
 8003cf2:	6010      	str	r0, [r2, #0]
 8003cf4:	7019      	strb	r1, [r3, #0]
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	bc10      	pop	{r4}
 8003cfa:	4770      	bx	lr

08003cfc <__sfputs_r>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	4606      	mov	r6, r0
 8003d00:	460f      	mov	r7, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	18d5      	adds	r5, r2, r3
 8003d06:	42ac      	cmp	r4, r5
 8003d08:	d101      	bne.n	8003d0e <__sfputs_r+0x12>
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	e007      	b.n	8003d1e <__sfputs_r+0x22>
 8003d0e:	463a      	mov	r2, r7
 8003d10:	4630      	mov	r0, r6
 8003d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d16:	f7ff ffdc 	bl	8003cd2 <__sfputc_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	d1f3      	bne.n	8003d06 <__sfputs_r+0xa>
 8003d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d20 <_vfiprintf_r>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	460d      	mov	r5, r1
 8003d26:	4614      	mov	r4, r2
 8003d28:	4698      	mov	r8, r3
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	b09d      	sub	sp, #116	; 0x74
 8003d2e:	b118      	cbz	r0, 8003d38 <_vfiprintf_r+0x18>
 8003d30:	6a03      	ldr	r3, [r0, #32]
 8003d32:	b90b      	cbnz	r3, 8003d38 <_vfiprintf_r+0x18>
 8003d34:	f7ff fcea 	bl	800370c <__sinit>
 8003d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d3a:	07d9      	lsls	r1, r3, #31
 8003d3c:	d405      	bmi.n	8003d4a <_vfiprintf_r+0x2a>
 8003d3e:	89ab      	ldrh	r3, [r5, #12]
 8003d40:	059a      	lsls	r2, r3, #22
 8003d42:	d402      	bmi.n	8003d4a <_vfiprintf_r+0x2a>
 8003d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d46:	f7ff fdd4 	bl	80038f2 <__retarget_lock_acquire_recursive>
 8003d4a:	89ab      	ldrh	r3, [r5, #12]
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	d501      	bpl.n	8003d54 <_vfiprintf_r+0x34>
 8003d50:	692b      	ldr	r3, [r5, #16]
 8003d52:	b99b      	cbnz	r3, 8003d7c <_vfiprintf_r+0x5c>
 8003d54:	4629      	mov	r1, r5
 8003d56:	4630      	mov	r0, r6
 8003d58:	f000 face 	bl	80042f8 <__swsetup_r>
 8003d5c:	b170      	cbz	r0, 8003d7c <_vfiprintf_r+0x5c>
 8003d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d60:	07dc      	lsls	r4, r3, #31
 8003d62:	d504      	bpl.n	8003d6e <_vfiprintf_r+0x4e>
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	b01d      	add	sp, #116	; 0x74
 8003d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	0598      	lsls	r0, r3, #22
 8003d72:	d4f7      	bmi.n	8003d64 <_vfiprintf_r+0x44>
 8003d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d76:	f7ff fdbd 	bl	80038f4 <__retarget_lock_release_recursive>
 8003d7a:	e7f3      	b.n	8003d64 <_vfiprintf_r+0x44>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	2320      	movs	r3, #32
 8003d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d86:	2330      	movs	r3, #48	; 0x30
 8003d88:	f04f 0901 	mov.w	r9, #1
 8003d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d90:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003f40 <_vfiprintf_r+0x220>
 8003d94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d98:	4623      	mov	r3, r4
 8003d9a:	469a      	mov	sl, r3
 8003d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da0:	b10a      	cbz	r2, 8003da6 <_vfiprintf_r+0x86>
 8003da2:	2a25      	cmp	r2, #37	; 0x25
 8003da4:	d1f9      	bne.n	8003d9a <_vfiprintf_r+0x7a>
 8003da6:	ebba 0b04 	subs.w	fp, sl, r4
 8003daa:	d00b      	beq.n	8003dc4 <_vfiprintf_r+0xa4>
 8003dac:	465b      	mov	r3, fp
 8003dae:	4622      	mov	r2, r4
 8003db0:	4629      	mov	r1, r5
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7ff ffa2 	bl	8003cfc <__sfputs_r>
 8003db8:	3001      	adds	r0, #1
 8003dba:	f000 80a9 	beq.w	8003f10 <_vfiprintf_r+0x1f0>
 8003dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc0:	445a      	add	r2, fp
 8003dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8003dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a1 	beq.w	8003f10 <_vfiprintf_r+0x1f0>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd8:	f10a 0a01 	add.w	sl, sl, #1
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	9307      	str	r3, [sp, #28]
 8003de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003de4:	931a      	str	r3, [sp, #104]	; 0x68
 8003de6:	4654      	mov	r4, sl
 8003de8:	2205      	movs	r2, #5
 8003dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dee:	4854      	ldr	r0, [pc, #336]	; (8003f40 <_vfiprintf_r+0x220>)
 8003df0:	f000 fb1e 	bl	8004430 <memchr>
 8003df4:	9a04      	ldr	r2, [sp, #16]
 8003df6:	b9d8      	cbnz	r0, 8003e30 <_vfiprintf_r+0x110>
 8003df8:	06d1      	lsls	r1, r2, #27
 8003dfa:	bf44      	itt	mi
 8003dfc:	2320      	movmi	r3, #32
 8003dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e02:	0713      	lsls	r3, r2, #28
 8003e04:	bf44      	itt	mi
 8003e06:	232b      	movmi	r3, #43	; 0x2b
 8003e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e10:	2b2a      	cmp	r3, #42	; 0x2a
 8003e12:	d015      	beq.n	8003e40 <_vfiprintf_r+0x120>
 8003e14:	4654      	mov	r4, sl
 8003e16:	2000      	movs	r0, #0
 8003e18:	f04f 0c0a 	mov.w	ip, #10
 8003e1c:	9a07      	ldr	r2, [sp, #28]
 8003e1e:	4621      	mov	r1, r4
 8003e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e24:	3b30      	subs	r3, #48	; 0x30
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d94d      	bls.n	8003ec6 <_vfiprintf_r+0x1a6>
 8003e2a:	b1b0      	cbz	r0, 8003e5a <_vfiprintf_r+0x13a>
 8003e2c:	9207      	str	r2, [sp, #28]
 8003e2e:	e014      	b.n	8003e5a <_vfiprintf_r+0x13a>
 8003e30:	eba0 0308 	sub.w	r3, r0, r8
 8003e34:	fa09 f303 	lsl.w	r3, r9, r3
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	46a2      	mov	sl, r4
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	e7d2      	b.n	8003de6 <_vfiprintf_r+0xc6>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	1d19      	adds	r1, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9103      	str	r1, [sp, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bfbb      	ittet	lt
 8003e4c:	425b      	neglt	r3, r3
 8003e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e52:	9307      	strge	r3, [sp, #28]
 8003e54:	9307      	strlt	r3, [sp, #28]
 8003e56:	bfb8      	it	lt
 8003e58:	9204      	strlt	r2, [sp, #16]
 8003e5a:	7823      	ldrb	r3, [r4, #0]
 8003e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e5e:	d10c      	bne.n	8003e7a <_vfiprintf_r+0x15a>
 8003e60:	7863      	ldrb	r3, [r4, #1]
 8003e62:	2b2a      	cmp	r3, #42	; 0x2a
 8003e64:	d134      	bne.n	8003ed0 <_vfiprintf_r+0x1b0>
 8003e66:	9b03      	ldr	r3, [sp, #12]
 8003e68:	3402      	adds	r4, #2
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	9203      	str	r2, [sp, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bfb8      	it	lt
 8003e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e78:	9305      	str	r3, [sp, #20]
 8003e7a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f44 <_vfiprintf_r+0x224>
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4650      	mov	r0, sl
 8003e82:	7821      	ldrb	r1, [r4, #0]
 8003e84:	f000 fad4 	bl	8004430 <memchr>
 8003e88:	b138      	cbz	r0, 8003e9a <_vfiprintf_r+0x17a>
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	9b04      	ldr	r3, [sp, #16]
 8003e8e:	eba0 000a 	sub.w	r0, r0, sl
 8003e92:	4082      	lsls	r2, r0
 8003e94:	4313      	orrs	r3, r2
 8003e96:	3401      	adds	r4, #1
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9e:	2206      	movs	r2, #6
 8003ea0:	4829      	ldr	r0, [pc, #164]	; (8003f48 <_vfiprintf_r+0x228>)
 8003ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ea6:	f000 fac3 	bl	8004430 <memchr>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d03f      	beq.n	8003f2e <_vfiprintf_r+0x20e>
 8003eae:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <_vfiprintf_r+0x22c>)
 8003eb0:	bb1b      	cbnz	r3, 8003efa <_vfiprintf_r+0x1da>
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	3308      	adds	r3, #8
 8003ebc:	9303      	str	r3, [sp, #12]
 8003ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec0:	443b      	add	r3, r7
 8003ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec4:	e768      	b.n	8003d98 <_vfiprintf_r+0x78>
 8003ec6:	460c      	mov	r4, r1
 8003ec8:	2001      	movs	r0, #1
 8003eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ece:	e7a6      	b.n	8003e1e <_vfiprintf_r+0xfe>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f04f 0c0a 	mov.w	ip, #10
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	3401      	adds	r4, #1
 8003eda:	9305      	str	r3, [sp, #20]
 8003edc:	4620      	mov	r0, r4
 8003ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee2:	3a30      	subs	r2, #48	; 0x30
 8003ee4:	2a09      	cmp	r2, #9
 8003ee6:	d903      	bls.n	8003ef0 <_vfiprintf_r+0x1d0>
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0c6      	beq.n	8003e7a <_vfiprintf_r+0x15a>
 8003eec:	9105      	str	r1, [sp, #20]
 8003eee:	e7c4      	b.n	8003e7a <_vfiprintf_r+0x15a>
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef8:	e7f0      	b.n	8003edc <_vfiprintf_r+0x1bc>
 8003efa:	ab03      	add	r3, sp, #12
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	462a      	mov	r2, r5
 8003f00:	4630      	mov	r0, r6
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <_vfiprintf_r+0x230>)
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	f3af 8000 	nop.w
 8003f0a:	4607      	mov	r7, r0
 8003f0c:	1c78      	adds	r0, r7, #1
 8003f0e:	d1d6      	bne.n	8003ebe <_vfiprintf_r+0x19e>
 8003f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f12:	07d9      	lsls	r1, r3, #31
 8003f14:	d405      	bmi.n	8003f22 <_vfiprintf_r+0x202>
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	059a      	lsls	r2, r3, #22
 8003f1a:	d402      	bmi.n	8003f22 <_vfiprintf_r+0x202>
 8003f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f1e:	f7ff fce9 	bl	80038f4 <__retarget_lock_release_recursive>
 8003f22:	89ab      	ldrh	r3, [r5, #12]
 8003f24:	065b      	lsls	r3, r3, #25
 8003f26:	f53f af1d 	bmi.w	8003d64 <_vfiprintf_r+0x44>
 8003f2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f2c:	e71c      	b.n	8003d68 <_vfiprintf_r+0x48>
 8003f2e:	ab03      	add	r3, sp, #12
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	462a      	mov	r2, r5
 8003f34:	4630      	mov	r0, r6
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <_vfiprintf_r+0x230>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	f000 f87d 	bl	8004038 <_printf_i>
 8003f3e:	e7e4      	b.n	8003f0a <_vfiprintf_r+0x1ea>
 8003f40:	0800463f 	.word	0x0800463f
 8003f44:	08004645 	.word	0x08004645
 8003f48:	08004649 	.word	0x08004649
 8003f4c:	00000000 	.word	0x00000000
 8003f50:	08003cfd 	.word	0x08003cfd

08003f54 <_printf_common>:
 8003f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f58:	4616      	mov	r6, r2
 8003f5a:	4699      	mov	r9, r3
 8003f5c:	688a      	ldr	r2, [r1, #8]
 8003f5e:	690b      	ldr	r3, [r1, #16]
 8003f60:	4607      	mov	r7, r0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	bfb8      	it	lt
 8003f66:	4613      	movlt	r3, r2
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f6e:	460c      	mov	r4, r1
 8003f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f74:	b10a      	cbz	r2, 8003f7a <_printf_common+0x26>
 8003f76:	3301      	adds	r3, #1
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	0699      	lsls	r1, r3, #26
 8003f7e:	bf42      	ittt	mi
 8003f80:	6833      	ldrmi	r3, [r6, #0]
 8003f82:	3302      	addmi	r3, #2
 8003f84:	6033      	strmi	r3, [r6, #0]
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	f015 0506 	ands.w	r5, r5, #6
 8003f8c:	d106      	bne.n	8003f9c <_printf_common+0x48>
 8003f8e:	f104 0a19 	add.w	sl, r4, #25
 8003f92:	68e3      	ldr	r3, [r4, #12]
 8003f94:	6832      	ldr	r2, [r6, #0]
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	42ab      	cmp	r3, r5
 8003f9a:	dc2b      	bgt.n	8003ff4 <_printf_common+0xa0>
 8003f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fa0:	1e13      	subs	r3, r2, #0
 8003fa2:	6822      	ldr	r2, [r4, #0]
 8003fa4:	bf18      	it	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	0692      	lsls	r2, r2, #26
 8003faa:	d430      	bmi.n	800400e <_printf_common+0xba>
 8003fac:	4649      	mov	r1, r9
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fb4:	47c0      	blx	r8
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d023      	beq.n	8004002 <_printf_common+0xae>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	f003 0306 	and.w	r3, r3, #6
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	bf14      	ite	ne
 8003fc6:	2500      	movne	r5, #0
 8003fc8:	6833      	ldreq	r3, [r6, #0]
 8003fca:	f04f 0600 	mov.w	r6, #0
 8003fce:	bf08      	it	eq
 8003fd0:	68e5      	ldreq	r5, [r4, #12]
 8003fd2:	f104 041a 	add.w	r4, r4, #26
 8003fd6:	bf08      	it	eq
 8003fd8:	1aed      	subeq	r5, r5, r3
 8003fda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fde:	bf08      	it	eq
 8003fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bfc4      	itt	gt
 8003fe8:	1a9b      	subgt	r3, r3, r2
 8003fea:	18ed      	addgt	r5, r5, r3
 8003fec:	42b5      	cmp	r5, r6
 8003fee:	d11a      	bne.n	8004026 <_printf_common+0xd2>
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e008      	b.n	8004006 <_printf_common+0xb2>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	4652      	mov	r2, sl
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	47c0      	blx	r8
 8003ffe:	3001      	adds	r0, #1
 8004000:	d103      	bne.n	800400a <_printf_common+0xb6>
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	3501      	adds	r5, #1
 800400c:	e7c1      	b.n	8003f92 <_printf_common+0x3e>
 800400e:	2030      	movs	r0, #48	; 0x30
 8004010:	18e1      	adds	r1, r4, r3
 8004012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800401c:	4422      	add	r2, r4
 800401e:	3302      	adds	r3, #2
 8004020:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004024:	e7c2      	b.n	8003fac <_printf_common+0x58>
 8004026:	2301      	movs	r3, #1
 8004028:	4622      	mov	r2, r4
 800402a:	4649      	mov	r1, r9
 800402c:	4638      	mov	r0, r7
 800402e:	47c0      	blx	r8
 8004030:	3001      	adds	r0, #1
 8004032:	d0e6      	beq.n	8004002 <_printf_common+0xae>
 8004034:	3601      	adds	r6, #1
 8004036:	e7d9      	b.n	8003fec <_printf_common+0x98>

08004038 <_printf_i>:
 8004038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800403c:	7e0f      	ldrb	r7, [r1, #24]
 800403e:	4691      	mov	r9, r2
 8004040:	2f78      	cmp	r7, #120	; 0x78
 8004042:	4680      	mov	r8, r0
 8004044:	460c      	mov	r4, r1
 8004046:	469a      	mov	sl, r3
 8004048:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800404a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800404e:	d807      	bhi.n	8004060 <_printf_i+0x28>
 8004050:	2f62      	cmp	r7, #98	; 0x62
 8004052:	d80a      	bhi.n	800406a <_printf_i+0x32>
 8004054:	2f00      	cmp	r7, #0
 8004056:	f000 80d5 	beq.w	8004204 <_printf_i+0x1cc>
 800405a:	2f58      	cmp	r7, #88	; 0x58
 800405c:	f000 80c1 	beq.w	80041e2 <_printf_i+0x1aa>
 8004060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004068:	e03a      	b.n	80040e0 <_printf_i+0xa8>
 800406a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800406e:	2b15      	cmp	r3, #21
 8004070:	d8f6      	bhi.n	8004060 <_printf_i+0x28>
 8004072:	a101      	add	r1, pc, #4	; (adr r1, 8004078 <_printf_i+0x40>)
 8004074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040e5 	.word	0x080040e5
 8004080:	08004061 	.word	0x08004061
 8004084:	08004061 	.word	0x08004061
 8004088:	08004061 	.word	0x08004061
 800408c:	08004061 	.word	0x08004061
 8004090:	080040e5 	.word	0x080040e5
 8004094:	08004061 	.word	0x08004061
 8004098:	08004061 	.word	0x08004061
 800409c:	08004061 	.word	0x08004061
 80040a0:	08004061 	.word	0x08004061
 80040a4:	080041eb 	.word	0x080041eb
 80040a8:	08004111 	.word	0x08004111
 80040ac:	080041a5 	.word	0x080041a5
 80040b0:	08004061 	.word	0x08004061
 80040b4:	08004061 	.word	0x08004061
 80040b8:	0800420d 	.word	0x0800420d
 80040bc:	08004061 	.word	0x08004061
 80040c0:	08004111 	.word	0x08004111
 80040c4:	08004061 	.word	0x08004061
 80040c8:	08004061 	.word	0x08004061
 80040cc:	080041ad 	.word	0x080041ad
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	602a      	str	r2, [r5, #0]
 80040d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0a0      	b.n	8004226 <_printf_i+0x1ee>
 80040e4:	6820      	ldr	r0, [r4, #0]
 80040e6:	682b      	ldr	r3, [r5, #0]
 80040e8:	0607      	lsls	r7, r0, #24
 80040ea:	f103 0104 	add.w	r1, r3, #4
 80040ee:	6029      	str	r1, [r5, #0]
 80040f0:	d501      	bpl.n	80040f6 <_printf_i+0xbe>
 80040f2:	681e      	ldr	r6, [r3, #0]
 80040f4:	e003      	b.n	80040fe <_printf_i+0xc6>
 80040f6:	0646      	lsls	r6, r0, #25
 80040f8:	d5fb      	bpl.n	80040f2 <_printf_i+0xba>
 80040fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80040fe:	2e00      	cmp	r6, #0
 8004100:	da03      	bge.n	800410a <_printf_i+0xd2>
 8004102:	232d      	movs	r3, #45	; 0x2d
 8004104:	4276      	negs	r6, r6
 8004106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410a:	230a      	movs	r3, #10
 800410c:	4859      	ldr	r0, [pc, #356]	; (8004274 <_printf_i+0x23c>)
 800410e:	e012      	b.n	8004136 <_printf_i+0xfe>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	1d19      	adds	r1, r3, #4
 8004116:	6029      	str	r1, [r5, #0]
 8004118:	0605      	lsls	r5, r0, #24
 800411a:	d501      	bpl.n	8004120 <_printf_i+0xe8>
 800411c:	681e      	ldr	r6, [r3, #0]
 800411e:	e002      	b.n	8004126 <_printf_i+0xee>
 8004120:	0641      	lsls	r1, r0, #25
 8004122:	d5fb      	bpl.n	800411c <_printf_i+0xe4>
 8004124:	881e      	ldrh	r6, [r3, #0]
 8004126:	2f6f      	cmp	r7, #111	; 0x6f
 8004128:	bf0c      	ite	eq
 800412a:	2308      	moveq	r3, #8
 800412c:	230a      	movne	r3, #10
 800412e:	4851      	ldr	r0, [pc, #324]	; (8004274 <_printf_i+0x23c>)
 8004130:	2100      	movs	r1, #0
 8004132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004136:	6865      	ldr	r5, [r4, #4]
 8004138:	2d00      	cmp	r5, #0
 800413a:	bfa8      	it	ge
 800413c:	6821      	ldrge	r1, [r4, #0]
 800413e:	60a5      	str	r5, [r4, #8]
 8004140:	bfa4      	itt	ge
 8004142:	f021 0104 	bicge.w	r1, r1, #4
 8004146:	6021      	strge	r1, [r4, #0]
 8004148:	b90e      	cbnz	r6, 800414e <_printf_i+0x116>
 800414a:	2d00      	cmp	r5, #0
 800414c:	d04b      	beq.n	80041e6 <_printf_i+0x1ae>
 800414e:	4615      	mov	r5, r2
 8004150:	fbb6 f1f3 	udiv	r1, r6, r3
 8004154:	fb03 6711 	mls	r7, r3, r1, r6
 8004158:	5dc7      	ldrb	r7, [r0, r7]
 800415a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800415e:	4637      	mov	r7, r6
 8004160:	42bb      	cmp	r3, r7
 8004162:	460e      	mov	r6, r1
 8004164:	d9f4      	bls.n	8004150 <_printf_i+0x118>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d10b      	bne.n	8004182 <_printf_i+0x14a>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	07de      	lsls	r6, r3, #31
 800416e:	d508      	bpl.n	8004182 <_printf_i+0x14a>
 8004170:	6923      	ldr	r3, [r4, #16]
 8004172:	6861      	ldr	r1, [r4, #4]
 8004174:	4299      	cmp	r1, r3
 8004176:	bfde      	ittt	le
 8004178:	2330      	movle	r3, #48	; 0x30
 800417a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800417e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004182:	1b52      	subs	r2, r2, r5
 8004184:	6122      	str	r2, [r4, #16]
 8004186:	464b      	mov	r3, r9
 8004188:	4621      	mov	r1, r4
 800418a:	4640      	mov	r0, r8
 800418c:	f8cd a000 	str.w	sl, [sp]
 8004190:	aa03      	add	r2, sp, #12
 8004192:	f7ff fedf 	bl	8003f54 <_printf_common>
 8004196:	3001      	adds	r0, #1
 8004198:	d14a      	bne.n	8004230 <_printf_i+0x1f8>
 800419a:	f04f 30ff 	mov.w	r0, #4294967295
 800419e:	b004      	add	sp, #16
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	f043 0320 	orr.w	r3, r3, #32
 80041aa:	6023      	str	r3, [r4, #0]
 80041ac:	2778      	movs	r7, #120	; 0x78
 80041ae:	4832      	ldr	r0, [pc, #200]	; (8004278 <_printf_i+0x240>)
 80041b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	6829      	ldr	r1, [r5, #0]
 80041b8:	061f      	lsls	r7, r3, #24
 80041ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80041be:	d402      	bmi.n	80041c6 <_printf_i+0x18e>
 80041c0:	065f      	lsls	r7, r3, #25
 80041c2:	bf48      	it	mi
 80041c4:	b2b6      	uxthmi	r6, r6
 80041c6:	07df      	lsls	r7, r3, #31
 80041c8:	bf48      	it	mi
 80041ca:	f043 0320 	orrmi.w	r3, r3, #32
 80041ce:	6029      	str	r1, [r5, #0]
 80041d0:	bf48      	it	mi
 80041d2:	6023      	strmi	r3, [r4, #0]
 80041d4:	b91e      	cbnz	r6, 80041de <_printf_i+0x1a6>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	f023 0320 	bic.w	r3, r3, #32
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	2310      	movs	r3, #16
 80041e0:	e7a6      	b.n	8004130 <_printf_i+0xf8>
 80041e2:	4824      	ldr	r0, [pc, #144]	; (8004274 <_printf_i+0x23c>)
 80041e4:	e7e4      	b.n	80041b0 <_printf_i+0x178>
 80041e6:	4615      	mov	r5, r2
 80041e8:	e7bd      	b.n	8004166 <_printf_i+0x12e>
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	6826      	ldr	r6, [r4, #0]
 80041ee:	1d18      	adds	r0, r3, #4
 80041f0:	6961      	ldr	r1, [r4, #20]
 80041f2:	6028      	str	r0, [r5, #0]
 80041f4:	0635      	lsls	r5, r6, #24
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	d501      	bpl.n	80041fe <_printf_i+0x1c6>
 80041fa:	6019      	str	r1, [r3, #0]
 80041fc:	e002      	b.n	8004204 <_printf_i+0x1cc>
 80041fe:	0670      	lsls	r0, r6, #25
 8004200:	d5fb      	bpl.n	80041fa <_printf_i+0x1c2>
 8004202:	8019      	strh	r1, [r3, #0]
 8004204:	2300      	movs	r3, #0
 8004206:	4615      	mov	r5, r2
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	e7bc      	b.n	8004186 <_printf_i+0x14e>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	2100      	movs	r1, #0
 8004210:	1d1a      	adds	r2, r3, #4
 8004212:	602a      	str	r2, [r5, #0]
 8004214:	681d      	ldr	r5, [r3, #0]
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	4628      	mov	r0, r5
 800421a:	f000 f909 	bl	8004430 <memchr>
 800421e:	b108      	cbz	r0, 8004224 <_printf_i+0x1ec>
 8004220:	1b40      	subs	r0, r0, r5
 8004222:	6060      	str	r0, [r4, #4]
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	6123      	str	r3, [r4, #16]
 8004228:	2300      	movs	r3, #0
 800422a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422e:	e7aa      	b.n	8004186 <_printf_i+0x14e>
 8004230:	462a      	mov	r2, r5
 8004232:	4649      	mov	r1, r9
 8004234:	4640      	mov	r0, r8
 8004236:	6923      	ldr	r3, [r4, #16]
 8004238:	47d0      	blx	sl
 800423a:	3001      	adds	r0, #1
 800423c:	d0ad      	beq.n	800419a <_printf_i+0x162>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	079b      	lsls	r3, r3, #30
 8004242:	d413      	bmi.n	800426c <_printf_i+0x234>
 8004244:	68e0      	ldr	r0, [r4, #12]
 8004246:	9b03      	ldr	r3, [sp, #12]
 8004248:	4298      	cmp	r0, r3
 800424a:	bfb8      	it	lt
 800424c:	4618      	movlt	r0, r3
 800424e:	e7a6      	b.n	800419e <_printf_i+0x166>
 8004250:	2301      	movs	r3, #1
 8004252:	4632      	mov	r2, r6
 8004254:	4649      	mov	r1, r9
 8004256:	4640      	mov	r0, r8
 8004258:	47d0      	blx	sl
 800425a:	3001      	adds	r0, #1
 800425c:	d09d      	beq.n	800419a <_printf_i+0x162>
 800425e:	3501      	adds	r5, #1
 8004260:	68e3      	ldr	r3, [r4, #12]
 8004262:	9903      	ldr	r1, [sp, #12]
 8004264:	1a5b      	subs	r3, r3, r1
 8004266:	42ab      	cmp	r3, r5
 8004268:	dcf2      	bgt.n	8004250 <_printf_i+0x218>
 800426a:	e7eb      	b.n	8004244 <_printf_i+0x20c>
 800426c:	2500      	movs	r5, #0
 800426e:	f104 0619 	add.w	r6, r4, #25
 8004272:	e7f5      	b.n	8004260 <_printf_i+0x228>
 8004274:	08004650 	.word	0x08004650
 8004278:	08004661 	.word	0x08004661

0800427c <__swbuf_r>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	460e      	mov	r6, r1
 8004280:	4614      	mov	r4, r2
 8004282:	4605      	mov	r5, r0
 8004284:	b118      	cbz	r0, 800428e <__swbuf_r+0x12>
 8004286:	6a03      	ldr	r3, [r0, #32]
 8004288:	b90b      	cbnz	r3, 800428e <__swbuf_r+0x12>
 800428a:	f7ff fa3f 	bl	800370c <__sinit>
 800428e:	69a3      	ldr	r3, [r4, #24]
 8004290:	60a3      	str	r3, [r4, #8]
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	071a      	lsls	r2, r3, #28
 8004296:	d525      	bpl.n	80042e4 <__swbuf_r+0x68>
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	b31b      	cbz	r3, 80042e4 <__swbuf_r+0x68>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	6922      	ldr	r2, [r4, #16]
 80042a0:	b2f6      	uxtb	r6, r6
 80042a2:	1a98      	subs	r0, r3, r2
 80042a4:	6963      	ldr	r3, [r4, #20]
 80042a6:	4637      	mov	r7, r6
 80042a8:	4283      	cmp	r3, r0
 80042aa:	dc04      	bgt.n	80042b6 <__swbuf_r+0x3a>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7ff fcbe 	bl	8003c30 <_fflush_r>
 80042b4:	b9e0      	cbnz	r0, 80042f0 <__swbuf_r+0x74>
 80042b6:	68a3      	ldr	r3, [r4, #8]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	60a3      	str	r3, [r4, #8]
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	6022      	str	r2, [r4, #0]
 80042c2:	701e      	strb	r6, [r3, #0]
 80042c4:	6962      	ldr	r2, [r4, #20]
 80042c6:	1c43      	adds	r3, r0, #1
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d004      	beq.n	80042d6 <__swbuf_r+0x5a>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	07db      	lsls	r3, r3, #31
 80042d0:	d506      	bpl.n	80042e0 <__swbuf_r+0x64>
 80042d2:	2e0a      	cmp	r6, #10
 80042d4:	d104      	bne.n	80042e0 <__swbuf_r+0x64>
 80042d6:	4621      	mov	r1, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	f7ff fca9 	bl	8003c30 <_fflush_r>
 80042de:	b938      	cbnz	r0, 80042f0 <__swbuf_r+0x74>
 80042e0:	4638      	mov	r0, r7
 80042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e4:	4621      	mov	r1, r4
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 f806 	bl	80042f8 <__swsetup_r>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d0d5      	beq.n	800429c <__swbuf_r+0x20>
 80042f0:	f04f 37ff 	mov.w	r7, #4294967295
 80042f4:	e7f4      	b.n	80042e0 <__swbuf_r+0x64>
	...

080042f8 <__swsetup_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <__swsetup_r+0xac>)
 80042fc:	4605      	mov	r5, r0
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	460c      	mov	r4, r1
 8004302:	b118      	cbz	r0, 800430c <__swsetup_r+0x14>
 8004304:	6a03      	ldr	r3, [r0, #32]
 8004306:	b90b      	cbnz	r3, 800430c <__swsetup_r+0x14>
 8004308:	f7ff fa00 	bl	800370c <__sinit>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004312:	0718      	lsls	r0, r3, #28
 8004314:	d422      	bmi.n	800435c <__swsetup_r+0x64>
 8004316:	06d9      	lsls	r1, r3, #27
 8004318:	d407      	bmi.n	800432a <__swsetup_r+0x32>
 800431a:	2309      	movs	r3, #9
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	e034      	b.n	8004394 <__swsetup_r+0x9c>
 800432a:	0758      	lsls	r0, r3, #29
 800432c:	d512      	bpl.n	8004354 <__swsetup_r+0x5c>
 800432e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004330:	b141      	cbz	r1, 8004344 <__swsetup_r+0x4c>
 8004332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004336:	4299      	cmp	r1, r3
 8004338:	d002      	beq.n	8004340 <__swsetup_r+0x48>
 800433a:	4628      	mov	r0, r5
 800433c:	f7ff fafa 	bl	8003934 <_free_r>
 8004340:	2300      	movs	r3, #0
 8004342:	6363      	str	r3, [r4, #52]	; 0x34
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	2300      	movs	r3, #0
 800434e:	6063      	str	r3, [r4, #4]
 8004350:	6923      	ldr	r3, [r4, #16]
 8004352:	6023      	str	r3, [r4, #0]
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	6923      	ldr	r3, [r4, #16]
 800435e:	b94b      	cbnz	r3, 8004374 <__swsetup_r+0x7c>
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436a:	d003      	beq.n	8004374 <__swsetup_r+0x7c>
 800436c:	4621      	mov	r1, r4
 800436e:	4628      	mov	r0, r5
 8004370:	f000 f891 	bl	8004496 <__smakebuf_r>
 8004374:	89a0      	ldrh	r0, [r4, #12]
 8004376:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800437a:	f010 0301 	ands.w	r3, r0, #1
 800437e:	d00a      	beq.n	8004396 <__swsetup_r+0x9e>
 8004380:	2300      	movs	r3, #0
 8004382:	60a3      	str	r3, [r4, #8]
 8004384:	6963      	ldr	r3, [r4, #20]
 8004386:	425b      	negs	r3, r3
 8004388:	61a3      	str	r3, [r4, #24]
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	b943      	cbnz	r3, 80043a0 <__swsetup_r+0xa8>
 800438e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004392:	d1c4      	bne.n	800431e <__swsetup_r+0x26>
 8004394:	bd38      	pop	{r3, r4, r5, pc}
 8004396:	0781      	lsls	r1, r0, #30
 8004398:	bf58      	it	pl
 800439a:	6963      	ldrpl	r3, [r4, #20]
 800439c:	60a3      	str	r3, [r4, #8]
 800439e:	e7f4      	b.n	800438a <__swsetup_r+0x92>
 80043a0:	2000      	movs	r0, #0
 80043a2:	e7f7      	b.n	8004394 <__swsetup_r+0x9c>
 80043a4:	200000b8 	.word	0x200000b8

080043a8 <_raise_r>:
 80043a8:	291f      	cmp	r1, #31
 80043aa:	b538      	push	{r3, r4, r5, lr}
 80043ac:	4604      	mov	r4, r0
 80043ae:	460d      	mov	r5, r1
 80043b0:	d904      	bls.n	80043bc <_raise_r+0x14>
 80043b2:	2316      	movs	r3, #22
 80043b4:	6003      	str	r3, [r0, #0]
 80043b6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80043be:	b112      	cbz	r2, 80043c6 <_raise_r+0x1e>
 80043c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80043c4:	b94b      	cbnz	r3, 80043da <_raise_r+0x32>
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 f830 	bl	800442c <_getpid_r>
 80043cc:	462a      	mov	r2, r5
 80043ce:	4601      	mov	r1, r0
 80043d0:	4620      	mov	r0, r4
 80043d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043d6:	f000 b817 	b.w	8004408 <_kill_r>
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d00a      	beq.n	80043f4 <_raise_r+0x4c>
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	d103      	bne.n	80043ea <_raise_r+0x42>
 80043e2:	2316      	movs	r3, #22
 80043e4:	6003      	str	r3, [r0, #0]
 80043e6:	2001      	movs	r0, #1
 80043e8:	e7e7      	b.n	80043ba <_raise_r+0x12>
 80043ea:	2400      	movs	r4, #0
 80043ec:	4628      	mov	r0, r5
 80043ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80043f2:	4798      	blx	r3
 80043f4:	2000      	movs	r0, #0
 80043f6:	e7e0      	b.n	80043ba <_raise_r+0x12>

080043f8 <raise>:
 80043f8:	4b02      	ldr	r3, [pc, #8]	; (8004404 <raise+0xc>)
 80043fa:	4601      	mov	r1, r0
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f7ff bfd3 	b.w	80043a8 <_raise_r>
 8004402:	bf00      	nop
 8004404:	200000b8 	.word	0x200000b8

08004408 <_kill_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	2300      	movs	r3, #0
 800440c:	4d06      	ldr	r5, [pc, #24]	; (8004428 <_kill_r+0x20>)
 800440e:	4604      	mov	r4, r0
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	f7fc ff50 	bl	80012ba <_kill>
 800441a:	1c43      	adds	r3, r0, #1
 800441c:	d102      	bne.n	8004424 <_kill_r+0x1c>
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	b103      	cbz	r3, 8004424 <_kill_r+0x1c>
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	bd38      	pop	{r3, r4, r5, pc}
 8004426:	bf00      	nop
 8004428:	200002c8 	.word	0x200002c8

0800442c <_getpid_r>:
 800442c:	f7fc bf3e 	b.w	80012ac <_getpid>

08004430 <memchr>:
 8004430:	4603      	mov	r3, r0
 8004432:	b510      	push	{r4, lr}
 8004434:	b2c9      	uxtb	r1, r1
 8004436:	4402      	add	r2, r0
 8004438:	4293      	cmp	r3, r2
 800443a:	4618      	mov	r0, r3
 800443c:	d101      	bne.n	8004442 <memchr+0x12>
 800443e:	2000      	movs	r0, #0
 8004440:	e003      	b.n	800444a <memchr+0x1a>
 8004442:	7804      	ldrb	r4, [r0, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	428c      	cmp	r4, r1
 8004448:	d1f6      	bne.n	8004438 <memchr+0x8>
 800444a:	bd10      	pop	{r4, pc}

0800444c <__swhatbuf_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	460c      	mov	r4, r1
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	4615      	mov	r5, r2
 8004456:	2900      	cmp	r1, #0
 8004458:	461e      	mov	r6, r3
 800445a:	b096      	sub	sp, #88	; 0x58
 800445c:	da0c      	bge.n	8004478 <__swhatbuf_r+0x2c>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	2100      	movs	r1, #0
 8004462:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004466:	bf0c      	ite	eq
 8004468:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800446c:	2340      	movne	r3, #64	; 0x40
 800446e:	2000      	movs	r0, #0
 8004470:	6031      	str	r1, [r6, #0]
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	b016      	add	sp, #88	; 0x58
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	466a      	mov	r2, sp
 800447a:	f000 f849 	bl	8004510 <_fstat_r>
 800447e:	2800      	cmp	r0, #0
 8004480:	dbed      	blt.n	800445e <__swhatbuf_r+0x12>
 8004482:	9901      	ldr	r1, [sp, #4]
 8004484:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004488:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800448c:	4259      	negs	r1, r3
 800448e:	4159      	adcs	r1, r3
 8004490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004494:	e7eb      	b.n	800446e <__swhatbuf_r+0x22>

08004496 <__smakebuf_r>:
 8004496:	898b      	ldrh	r3, [r1, #12]
 8004498:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800449a:	079d      	lsls	r5, r3, #30
 800449c:	4606      	mov	r6, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	d507      	bpl.n	80044b2 <__smakebuf_r+0x1c>
 80044a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	6123      	str	r3, [r4, #16]
 80044aa:	2301      	movs	r3, #1
 80044ac:	6163      	str	r3, [r4, #20]
 80044ae:	b002      	add	sp, #8
 80044b0:	bd70      	pop	{r4, r5, r6, pc}
 80044b2:	466a      	mov	r2, sp
 80044b4:	ab01      	add	r3, sp, #4
 80044b6:	f7ff ffc9 	bl	800444c <__swhatbuf_r>
 80044ba:	9900      	ldr	r1, [sp, #0]
 80044bc:	4605      	mov	r5, r0
 80044be:	4630      	mov	r0, r6
 80044c0:	f7ff faa8 	bl	8003a14 <_malloc_r>
 80044c4:	b948      	cbnz	r0, 80044da <__smakebuf_r+0x44>
 80044c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ca:	059a      	lsls	r2, r3, #22
 80044cc:	d4ef      	bmi.n	80044ae <__smakebuf_r+0x18>
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	e7e3      	b.n	80044a2 <__smakebuf_r+0xc>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	6020      	str	r0, [r4, #0]
 80044de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	9b00      	ldr	r3, [sp, #0]
 80044e6:	6120      	str	r0, [r4, #16]
 80044e8:	6163      	str	r3, [r4, #20]
 80044ea:	9b01      	ldr	r3, [sp, #4]
 80044ec:	b15b      	cbz	r3, 8004506 <__smakebuf_r+0x70>
 80044ee:	4630      	mov	r0, r6
 80044f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044f4:	f000 f81e 	bl	8004534 <_isatty_r>
 80044f8:	b128      	cbz	r0, 8004506 <__smakebuf_r+0x70>
 80044fa:	89a3      	ldrh	r3, [r4, #12]
 80044fc:	f023 0303 	bic.w	r3, r3, #3
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	431d      	orrs	r5, r3
 800450a:	81a5      	strh	r5, [r4, #12]
 800450c:	e7cf      	b.n	80044ae <__smakebuf_r+0x18>
	...

08004510 <_fstat_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	2300      	movs	r3, #0
 8004514:	4d06      	ldr	r5, [pc, #24]	; (8004530 <_fstat_r+0x20>)
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	f7fc ff2a 	bl	8001376 <_fstat>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	d102      	bne.n	800452c <_fstat_r+0x1c>
 8004526:	682b      	ldr	r3, [r5, #0]
 8004528:	b103      	cbz	r3, 800452c <_fstat_r+0x1c>
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	bd38      	pop	{r3, r4, r5, pc}
 800452e:	bf00      	nop
 8004530:	200002c8 	.word	0x200002c8

08004534 <_isatty_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	2300      	movs	r3, #0
 8004538:	4d05      	ldr	r5, [pc, #20]	; (8004550 <_isatty_r+0x1c>)
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc ff28 	bl	8001394 <_isatty>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_isatty_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_isatty_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	200002c8 	.word	0x200002c8

08004554 <_init>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr

08004560 <_fini>:
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	bf00      	nop
 8004564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004566:	bc08      	pop	{r3}
 8004568:	469e      	mov	lr, r3
 800456a:	4770      	bx	lr
