
React_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004380  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080045d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000bc  08004690  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004690  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000adf6  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001edb  00000000  00000000  0002af1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002ce00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a9  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001734d  00000000  00000000  0002e221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cef6  00000000  00000000  0004556e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d3c5  00000000  00000000  00052464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003864  00000000  00000000  000df82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e3090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000bc 	.word	0x200000bc
 8000158:	00000000 	.word	0x00000000
 800015c:	080044a4 	.word	0x080044a4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000c0 	.word	0x200000c0
 8000178:	080044a4 	.word	0x080044a4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <set_new_state>:
		};

int tab_case[5][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0,
		0, 1 }, { 1, 1, 1, 1 } };

static void set_new_state(FSM_State_Enum _new_state) {
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz)) {
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b31      	ldr	r3, [pc, #196]	; (8000550 <set_new_state+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d257      	bcs.n	8000542 <set_new_state+0xc6>
		fsm_handle->state = fsm_handle->states_list[_new_state];
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <set_new_state+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	441a      	add	r2, r3
 800049e:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <set_new_state+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}

		fsm_handle->controllers.state_execution_count = 0;
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <set_new_state+0xd4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
		fsm_handle->controllers.animation_state = ANIMATION_RUNNING;
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <set_new_state+0xd4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
		fsm_handle->controllers.state_base_time = HAL_GetTick();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <set_new_state+0xd4>)
 80004bc:	681c      	ldr	r4, [r3, #0]
 80004be:	f001 f971 	bl	80017a4 <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	61a3      	str	r3, [r4, #24]

		actualBTN1 = fsm_handle->inputs.nb_press_btn1;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <set_new_state+0xd4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	7c1a      	ldrb	r2, [r3, #16]
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <set_new_state+0xd8>)
 80004ce:	701a      	strb	r2, [r3, #0]
		actualBTN2 = fsm_handle->inputs.nb_press_btn2;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <set_new_state+0xd4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7c5a      	ldrb	r2, [r3, #17]
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <set_new_state+0xdc>)
 80004d8:	701a      	strb	r2, [r3, #0]
		actualBTN3 = fsm_handle->inputs.nb_press_btn3;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <set_new_state+0xd4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	7c9a      	ldrb	r2, [r3, #18]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <set_new_state+0xe0>)
 80004e2:	701a      	strb	r2, [r3, #0]
		actualBTN4 = fsm_handle->inputs.nb_press_btn4;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <set_new_state+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	7cda      	ldrb	r2, [r3, #19]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <set_new_state+0xe4>)
 80004ec:	701a      	strb	r2, [r3, #0]

		srand(HAL_GetTick());
 80004ee:	f001 f959 	bl	80017a4 <HAL_GetTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f002 ffb9 	bl	800346c <srand>

		fsm_handle->controllers.randomTime = (rand() % 4501) + 500;
 80004fa:	f002 ffe5 	bl	80034c8 <rand>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <set_new_state+0xe8>)
 8000502:	fb83 1302 	smull	r1, r3, r3, r2
 8000506:	1259      	asrs	r1, r3, #9
 8000508:	17d3      	asrs	r3, r2, #31
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	f241 1195 	movw	r1, #4501	; 0x1195
 8000510:	fb01 f303 	mul.w	r3, r1, r3
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <set_new_state+0xd4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	621a      	str	r2, [r3, #32]
		fsm_handle->controllers.randomCase = rand() % 5;
 8000520:	f002 ffd2 	bl	80034c8 <rand>
 8000524:	4602      	mov	r2, r0
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <set_new_state+0xec>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1059      	asrs	r1, r3, #1
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	1ad1      	subs	r1, r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <set_new_state+0xd4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	460a      	mov	r2, r1
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	max7219_erase_no_decode();
 8000542:	f001 f88d 	bl	8001660 <max7219_erase_no_decode>
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	200000dc 	.word	0x200000dc
 8000554:	200000e4 	.word	0x200000e4
 8000558:	200000e5 	.word	0x200000e5
 800055c:	200000e6 	.word	0x200000e6
 8000560:	200000e7 	.word	0x200000e7
 8000564:	1d1ee241 	.word	0x1d1ee241
 8000568:	66666667 	.word	0x66666667

0800056c <init_game>:

HAL_StatusTypeDef init_game(Game_Handle_TypeDef *_game_handle,
		FSM_Handle_TypeDef *_fsm_handle) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef led_array_status = HAL_OK;

	game_handle = _game_handle;
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <init_game+0x64>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <init_game+0x68>)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]

	max7219_status = max7219_init(&game_handle->max7219_handle);
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <init_game+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ff8e 	bl	80014ac <max7219_init>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]

	if (max7219_status != HAL_OK)
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <init_game+0x32>
		return max7219_status;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	e013      	b.n	80005c6 <init_game+0x5a>

	fsm_handle->states_list = states_list;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <init_game+0x68>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <init_game+0x6c>)
 80005a4:	609a      	str	r2, [r3, #8]
	fsm_handle->states_list_sz = sizeof(states_list)
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <init_game+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2206      	movs	r2, #6
 80005ac:	60da      	str	r2, [r3, #12]
			/ sizeof(FSM_State_TypeDef);

	fsm_handle->controllers.randomTime = 0;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <init_game+0x68>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
	fsm_handle->controllers.randomCase = 0;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <init_game+0x68>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24

	set_new_state(STATE_START);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5c 	bl	800047c <set_new_state>

	return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	200000dc 	.word	0x200000dc
 80005d8:	20000000 	.word	0x20000000

080005dc <run_game>:

HAL_StatusTypeDef run_game(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	fsm_handle->state.state_callback();
 80005e0:	4b9b      	ldr	r3, [pc, #620]	; (8000850 <run_game+0x274>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4798      	blx	r3
	fsm_handle->controllers.state_execution_count += 1;
 80005e8:	4b99      	ldr	r3, [pc, #612]	; (8000850 <run_game+0x274>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b98      	ldr	r3, [pc, #608]	; (8000850 <run_game+0x274>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3201      	adds	r2, #1
 80005f4:	615a      	str	r2, [r3, #20]

	switch (fsm_handle->state.state) {
 80005f6:	4b96      	ldr	r3, [pc, #600]	; (8000850 <run_game+0x274>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	f200 8169 	bhi.w	80008d4 <run_game+0x2f8>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <run_game+0x2c>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000621 	.word	0x08000621
 800060c:	08000635 	.word	0x08000635
 8000610:	080006a7 	.word	0x080006a7
 8000614:	0800089b 	.word	0x0800089b
 8000618:	08000889 	.word	0x08000889
 800061c:	080008ad 	.word	0x080008ad
	case STATE_START:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 8000620:	4b8b      	ldr	r3, [pc, #556]	; (8000850 <run_game+0x274>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7f1b      	ldrb	r3, [r3, #28]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 8149 	bne.w	80008be <run_game+0x2e2>
			set_new_state(STATE_WP);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff25 	bl	800047c <set_new_state>
		}
		break;
 8000632:	e144      	b.n	80008be <run_game+0x2e2>
	case STATE_WP:
		checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000634:	4b86      	ldr	r3, [pc, #536]	; (8000850 <run_game+0x274>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	7c1a      	ldrb	r2, [r3, #16]
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <run_game+0x278>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b85      	ldr	r3, [pc, #532]	; (8000858 <run_game+0x27c>)
 8000644:	701a      	strb	r2, [r3, #0]
		checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000646:	4b82      	ldr	r3, [pc, #520]	; (8000850 <run_game+0x274>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7c5a      	ldrb	r2, [r3, #17]
 800064c:	4b83      	ldr	r3, [pc, #524]	; (800085c <run_game+0x280>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b82      	ldr	r3, [pc, #520]	; (8000860 <run_game+0x284>)
 8000656:	701a      	strb	r2, [r3, #0]
		checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000658:	4b7d      	ldr	r3, [pc, #500]	; (8000850 <run_game+0x274>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	7c9a      	ldrb	r2, [r3, #18]
 800065e:	4b81      	ldr	r3, [pc, #516]	; (8000864 <run_game+0x288>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b80      	ldr	r3, [pc, #512]	; (8000868 <run_game+0x28c>)
 8000668:	701a      	strb	r2, [r3, #0]
		checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 800066a:	4b79      	ldr	r3, [pc, #484]	; (8000850 <run_game+0x274>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7cda      	ldrb	r2, [r3, #19]
 8000670:	4b7e      	ldr	r3, [pc, #504]	; (800086c <run_game+0x290>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b7d      	ldr	r3, [pc, #500]	; (8000870 <run_game+0x294>)
 800067a:	701a      	strb	r2, [r3, #0]
		if (checkP1 != 0 || checkP2 != 0 || checkP3 != 0 || checkP4 != 0) {
 800067c:	4b76      	ldr	r3, [pc, #472]	; (8000858 <run_game+0x27c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10c      	bne.n	800069e <run_game+0xc2>
 8000684:	4b76      	ldr	r3, [pc, #472]	; (8000860 <run_game+0x284>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d108      	bne.n	800069e <run_game+0xc2>
 800068c:	4b76      	ldr	r3, [pc, #472]	; (8000868 <run_game+0x28c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d104      	bne.n	800069e <run_game+0xc2>
 8000694:	4b76      	ldr	r3, [pc, #472]	; (8000870 <run_game+0x294>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 8112 	beq.w	80008c2 <run_game+0x2e6>
			set_new_state(STATE_WAIT);
 800069e:	2003      	movs	r0, #3
 80006a0:	f7ff feec 	bl	800047c <set_new_state>
		}

		break;
 80006a4:	e10d      	b.n	80008c2 <run_game+0x2e6>
	case STATE_GP:
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time <= 10000) {
 80006a6:	f001 f87d 	bl	80017a4 <HAL_GetTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	4b68      	ldr	r3, [pc, #416]	; (8000850 <run_game+0x274>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80006b8:	4293      	cmp	r3, r2
 80006ba:	f200 80c4 	bhi.w	8000846 <run_game+0x26a>
			switch (fsm_handle->controllers.randomCase) {
 80006be:	4b64      	ldr	r3, [pc, #400]	; (8000850 <run_game+0x274>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	f200 80fe 	bhi.w	80008c6 <run_game+0x2ea>
 80006ca:	a201      	add	r2, pc, #4	; (adr r2, 80006d0 <run_game+0xf4>)
 80006cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	0800071d 	.word	0x0800071d
 80006d8:	08000755 	.word	0x08000755
 80006dc:	0800078d 	.word	0x0800078d
 80006e0:	080007c3 	.word	0x080007c3
			case 0:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 80006e4:	4b5a      	ldr	r3, [pc, #360]	; (8000850 <run_game+0x274>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	7c1a      	ldrb	r2, [r3, #16]
 80006ea:	4b5a      	ldr	r3, [pc, #360]	; (8000854 <run_game+0x278>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b59      	ldr	r3, [pc, #356]	; (8000858 <run_game+0x27c>)
 80006f4:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0) {
 80006f6:	4b58      	ldr	r3, [pc, #352]	; (8000858 <run_game+0x27c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f000 80ba 	beq.w	8000874 <run_game+0x298>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000700:	f001 f850 	bl	80017a4 <HAL_GetTick>
 8000704:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <run_game+0x274>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 800070c:	4b50      	ldr	r3, [pc, #320]	; (8000850 <run_game+0x274>)
 800070e:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000710:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 8000714:	2004      	movs	r0, #4
 8000716:	f7ff feb1 	bl	800047c <set_new_state>
				}
				break;
 800071a:	e0ab      	b.n	8000874 <run_game+0x298>
			case 1:
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 800071c:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <run_game+0x274>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	7c5a      	ldrb	r2, [r3, #17]
 8000722:	4b4e      	ldr	r3, [pc, #312]	; (800085c <run_game+0x280>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <run_game+0x284>)
 800072c:	701a      	strb	r2, [r3, #0]
				if (checkP2 != 0) {
 800072e:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <run_game+0x284>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	f000 80a0 	beq.w	8000878 <run_game+0x29c>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000738:	f001 f834 	bl	80017a4 <HAL_GetTick>
 800073c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800073e:	4b44      	ldr	r3, [pc, #272]	; (8000850 <run_game+0x274>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000744:	4b42      	ldr	r3, [pc, #264]	; (8000850 <run_game+0x274>)
 8000746:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000748:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800074c:	2004      	movs	r0, #4
 800074e:	f7ff fe95 	bl	800047c <set_new_state>
				}
				break;
 8000752:	e091      	b.n	8000878 <run_game+0x29c>
			case 2:
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000754:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <run_game+0x274>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7c9a      	ldrb	r2, [r3, #18]
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <run_game+0x288>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <run_game+0x28c>)
 8000764:	701a      	strb	r2, [r3, #0]
				if (checkP3 != 0) {
 8000766:	4b40      	ldr	r3, [pc, #256]	; (8000868 <run_game+0x28c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 8086 	beq.w	800087c <run_game+0x2a0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000770:	f001 f818 	bl	80017a4 <HAL_GetTick>
 8000774:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 8000776:	4b36      	ldr	r3, [pc, #216]	; (8000850 <run_game+0x274>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <run_game+0x274>)
 800077e:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000780:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 8000784:	2004      	movs	r0, #4
 8000786:	f7ff fe79 	bl	800047c <set_new_state>
				}
				break;
 800078a:	e077      	b.n	800087c <run_game+0x2a0>
			case 3:
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 800078c:	4b30      	ldr	r3, [pc, #192]	; (8000850 <run_game+0x274>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	7cda      	ldrb	r2, [r3, #19]
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <run_game+0x290>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b35      	ldr	r3, [pc, #212]	; (8000870 <run_game+0x294>)
 800079c:	701a      	strb	r2, [r3, #0]
				if (checkP4 != 0) {
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <run_game+0x294>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d06c      	beq.n	8000880 <run_game+0x2a4>
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007a6:	f000 fffd 	bl	80017a4 <HAL_GetTick>
 80007aa:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <run_game+0x274>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <run_game+0x274>)
 80007b4:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007b6:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007ba:	2004      	movs	r0, #4
 80007bc:	f7ff fe5e 	bl	800047c <set_new_state>
				}
				break;
 80007c0:	e05e      	b.n	8000880 <run_game+0x2a4>

			case 4:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <run_game+0x274>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	7c1a      	ldrb	r2, [r3, #16]
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <run_game+0x278>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <run_game+0x27c>)
 80007d2:	701a      	strb	r2, [r3, #0]
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <run_game+0x274>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7c5a      	ldrb	r2, [r3, #17]
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <run_game+0x280>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <run_game+0x284>)
 80007e4:	701a      	strb	r2, [r3, #0]
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <run_game+0x274>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	7c9a      	ldrb	r2, [r3, #18]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <run_game+0x288>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <run_game+0x28c>)
 80007f6:	701a      	strb	r2, [r3, #0]
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <run_game+0x274>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	7cda      	ldrb	r2, [r3, #19]
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <run_game+0x290>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <run_game+0x294>)
 8000808:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0 && checkP2 != 0 && checkP3 != 0
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <run_game+0x27c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d038      	beq.n	8000884 <run_game+0x2a8>
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <run_game+0x284>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d034      	beq.n	8000884 <run_game+0x2a8>
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <run_game+0x28c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d030      	beq.n	8000884 <run_game+0x2a8>
						&& checkP4 != 0) {
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <run_game+0x294>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d02c      	beq.n	8000884 <run_game+0x2a8>
					fsm_handle->controllers.timing = (HAL_GetTick()
 800082a:	f000 ffbb 	bl	80017a4 <HAL_GetTick>
 800082e:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <run_game+0x274>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <run_game+0x274>)
 8000838:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 800083a:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800083e:	2004      	movs	r0, #4
 8000840:	f7ff fe1c 	bl	800047c <set_new_state>
				}
				break;
 8000844:	e01e      	b.n	8000884 <run_game+0x2a8>
			}
		} else {
			set_new_state(STATE_LOOSE);
 8000846:	2005      	movs	r0, #5
 8000848:	f7ff fe18 	bl	800047c <set_new_state>
		}
		break;
 800084c:	e03b      	b.n	80008c6 <run_game+0x2ea>
 800084e:	bf00      	nop
 8000850:	200000dc 	.word	0x200000dc
 8000854:	200000e4 	.word	0x200000e4
 8000858:	200000e0 	.word	0x200000e0
 800085c:	200000e5 	.word	0x200000e5
 8000860:	200000e1 	.word	0x200000e1
 8000864:	200000e6 	.word	0x200000e6
 8000868:	200000e2 	.word	0x200000e2
 800086c:	200000e7 	.word	0x200000e7
 8000870:	200000e3 	.word	0x200000e3
				break;
 8000874:	bf00      	nop
 8000876:	e026      	b.n	80008c6 <run_game+0x2ea>
				break;
 8000878:	bf00      	nop
 800087a:	e024      	b.n	80008c6 <run_game+0x2ea>
				break;
 800087c:	bf00      	nop
 800087e:	e022      	b.n	80008c6 <run_game+0x2ea>
				break;
 8000880:	bf00      	nop
 8000882:	e020      	b.n	80008c6 <run_game+0x2ea>
				break;
 8000884:	bf00      	nop
		break;
 8000886:	e01e      	b.n	80008c6 <run_game+0x2ea>
	case STATE_DISP:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <run_game+0x300>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	7f1b      	ldrb	r3, [r3, #28]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d11b      	bne.n	80008ca <run_game+0x2ee>
			set_new_state(STATE_WP);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fdf2 	bl	800047c <set_new_state>
		}
		break;
 8000898:	e017      	b.n	80008ca <run_game+0x2ee>
	case STATE_WAIT:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <run_game+0x300>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	7f1b      	ldrb	r3, [r3, #28]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d114      	bne.n	80008ce <run_game+0x2f2>
			set_new_state(STATE_GP);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fde9 	bl	800047c <set_new_state>
		}
		break;
 80008aa:	e010      	b.n	80008ce <run_game+0x2f2>
	case STATE_LOOSE:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <run_game+0x300>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	7f1b      	ldrb	r3, [r3, #28]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10d      	bne.n	80008d2 <run_game+0x2f6>
			set_new_state(STATE_WP);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fde0 	bl	800047c <set_new_state>
		}
		break;
 80008bc:	e009      	b.n	80008d2 <run_game+0x2f6>
		break;
 80008be:	bf00      	nop
 80008c0:	e008      	b.n	80008d4 <run_game+0x2f8>
		break;
 80008c2:	bf00      	nop
 80008c4:	e006      	b.n	80008d4 <run_game+0x2f8>
		break;
 80008c6:	bf00      	nop
 80008c8:	e004      	b.n	80008d4 <run_game+0x2f8>
		break;
 80008ca:	bf00      	nop
 80008cc:	e002      	b.n	80008d4 <run_game+0x2f8>
		break;
 80008ce:	bf00      	nop
 80008d0:	e000      	b.n	80008d4 <run_game+0x2f8>
		break;
 80008d2:	bf00      	nop
	}

	return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000dc 	.word	0x200000dc

080008e0 <state_start>:

void state_start(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	//Affichage
	max7219_status = display_letter(game_handle->max7219_handle, 'G', 0);
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <state_start+0xa4>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2347      	movs	r3, #71	; 0x47
 80008f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008f2:	f000 fa0d 	bl	8000d10 <display_letter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <state_start+0x24>
		Error_Handler();
 8000900:	f000 fbcc 	bl	800109c <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'A', 1);
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <state_start+0xa4>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2341      	movs	r3, #65	; 0x41
 800090e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000910:	f000 f9fe 	bl	8000d10 <display_letter>
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <state_start+0x42>
		Error_Handler();
 800091e:	f000 fbbd 	bl	800109c <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'M', 2);
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <state_start+0xa4>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	2302      	movs	r3, #2
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	234d      	movs	r3, #77	; 0x4d
 800092c:	ca07      	ldmia	r2, {r0, r1, r2}
 800092e:	f000 f9ef 	bl	8000d10 <display_letter>
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <state_start+0x60>
		Error_Handler();
 800093c:	f000 fbae 	bl	800109c <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 3);
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <state_start+0xa4>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	2303      	movs	r3, #3
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2345      	movs	r3, #69	; 0x45
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	f000 f9e0 	bl	8000d10 <display_letter>
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <state_start+0x7e>
		Error_Handler();
 800095a:	f000 fb9f 	bl	800109c <Error_Handler>

	//Ellapsed time
	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 800095e:	f000 ff21 	bl	80017a4 <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <state_start+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000970:	4293      	cmp	r3, r2
 8000972:	d903      	bls.n	800097c <state_start+0x9c>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <state_start+0xa8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	771a      	strb	r2, [r3, #28]
	}

}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000d8 	.word	0x200000d8
 8000988:	200000dc 	.word	0x200000dc

0800098c <state_wp>:
void state_wp(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	max7219_status = display_letter(game_handle->max7219_handle, 'P', 0);
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <state_wp+0x88>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2350      	movs	r3, #80	; 0x50
 800099c:	ca07      	ldmia	r2, {r0, r1, r2}
 800099e:	f000 f9b7 	bl	8000d10 <display_letter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <state_wp+0x24>
		Error_Handler();
 80009ac:	f000 fb76 	bl	800109c <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'R', 1);
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <state_wp+0x88>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	2301      	movs	r3, #1
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2352      	movs	r3, #82	; 0x52
 80009ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80009bc:	f000 f9a8 	bl	8000d10 <display_letter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <state_wp+0x42>
		Error_Handler();
 80009ca:	f000 fb67 	bl	800109c <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 2);
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <state_wp+0x88>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	2302      	movs	r3, #2
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2345      	movs	r3, #69	; 0x45
 80009d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009da:	f000 f999 	bl	8000d10 <display_letter>
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <state_wp+0x60>
		Error_Handler();
 80009e8:	f000 fb58 	bl	800109c <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <state_wp+0x88>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2303      	movs	r3, #3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2353      	movs	r3, #83	; 0x53
 80009f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f8:	f000 f98a 	bl	8000d10 <display_letter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <state_wp+0x7e>
		Error_Handler();
 8000a06:	f000 fb49 	bl	800109c <Error_Handler>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000d8 	.word	0x200000d8

08000a18 <state_gp>:
void state_gp(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef max7219_status;
	switch (fsm_handle->controllers.randomCase) {
 8000a1e:	4b3e      	ldr	r3, [pc, #248]	; (8000b18 <state_gp+0x100>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d873      	bhi.n	8000b10 <state_gp+0xf8>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <state_gp+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	08000a75 	.word	0x08000a75
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000aa5 	.word	0x08000aa5
	case 0:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000a44:	2130      	movs	r1, #48	; 0x30
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fd8e 	bl	8001568 <max7219_display_no_decode>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d053      	beq.n	8000afe <state_gp+0xe6>
			Error_Handler();
 8000a56:	f000 fb21 	bl	800109c <Error_Handler>
		break;
 8000a5a:	e050      	b.n	8000afe <state_gp+0xe6>
	case 1:
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000a5c:	216d      	movs	r1, #109	; 0x6d
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 fd82 	bl	8001568 <max7219_display_no_decode>
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d049      	beq.n	8000b02 <state_gp+0xea>
			Error_Handler();
 8000a6e:	f000 fb15 	bl	800109c <Error_Handler>
		break;
 8000a72:	e046      	b.n	8000b02 <state_gp+0xea>
	case 2:
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000a74:	2179      	movs	r1, #121	; 0x79
 8000a76:	2002      	movs	r0, #2
 8000a78:	f000 fd76 	bl	8001568 <max7219_display_no_decode>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d03f      	beq.n	8000b06 <state_gp+0xee>
			Error_Handler();
 8000a86:	f000 fb09 	bl	800109c <Error_Handler>
		break;
 8000a8a:	e03c      	b.n	8000b06 <state_gp+0xee>
	case 3:
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000a8c:	2133      	movs	r1, #51	; 0x33
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f000 fd6a 	bl	8001568 <max7219_display_no_decode>
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d035      	beq.n	8000b0a <state_gp+0xf2>
			Error_Handler();
 8000a9e:	f000 fafd 	bl	800109c <Error_Handler>
		break;
 8000aa2:	e032      	b.n	8000b0a <state_gp+0xf2>

	case 4:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000aa4:	2130      	movs	r1, #48	; 0x30
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 fd5e 	bl	8001568 <max7219_display_no_decode>
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <state_gp+0xa2>
			Error_Handler();
 8000ab6:	f000 faf1 	bl	800109c <Error_Handler>
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000aba:	216d      	movs	r1, #109	; 0x6d
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 fd53 	bl	8001568 <max7219_display_no_decode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <state_gp+0xb8>
			Error_Handler();
 8000acc:	f000 fae6 	bl	800109c <Error_Handler>
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000ad0:	2179      	movs	r1, #121	; 0x79
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f000 fd48 	bl	8001568 <max7219_display_no_decode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <state_gp+0xce>
			Error_Handler();
 8000ae2:	f000 fadb 	bl	800109c <Error_Handler>
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000ae6:	2133      	movs	r1, #51	; 0x33
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 fd3d 	bl	8001568 <max7219_display_no_decode>
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00a      	beq.n	8000b0e <state_gp+0xf6>
			Error_Handler();
 8000af8:	f000 fad0 	bl	800109c <Error_Handler>
		break;
 8000afc:	e007      	b.n	8000b0e <state_gp+0xf6>
		break;
 8000afe:	bf00      	nop
 8000b00:	e006      	b.n	8000b10 <state_gp+0xf8>
		break;
 8000b02:	bf00      	nop
 8000b04:	e004      	b.n	8000b10 <state_gp+0xf8>
		break;
 8000b06:	bf00      	nop
 8000b08:	e002      	b.n	8000b10 <state_gp+0xf8>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e000      	b.n	8000b10 <state_gp+0xf8>
		break;
 8000b0e:	bf00      	nop
	}
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000dc 	.word	0x200000dc

08000b1c <state_disp>:

void state_disp(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status;
	int mil, cent, diz, ent;

	mil = fsm_handle->controllers.timing / 1000;
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <state_disp+0x104>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <state_disp+0x108>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	099b      	lsrs	r3, r3, #6
 8000b30:	617b      	str	r3, [r7, #20]
	cent = (fsm_handle->controllers.timing / 100) % 10;
 8000b32:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <state_disp+0x104>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	4a3b      	ldr	r2, [pc, #236]	; (8000c28 <state_disp+0x10c>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0959      	lsrs	r1, r3, #5
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <state_disp+0x110>)
 8000b42:	fba3 2301 	umull	r2, r3, r3, r1
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	1aca      	subs	r2, r1, r3
 8000b52:	613a      	str	r2, [r7, #16]
	diz = (fsm_handle->controllers.timing / 10) % 10;
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <state_disp+0x104>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5a:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <state_disp+0x110>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	08d9      	lsrs	r1, r3, #3
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <state_disp+0x110>)
 8000b64:	fba3 2301 	umull	r2, r3, r3, r1
 8000b68:	08da      	lsrs	r2, r3, #3
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	1aca      	subs	r2, r1, r3
 8000b74:	60fa      	str	r2, [r7, #12]
	ent = fsm_handle->controllers.timing % 10;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <state_disp+0x104>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <state_disp+0x110>)
 8000b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1aca      	subs	r2, r1, r3
 8000b8e:	60ba      	str	r2, [r7, #8]

	max7219_status = max7219_display_decode(0, mil);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 fd24 	bl	80015e4 <max7219_display_decode>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <state_disp+0x8e>
		Error_Handler();
 8000ba6:	f000 fa79 	bl	800109c <Error_Handler>
	max7219_status = max7219_display_decode(1, cent);
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fd17 	bl	80015e4 <max7219_display_decode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <state_disp+0xa8>
		Error_Handler();
 8000bc0:	f000 fa6c 	bl	800109c <Error_Handler>
	max7219_status = max7219_display_decode(2, diz);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fd0a 	bl	80015e4 <max7219_display_decode>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <state_disp+0xc2>
		Error_Handler();
 8000bda:	f000 fa5f 	bl	800109c <Error_Handler>
	max7219_status = max7219_display_decode(3, ent);
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4619      	mov	r1, r3
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 fcfd 	bl	80015e4 <max7219_display_decode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <state_disp+0xdc>
		Error_Handler();
 8000bf4:	f000 fa52 	bl	800109c <Error_Handler>

	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 8000bf8:	f000 fdd4 	bl	80017a4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <state_disp+0x104>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d903      	bls.n	8000c16 <state_disp+0xfa>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <state_disp+0x104>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2201      	movs	r2, #1
 8000c14:	771a      	strb	r2, [r3, #28]
	}
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000dc 	.word	0x200000dc
 8000c24:	10624dd3 	.word	0x10624dd3
 8000c28:	51eb851f 	.word	0x51eb851f
 8000c2c:	cccccccd 	.word	0xcccccccd

08000c30 <state_wait>:

void state_wait(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time)
 8000c34:	bf00      	nop
 8000c36:	f000 fdb5 	bl	80017a4 <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <state_wait+0x2c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	1ad2      	subs	r2, r2, r3
			< fsm_handle->controllers.randomTime)
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <state_wait+0x2c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3f3      	bcc.n	8000c36 <state_wait+0x6>
		;
	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c4e:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <state_wait+0x2c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2201      	movs	r2, #1
 8000c54:	771a      	strb	r2, [r3, #28]
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000dc 	.word	0x200000dc

08000c60 <state_loose>:

void state_loose(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000c66:	e03b      	b.n	8000ce0 <state_loose+0x80>
		max7219_status = display_letter(game_handle->max7219_handle, 'L', 0);
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <state_loose+0xa8>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	234c      	movs	r3, #76	; 0x4c
 8000c72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c74:	f000 f84c 	bl	8000d10 <display_letter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <state_loose+0x26>
			Error_Handler();
 8000c82:	f000 fa0b 	bl	800109c <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 1);
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <state_loose+0xa8>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	234f      	movs	r3, #79	; 0x4f
 8000c90:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c92:	f000 f83d 	bl	8000d10 <display_letter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <state_loose+0x44>
			Error_Handler();
 8000ca0:	f000 f9fc 	bl	800109c <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 2);
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <state_loose+0xa8>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	234f      	movs	r3, #79	; 0x4f
 8000cae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb0:	f000 f82e 	bl	8000d10 <display_letter>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <state_loose+0x62>
			Error_Handler();
 8000cbe:	f000 f9ed 	bl	800109c <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <state_loose+0xa8>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2353      	movs	r3, #83	; 0x53
 8000ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cce:	f000 f81f 	bl	8000d10 <display_letter>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <state_loose+0x80>
			Error_Handler();
 8000cdc:	f000 f9de 	bl	800109c <Error_Handler>
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000ce0:	f000 fd60 	bl	80017a4 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <state_loose+0xac>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d9b8      	bls.n	8000c68 <state_loose+0x8>
	}

	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <state_loose+0xac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	771a      	strb	r2, [r3, #28]
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000d8 	.word	0x200000d8
 8000d0c:	200000dc 	.word	0x200000dc

08000d10 <display_letter>:

HAL_StatusTypeDef display_letter(MAX7219_Handle_TypeDef max7219_handle,char letter, int pos) {
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	1d3c      	adds	r4, r7, #4
 8000d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d1c:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef max7219_status;

	if (letter >= 'A' && letter <= 'Z') {
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	2b40      	cmp	r3, #64	; 0x40
 8000d22:	d90e      	bls.n	8000d42 <display_letter+0x32>
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	2b5a      	cmp	r3, #90	; 0x5a
 8000d28:	d80b      	bhi.n	8000d42 <display_letter+0x32>
		max7219_status = max7219_display_no_decode(pos, LETTERS[letter - 'A']);
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	3b41      	subs	r3, #65	; 0x41
 8000d32:	4906      	ldr	r1, [pc, #24]	; (8000d4c <display_letter+0x3c>)
 8000d34:	5ccb      	ldrb	r3, [r1, r3]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f000 fc15 	bl	8001568 <max7219_display_no_decode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	75fb      	strb	r3, [r7, #23]
	}
	return max7219_status;
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	20000030 	.word	0x20000030

08000d50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin) {
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d60:	d014      	beq.n	8000d8c <HAL_GPIO_EXTI_Callback+0x3c>
 8000d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d66:	dc26      	bgt.n	8000db6 <HAL_GPIO_EXTI_Callback+0x66>
 8000d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_EXTI_Callback+0x2e>
 8000d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d72:	dc20      	bgt.n	8000db6 <HAL_GPIO_EXTI_Callback+0x66>
 8000d74:	2b20      	cmp	r3, #32
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_EXTI_Callback+0x58>
 8000d78:	2b40      	cmp	r3, #64	; 0x40
 8000d7a:	d00e      	beq.n	8000d9a <HAL_GPIO_EXTI_Callback+0x4a>
	case BTN4_Pin:
		fsm_handle->inputs.nb_press_btn4++;
		break;
	}

}
 8000d7c:	e01b      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn1++;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	7c1a      	ldrb	r2, [r3, #16]
 8000d84:	3201      	adds	r2, #1
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	741a      	strb	r2, [r3, #16]
		break;
 8000d8a:	e014      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn2++;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	7c5a      	ldrb	r2, [r3, #17]
 8000d92:	3201      	adds	r2, #1
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	745a      	strb	r2, [r3, #17]
		break;
 8000d98:	e00d      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn3++;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	7c9a      	ldrb	r2, [r3, #18]
 8000da0:	3201      	adds	r2, #1
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	749a      	strb	r2, [r3, #18]
		break;
 8000da6:	e006      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn4++;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	7cda      	ldrb	r2, [r3, #19]
 8000dae:	3201      	adds	r2, #1
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	74da      	strb	r2, [r3, #19]
		break;
 8000db4:	bf00      	nop
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	200000dc 	.word	0x200000dc

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b092      	sub	sp, #72	; 0x48
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fc87 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f82b 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f000 f8f5 	bl	8000fc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dd6:	f000 f86f 	bl	8000eb8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000dda:	f000 f8a3 	bl	8000f24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Handle_TypeDef max7219_handle ={
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <main+0x60>)
 8000de0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            &hspi1,
            NCS_GPIO_Port,
            NCS_Pin,
            4
    };
  HAL_StatusTypeDef game_status = HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    Game_Handle_TypeDef game_handler = {
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            max7219_handle,
    };

    FSM_Handle_TypeDef fsm_handler;

    init_game(&game_handler, &fsm_handler);
 8000dfe:	463a      	mov	r2, r7
 8000e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fbb0 	bl	800056c <init_game>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  game_status=run_game();
 8000e0c:	f7ff fbe6 	bl	80005dc <run_game>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  if(game_status != HAL_OK)Error_Handler();
 8000e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f6      	beq.n	8000e0c <main+0x48>
 8000e1e:	f000 f93d 	bl	800109c <Error_Handler>
	  game_status=run_game();
 8000e22:	e7f3      	b.n	8000e0c <main+0x48>
 8000e24:	080044bc 	.word	0x080044bc

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b092      	sub	sp, #72	; 0x48
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fc89 	bl	800374e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <SystemClock_Config+0x8c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <SystemClock_Config+0x8c>)
 8000e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e58:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e66:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 ff6d 	bl	8001d54 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e80:	f000 f90c 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fa89 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ea8:	f000 f8f8 	bl	800109c <Error_Handler>
  }
}
 8000eac:	bf00      	nop
 8000eae:	3748      	adds	r7, #72	; 0x48
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <MX_SPI1_Init+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ec4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000f04:	220a      	movs	r2, #10
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_SPI1_Init+0x64>)
 8000f0a:	f001 fca5 	bl	8002858 <HAL_SPI_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f14:	f000 f8c2 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000e8 	.word	0x200000e8
 8000f20:	40013000 	.word	0x40013000

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f4a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f58:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f6c:	f001 ff0a 	bl	8002d84 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f76:	f000 f891 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000f88:	f002 f817 	bl	8002fba <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f92:	f000 f883 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	; (8000fbc <MX_TIM2_Init+0x98>)
 8000fa4:	f002 fa04 	bl	80033b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fae:	f000 f875 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000140 	.word	0x20000140

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <MX_GPIO_Init+0xd4>)
 800100e:	f000 fe71 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <MX_GPIO_Init+0xd8>)
 8001028:	f000 fcd4 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	4813      	ldr	r0, [pc, #76]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001046:	f000 fcc5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800104a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001062:	f000 fcb7 	bl	80019d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2017      	movs	r0, #23
 800106c:	f000 fc7b 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001070:	2017      	movs	r0, #23
 8001072:	f000 fc94 	bl	800199e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f000 fc73 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f000 fc8c 	bl	800199e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020800 	.word	0x40020800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_MspInit+0x58>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_MspInit+0x58>)
 80010b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b8:	6253      	str	r3, [r2, #36]	; 0x24
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_MspInit+0x58>)
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_MspInit+0x58>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_MspInit+0x58>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_MspInit+0x58>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_MspInit+0x58>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_MspInit+0x58>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6253      	str	r3, [r2, #36]	; 0x24
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_MspInit+0x58>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_SPI_MspInit+0x7c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d127      	bne.n	8001176 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_SPI_MspInit+0x80>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a16      	ldr	r2, [pc, #88]	; (8001184 <HAL_SPI_MspInit+0x80>)
 800112c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_SPI_MspInit+0x80>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_SPI_MspInit+0x80>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_SPI_MspInit+0x80>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_SPI_MspInit+0x80>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001156:	23a0      	movs	r3, #160	; 0xa0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001166:	2305      	movs	r3, #5
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_SPI_MspInit+0x84>)
 8001172:	f000 fc2f 	bl	80019d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40013000 	.word	0x40013000
 8001184:	40023800 	.word	0x40023800
 8001188:	40020000 	.word	0x40020000

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119c:	d113      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_TIM_Base_MspInit+0x44>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_TIM_Base_MspInit+0x44>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6253      	str	r3, [r2, #36]	; 0x24
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_TIM_Base_MspInit+0x44>)
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	201c      	movs	r0, #28
 80011bc:	f000 fbd3 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c0:	201c      	movs	r0, #28
 80011c2:	f000 fbec 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 fab1 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8001226:	2020      	movs	r0, #32
 8001228:	f000 fd7c 	bl	8001d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 800122c:	2040      	movs	r0, #64	; 0x40
 800122e:	f000 fd79 	bl	8001d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM2_IRQHandler+0x10>)
 800123e:	f001 fde0 	bl	8002e02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000140 	.word	0x20000140

0800124c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8001250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001254:	f000 fd66 	bl	8001d24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001258:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800125c:	f000 fd62 	bl	8001d24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <_kill>:

int _kill(int pid, int sig)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800127c:	f002 fab6 	bl	80037ec <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	2216      	movs	r2, #22
 8001284:	601a      	str	r2, [r3, #0]
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_exit>:

void _exit (int status)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800129a:	f04f 31ff 	mov.w	r1, #4294967295
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffe7 	bl	8001272 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012a4:	e7fe      	b.n	80012a4 <_exit+0x12>

080012a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e00a      	b.n	80012ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012b8:	f3af 8000 	nop.w
 80012bc:	4601      	mov	r1, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	60ba      	str	r2, [r7, #8]
 80012c4:	b2ca      	uxtb	r2, r1
 80012c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dbf0      	blt.n	80012b8 <_read+0x12>
  }

  return len;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e009      	b.n	8001306 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbf1      	blt.n	80012f2 <_write+0x12>
  }
  return len;
 800130e:	687b      	ldr	r3, [r7, #4]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_close>:

int _close(int file)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133e:	605a      	str	r2, [r3, #4]
  return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <_isatty>:

int _isatty(int file)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001354:	2301      	movs	r3, #1
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <_sbrk+0x5c>)
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <_sbrk+0x60>)
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <_sbrk+0x64>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <_sbrk+0x64>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <_sbrk+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_sbrk+0x64>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d207      	bcs.n	80013b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a8:	f002 fa20 	bl	80037ec <__errno>
 80013ac:	4603      	mov	r3, r0
 80013ae:	220c      	movs	r2, #12
 80013b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e009      	b.n	80013cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <_sbrk+0x64>)
 80013c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20014000 	.word	0x20014000
 80013d8:	00000400 	.word	0x00000400
 80013dc:	20000180 	.word	0x20000180
 80013e0:	200002d8 	.word	0x200002d8

080013e4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f0:	f7ff fff8 	bl	80013e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013f6:	490c      	ldr	r1, [pc, #48]	; (8001428 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <LoopFillZerobss+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013fc:	e002      	b.n	8001404 <LoopCopyDataInit>

080013fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001402:	3304      	adds	r3, #4

08001404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001408:	d3f9      	bcc.n	80013fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800140c:	4c09      	ldr	r4, [pc, #36]	; (8001434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001410:	e001      	b.n	8001416 <LoopFillZerobss>

08001412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001414:	3204      	adds	r2, #4

08001416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001418:	d3fb      	bcc.n	8001412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141a:	f002 f9ed 	bl	80037f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800141e:	f7ff fcd1 	bl	8000dc4 <main>
  bx lr
 8001422:	4770      	bx	lr
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 800142c:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 8001430:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001434:	200002d8 	.word	0x200002d8

08001438 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC1_IRQHandler>
	...

0800143c <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	723b      	strb	r3, [r7, #8]
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 8001454:	2302      	movs	r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 8001458:	2300      	movs	r3, #0
 800145a:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <max7219_transmit+0x6c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6858      	ldr	r0, [r3, #4]
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <max7219_transmit+0x6c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	891b      	ldrh	r3, [r3, #8]
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	f000 fc42 	bl	8001cf4 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <max7219_transmit+0x6c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0108 	add.w	r1, r7, #8
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	f001 fa73 	bl	800296a <HAL_SPI_Transmit>
 8001484:	4603      	mov	r3, r0
 8001486:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <max7219_transmit+0x6c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6858      	ldr	r0, [r3, #4]
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <max7219_transmit+0x6c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	891b      	ldrh	r3, [r3, #8]
 8001494:	2201      	movs	r2, #1
 8001496:	4619      	mov	r1, r3
 8001498:	f000 fc2c 	bl	8001cf4 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 800149c:	7afb      	ldrb	r3, [r7, #11]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000184 	.word	0x20000184

080014ac <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 80014b4:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <max7219_init+0xb8>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <max7219_init+0xb8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d104      	bne.n	80014cc <max7219_init+0x20>
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <max7219_init+0xb8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	e047      	b.n	800155c <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 80014d0:	2100      	movs	r1, #0
 80014d2:	200c      	movs	r0, #12
 80014d4:	f7ff ffb2 	bl	800143c <max7219_transmit>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <max7219_init+0x3a>
		return max7219_status;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	e03a      	b.n	800155c <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 80014e6:	2101      	movs	r1, #1
 80014e8:	200c      	movs	r0, #12
 80014ea:	f7ff ffa7 	bl	800143c <max7219_transmit>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <max7219_init+0x50>
		return max7219_status;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	e02f      	b.n	800155c <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <max7219_init+0xb8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	7a9b      	ldrb	r3, [r3, #10]
 8001502:	3b01      	subs	r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	200b      	movs	r0, #11
 800150a:	f7ff ff97 	bl	800143c <max7219_transmit>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <max7219_init+0x70>
		return max7219_status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	e01f      	b.n	800155c <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 800151c:	2100      	movs	r1, #0
 800151e:	2009      	movs	r0, #9
 8001520:	f7ff ff8c 	bl	800143c <max7219_transmit>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <max7219_init+0x86>
		return max7219_status;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	e014      	b.n	800155c <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 8001532:	2108      	movs	r1, #8
 8001534:	200a      	movs	r0, #10
 8001536:	f7ff ff81 	bl	800143c <max7219_transmit>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <max7219_init+0x9c>
		return max7219_status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	e009      	b.n	800155c <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 8001548:	f000 f88a 	bl	8001660 <max7219_erase_no_decode>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <max7219_init+0xae>
		return max7219_status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	e000      	b.n	800155c <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000184 	.word	0x20000184

08001568 <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <max7219_display_no_decode+0x74>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <max7219_display_no_decode+0x26>
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <max7219_display_no_decode+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	e022      	b.n	80015d4 <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 800158e:	2100      	movs	r1, #0
 8001590:	2009      	movs	r0, #9
 8001592:	f7ff ff53 	bl	800143c <max7219_transmit>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <max7219_display_no_decode+0x3c>
		return max7219_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	e017      	b.n	80015d4 <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <max7219_display_no_decode+0x74>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	7a9b      	ldrb	r3, [r3, #10]
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d901      	bls.n	80015b4 <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e00f      	b.n	80015d4 <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <max7219_display_no_decode+0x78>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	79ba      	ldrb	r2, [r7, #6]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff3c 	bl	800143c <max7219_transmit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <max7219_display_no_decode+0x6a>
		return max7219_status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	e000      	b.n	80015d4 <max7219_display_no_decode+0x6c>

	return max7219_status;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000184 	.word	0x20000184
 80015e0:	20000050 	.word	0x20000050

080015e4 <max7219_display_decode>:
 * @brief Display value with code B decoding.
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_decode(uint8_t _digit_index, uint8_t _digit_value){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <max7219_display_decode+0x74>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <max7219_display_decode+0x26>
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <max7219_display_decode+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	e022      	b.n	8001650 <max7219_display_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <max7219_display_decode+0x74>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	7a9b      	ldrb	r3, [r3, #10]
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	429a      	cmp	r2, r3
 8001614:	d901      	bls.n	800161a <max7219_display_decode+0x36>
		return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e01a      	b.n	8001650 <max7219_display_decode+0x6c>

	// Set decode mode to 'decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0xFF);
 800161a:	21ff      	movs	r1, #255	; 0xff
 800161c:	2009      	movs	r0, #9
 800161e:	f7ff ff0d 	bl	800143c <max7219_transmit>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <max7219_display_decode+0x4c>
		return max7219_status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	e00f      	b.n	8001650 <max7219_display_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <max7219_display_decode+0x78>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	79ba      	ldrb	r2, [r7, #6]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fefe 	bl	800143c <max7219_transmit>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <max7219_display_decode+0x6a>
		return max7219_status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	e000      	b.n	8001650 <max7219_display_decode+0x6c>

	return max7219_status;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000184 	.word	0x20000184
 800165c:	20000050 	.word	0x20000050

08001660 <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <max7219_erase_no_decode+0x74>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <max7219_erase_no_decode+0x1c>
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <max7219_erase_no_decode+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	e027      	b.n	80016cc <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 800167c:	2100      	movs	r1, #0
 800167e:	2009      	movs	r0, #9
 8001680:	f7ff fedc 	bl	800143c <max7219_transmit>
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <max7219_erase_no_decode+0x32>
		return max7219_status;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	e01c      	b.n	80016cc <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	e011      	b.n	80016bc <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <max7219_erase_no_decode+0x78>)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff feca 	bl	800143c <max7219_transmit>
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <max7219_erase_no_decode+0x56>
			return max7219_status;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	e00a      	b.n	80016cc <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <max7219_erase_no_decode+0x74>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	7a9b      	ldrb	r3, [r3, #10]
 80016c2:	461a      	mov	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	dbe6      	blt.n	8001698 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 80016ca:	79fb      	ldrb	r3, [r7, #7]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000184 	.word	0x20000184
 80016d8:	20000050 	.word	0x20000050

080016dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e6:	2003      	movs	r0, #3
 80016e8:	f000 f932 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ec:	200f      	movs	r0, #15
 80016ee:	f000 f80d 	bl	800170c <HAL_InitTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	e001      	b.n	8001702 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016fe:	f7ff fcd3 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001702:	79fb      	ldrb	r3, [r7, #7]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_InitTick+0x68>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d022      	beq.n	8001766 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_InitTick+0x6c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_InitTick+0x68>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800172c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f940 	bl	80019ba <HAL_SYSTICK_Config>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10f      	bne.n	8001760 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	d809      	bhi.n	800175a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001746:	2200      	movs	r2, #0
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	f04f 30ff 	mov.w	r0, #4294967295
 800174e:	f000 f90a 	bl	8001966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_InitTick+0x70>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e007      	b.n	800176a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e004      	b.n	800176a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000005c 	.word	0x2000005c
 8001778:	2000004c 	.word	0x2000004c
 800177c:	20000058 	.word	0x20000058

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_IncTick+0x1c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x20>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4413      	add	r3, r2
 800178e:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_IncTick+0x1c>)
 8001790:	6013      	str	r3, [r2, #0]
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000188 	.word	0x20000188
 80017a0:	2000005c 	.word	0x2000005c

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <HAL_GetTick+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000188 	.word	0x20000188

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4906      	ldr	r1, [pc, #24]	; (8001850 <__NVIC_EnableIRQ+0x34>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff90 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff2d 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff42 	bl	8001800 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff90 	bl	80018a8 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5f 	bl	8001854 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff35 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019ea:	e160      	b.n	8001cae <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8152 	beq.w	8001ca8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d005      	beq.n	8001a1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d017      	beq.n	8001aba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d123      	bne.n	8001b0e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	6939      	ldr	r1, [r7, #16]
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0203 	and.w	r2, r3, #3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80ac 	beq.w	8001ca8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b50:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <HAL_GPIO_Init+0x2f8>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a5d      	ldr	r2, [pc, #372]	; (8001ccc <HAL_GPIO_Init+0x2f8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	4b5b      	ldr	r3, [pc, #364]	; (8001ccc <HAL_GPIO_Init+0x2f8>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b68:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_GPIO_Init+0x2fc>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a51      	ldr	r2, [pc, #324]	; (8001cd4 <HAL_GPIO_Init+0x300>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d025      	beq.n	8001be0 <HAL_GPIO_Init+0x20c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a50      	ldr	r2, [pc, #320]	; (8001cd8 <HAL_GPIO_Init+0x304>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01f      	beq.n	8001bdc <HAL_GPIO_Init+0x208>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a4f      	ldr	r2, [pc, #316]	; (8001cdc <HAL_GPIO_Init+0x308>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d019      	beq.n	8001bd8 <HAL_GPIO_Init+0x204>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x200>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a4d      	ldr	r2, [pc, #308]	; (8001ce4 <HAL_GPIO_Init+0x310>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1fc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a4c      	ldr	r2, [pc, #304]	; (8001ce8 <HAL_GPIO_Init+0x314>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1f8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <HAL_GPIO_Init+0x318>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1f4>
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	e00c      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bc8:	2307      	movs	r3, #7
 8001bca:	e00a      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bcc:	2305      	movs	r3, #5
 8001bce:	e008      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e004      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e002      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_GPIO_Init+0x20e>
 8001be0:	2300      	movs	r3, #0
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	f002 0203 	and.w	r2, r2, #3
 8001be8:	0092      	lsls	r2, r2, #2
 8001bea:	4093      	lsls	r3, r2
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf2:	4937      	ldr	r1, [pc, #220]	; (8001cd0 <HAL_GPIO_Init+0x2fc>)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c24:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c4e:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f47f ae97 	bne.w	80019ec <HAL_GPIO_Init+0x18>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	371c      	adds	r7, #28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f804 	bl	8000d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e31d      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d66:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d70:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d07b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d006      	beq.n	8001d9a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d10f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5e>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d98:	d10b      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	4b87      	ldr	r3, [pc, #540]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d06a      	beq.n	8001e7c <HAL_RCC_OscConfig+0x128>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d166      	bne.n	8001e7c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e2f7      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x74>
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e02d      	b.n	8001e24 <HAL_RCC_OscConfig+0xd0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x96>
 8001dd0:	4b79      	ldr	r3, [pc, #484]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a78      	ldr	r2, [pc, #480]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e01c      	b.n	8001e24 <HAL_RCC_OscConfig+0xd0>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0xb8>
 8001df2:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a70      	ldr	r2, [pc, #448]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6d      	ldr	r2, [pc, #436]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd0>
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a66      	ldr	r2, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fcba 	bl	80017a4 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fcb6 	bl	80017a4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e2ad      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e46:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xe0>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fca6 	bl	80017a4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fca2 	bl	80017a4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e299      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e6e:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x108>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d05a      	beq.n	8001f40 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d119      	bne.n	8001eca <HAL_RCC_OscConfig+0x176>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d116      	bne.n	8001eca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x160>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e276      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	493d      	ldr	r1, [pc, #244]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec8:	e03a      	b.n	8001f40 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_RCC_OscConfig+0x268>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc64 	bl	80017a4 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc60 	bl	80017a4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e257      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	492a      	ldr	r1, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]
 8001f12:	e015      	b.n	8001f40 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0x268>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fc43 	bl	80017a4 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f22:	f7ff fc3f 	bl	80017a4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e236      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80b8 	beq.w	80020be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d170      	bne.n	8002036 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x218>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e21a      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d921      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fc09 	bl	8002798 <RCC_SetFlashLatencyFromMSIRange>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e208      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	061b      	lsls	r3, r3, #24
 8001fb0:	4901      	ldr	r1, [pc, #4]	; (8001fb8 <HAL_RCC_OscConfig+0x264>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
 8001fb6:	e020      	b.n	8001ffa <HAL_RCC_OscConfig+0x2a6>
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc0:	4b99      	ldr	r3, [pc, #612]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4996      	ldr	r1, [pc, #600]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd2:	4b95      	ldr	r3, [pc, #596]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	061b      	lsls	r3, r3, #24
 8001fe0:	4991      	ldr	r1, [pc, #580]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fbd4 	bl	8002798 <RCC_SetFlashLatencyFromMSIRange>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1d3      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	3301      	adds	r3, #1
 8002002:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800200a:	4a87      	ldr	r2, [pc, #540]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 800200c:	6892      	ldr	r2, [r2, #8]
 800200e:	0912      	lsrs	r2, r2, #4
 8002010:	f002 020f 	and.w	r2, r2, #15
 8002014:	4985      	ldr	r1, [pc, #532]	; (800222c <HAL_RCC_OscConfig+0x4d8>)
 8002016:	5c8a      	ldrb	r2, [r1, r2]
 8002018:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800201a:	4a85      	ldr	r2, [pc, #532]	; (8002230 <HAL_RCC_OscConfig+0x4dc>)
 800201c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800201e:	4b85      	ldr	r3, [pc, #532]	; (8002234 <HAL_RCC_OscConfig+0x4e0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb72 	bl	800170c <HAL_InitTick>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d045      	beq.n	80020be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	e1b5      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d029      	beq.n	8002092 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203e:	4b7e      	ldr	r3, [pc, #504]	; (8002238 <HAL_RCC_OscConfig+0x4e4>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fbae 	bl	80017a4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204c:	f7ff fbaa 	bl	80017a4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1a1      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800205e:	4b72      	ldr	r3, [pc, #456]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	496c      	ldr	r1, [pc, #432]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4967      	ldr	r1, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002092:	4b69      	ldr	r3, [pc, #420]	; (8002238 <HAL_RCC_OscConfig+0x4e4>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fb84 	bl	80017a4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a0:	f7ff fb80 	bl	80017a4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e177      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d030      	beq.n	800212c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_RCC_OscConfig+0x4e8>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fb64 	bl	80017a4 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff fb60 	bl	80017a4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e157      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020f2:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x38c>
 80020fe:	e015      	b.n	800212c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <HAL_RCC_OscConfig+0x4e8>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff fb4d 	bl	80017a4 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff fb49 	bl	80017a4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e140      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80b5 	beq.w	80022a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b3a      	ldr	r3, [pc, #232]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10d      	bne.n	8002166 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	4a36      	ldr	r2, [pc, #216]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6253      	str	r3, [r2, #36]	; 0x24
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x4ec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_RCC_OscConfig+0x4ec>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_RCC_OscConfig+0x4ec>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff fb11 	bl	80017a4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff fb0d 	bl	80017a4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e104      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCC_OscConfig+0x4ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x466>
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6353      	str	r3, [r2, #52]	; 0x34
 80021b8:	e02d      	b.n	8002216 <HAL_RCC_OscConfig+0x4c2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x488>
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021cc:	6353      	str	r3, [r2, #52]	; 0x34
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021d8:	6353      	str	r3, [r2, #52]	; 0x34
 80021da:	e01c      	b.n	8002216 <HAL_RCC_OscConfig+0x4c2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_OscConfig+0x4aa>
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	6353      	str	r3, [r2, #52]	; 0x34
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6353      	str	r3, [r2, #52]	; 0x34
 80021fc:	e00b      	b.n	8002216 <HAL_RCC_OscConfig+0x4c2>
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002208:	6353      	str	r3, [r2, #52]	; 0x34
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 800220c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220e:	4a06      	ldr	r2, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x4d4>)
 8002210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002214:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d024      	beq.n	8002268 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff fac1 	bl	80017a4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002224:	e019      	b.n	800225a <HAL_RCC_OscConfig+0x506>
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	080044d4 	.word	0x080044d4
 8002230:	2000004c 	.word	0x2000004c
 8002234:	20000058 	.word	0x20000058
 8002238:	42470020 	.word	0x42470020
 800223c:	42470680 	.word	0x42470680
 8002240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7ff faae 	bl	80017a4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0a3      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 800225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ee      	beq.n	8002244 <HAL_RCC_OscConfig+0x4f0>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff fa9c 	bl	80017a4 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fa98 	bl	80017a4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e08d      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ee      	bne.n	8002270 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002298:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d079      	beq.n	80023a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d056      	beq.n	8002360 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d13b      	bne.n	8002332 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCC_OscConfig+0x65c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fa70 	bl	80017a4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff fa6c 	bl	80017a4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e063      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	4319      	orrs	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	430b      	orrs	r3, r1
 80022fe:	492b      	ldr	r1, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x65c>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff fa4b 	bl	80017a4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff fa47 	bl	80017a4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e03e      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x5be>
 8002330:	e036      	b.n	80023a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_RCC_OscConfig+0x65c>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fa34 	bl	80017a4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff fa30 	bl	80017a4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e027      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x5ec>
 800235e:	e01f      	b.n	80023a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e01a      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x658>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	429a      	cmp	r2, r3
 800237e:	d10d      	bne.n	800239c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470060 	.word	0x42470060

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e11a      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d919      	bls.n	800240a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x34>
 80023dc:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a89      	ldr	r2, [pc, #548]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b87      	ldr	r3, [pc, #540]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0201 	bic.w	r2, r3, #1
 80023f0:	4985      	ldr	r1, [pc, #532]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	4b83      	ldr	r3, [pc, #524]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0f9      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b7d      	ldr	r3, [pc, #500]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	497a      	ldr	r1, [pc, #488]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808e 	beq.w	8002552 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243e:	4b73      	ldr	r3, [pc, #460]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d121      	bne.n	800248e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0d7      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002456:	4b6d      	ldr	r3, [pc, #436]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d115      	bne.n	800248e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0cb      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246e:	4b67      	ldr	r3, [pc, #412]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0bf      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0b7      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	495c      	ldr	r1, [pc, #368]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7ff f980 	bl	80017a4 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d112      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7ff f978 	bl	80017a4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e09b      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c6:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d1ee      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xfc>
 80024d2:	e03e      	b.n	8002552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d112      	bne.n	8002502 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7ff f961 	bl	80017a4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e084      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	4b45      	ldr	r3, [pc, #276]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_ClockConfig+0x12a>
 8002500:	e027      	b.n	8002552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d11d      	bne.n	8002546 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7ff f94a 	bl	80017a4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e06d      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002522:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d1ee      	bne.n	800250c <HAL_RCC_ClockConfig+0x158>
 800252e:	e010      	b.n	8002552 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7ff f938 	bl	80017a4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e05b      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ee      	bne.n	8002530 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d219      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_RCC_ClockConfig+0x1be>
 8002566:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0201 	bic.w	r2, r3, #1
 800257a:	4923      	ldr	r1, [pc, #140]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_RCC_ClockConfig+0x254>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e034      	b.n	80025fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4917      	ldr	r1, [pc, #92]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d2:	f000 f823 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCC_ClockConfig+0x258>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	490b      	ldr	r1, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x25c>)
 80025e4:	5ccb      	ldrb	r3, [r1, r3]
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x264>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f88a 	bl	800170c <HAL_InitTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80025fc:	7afb      	ldrb	r3, [r7, #11]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00
 800260c:	40023800 	.word	0x40023800
 8002610:	080044d4 	.word	0x080044d4
 8002614:	2000004c 	.word	0x2000004c
 8002618:	20000058 	.word	0x20000058

0800261c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002620:	b08e      	sub	sp, #56	; 0x38
 8002622:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002624:	4b58      	ldr	r3, [pc, #352]	; (8002788 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x34>
 8002634:	2b0c      	cmp	r3, #12
 8002636:	f200 8092 	bhi.w	800275e <HAL_RCC_GetSysClockFreq+0x142>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d002      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x28>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d003      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x2e>
 8002642:	e08c      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b51      	ldr	r3, [pc, #324]	; (800278c <HAL_RCC_GetSysClockFreq+0x170>)
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002648:	e097      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800264a:	4b51      	ldr	r3, [pc, #324]	; (8002790 <HAL_RCC_GetSysClockFreq+0x174>)
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800264e:	e094      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	4b4e      	ldr	r3, [pc, #312]	; (8002794 <HAL_RCC_GetSysClockFreq+0x178>)
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	0d9b      	lsrs	r3, r3, #22
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_GetSysClockFreq+0x16c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d021      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	2200      	movs	r2, #0
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	61fa      	str	r2, [r7, #28]
 800267e:	4b44      	ldr	r3, [pc, #272]	; (8002790 <HAL_RCC_GetSysClockFreq+0x174>)
 8002680:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002684:	464a      	mov	r2, r9
 8002686:	fb03 f202 	mul.w	r2, r3, r2
 800268a:	2300      	movs	r3, #0
 800268c:	4644      	mov	r4, r8
 800268e:	fb04 f303 	mul.w	r3, r4, r3
 8002692:	4413      	add	r3, r2
 8002694:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <HAL_RCC_GetSysClockFreq+0x174>)
 8002696:	4644      	mov	r4, r8
 8002698:	fba4 0102 	umull	r0, r1, r4, r2
 800269c:	440b      	add	r3, r1
 800269e:	4619      	mov	r1, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2200      	movs	r2, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	617a      	str	r2, [r7, #20]
 80026a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026ac:	f7fd fd66 	bl	800017c <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4613      	mov	r3, r2
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
 80026b8:	e04e      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2200      	movs	r2, #0
 80026be:	469a      	mov	sl, r3
 80026c0:	4693      	mov	fp, r2
 80026c2:	4652      	mov	r2, sl
 80026c4:	465b      	mov	r3, fp
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	0159      	lsls	r1, r3, #5
 80026d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d4:	0150      	lsls	r0, r2, #5
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ebb2 080a 	subs.w	r8, r2, sl
 80026de:	eb63 090b 	sbc.w	r9, r3, fp
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026f6:	ebb2 0408 	subs.w	r4, r2, r8
 80026fa:	eb63 0509 	sbc.w	r5, r3, r9
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	00eb      	lsls	r3, r5, #3
 8002708:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270c:	00e2      	lsls	r2, r4, #3
 800270e:	4614      	mov	r4, r2
 8002710:	461d      	mov	r5, r3
 8002712:	eb14 030a 	adds.w	r3, r4, sl
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	eb45 030b 	adc.w	r3, r5, fp
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272a:	4629      	mov	r1, r5
 800272c:	028b      	lsls	r3, r1, #10
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	4604      	mov	r4, r0
 8002734:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002738:	4601      	mov	r1, r0
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	2200      	movs	r2, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	60fa      	str	r2, [r7, #12]
 8002748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800274c:	f7fd fd16 	bl	800017c <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4613      	mov	r3, r2
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800275c:	e00d      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	0b5b      	lsrs	r3, r3, #13
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	3301      	adds	r3, #1
 800276e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800277c:	4618      	mov	r0, r3
 800277e:	3738      	adds	r7, #56	; 0x38
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	00f42400 	.word	0x00f42400
 8002790:	016e3600 	.word	0x016e3600
 8002794:	080044c8 	.word	0x080044c8

08002798 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027a4:	4b29      	ldr	r3, [pc, #164]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d12c      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e016      	b.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	4a1f      	ldr	r2, [pc, #124]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6253      	str	r3, [r2, #36]	; 0x24
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80027e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4a17      	ldr	r2, [pc, #92]	; (800284c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80027f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80027fc:	d105      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002804:	d101      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002806:	2301      	movs	r3, #1
 8002808:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 0201 	bic.w	r2, r3, #1
 8002824:	490b      	ldr	r1, [pc, #44]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40007000 	.word	0x40007000
 8002854:	40023c00 	.word	0x40023c00

08002858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07b      	b.n	8002962 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287a:	d009      	beq.n	8002890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
 8002882:	e005      	b.n	8002890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fc2a 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	ea42 0103 	orr.w	r1, r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0104 	and.w	r1, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f003 0210 	and.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b088      	sub	sp, #32
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_SPI_Transmit+0x22>
 8002988:	2302      	movs	r3, #2
 800298a:	e12d      	b.n	8002be8 <HAL_SPI_Transmit+0x27e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002994:	f7fe ff06 	bl	80017a4 <HAL_GetTick>
 8002998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ae:	e116      	b.n	8002bde <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_SPI_Transmit+0x52>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029c0:	e10d      	b.n	8002bde <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a08:	d10f      	bne.n	8002a2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d007      	beq.n	8002a48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a50:	d14f      	bne.n	8002af2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_SPI_Transmit+0xf6>
 8002a5a:	8afb      	ldrh	r3, [r7, #22]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d142      	bne.n	8002ae6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	881a      	ldrh	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a84:	e02f      	b.n	8002ae6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d112      	bne.n	8002aba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ab8:	e015      	b.n	8002ae6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aba:	f7fe fe73 	bl	80017a4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d803      	bhi.n	8002ad2 <HAL_SPI_Transmit+0x168>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d102      	bne.n	8002ad8 <HAL_SPI_Transmit+0x16e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ae4:	e07b      	b.n	8002bde <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ca      	bne.n	8002a86 <HAL_SPI_Transmit+0x11c>
 8002af0:	e050      	b.n	8002b94 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_SPI_Transmit+0x196>
 8002afa:	8afb      	ldrh	r3, [r7, #22]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d144      	bne.n	8002b8a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	7812      	ldrb	r2, [r2, #0]
 8002b0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b26:	e030      	b.n	8002b8a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d113      	bne.n	8002b5e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b5c:	e015      	b.n	8002b8a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b5e:	f7fe fe21 	bl	80017a4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d803      	bhi.n	8002b76 <HAL_SPI_Transmit+0x20c>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d102      	bne.n	8002b7c <HAL_SPI_Transmit+0x212>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002b88:	e029      	b.n	8002bde <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1c9      	bne.n	8002b28 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f8b1 	bl	8002d00 <SPI_EndRxTxTransaction>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e003      	b.n	8002bde <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c00:	f7fe fdd0 	bl	80017a4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c10:	f7fe fdc8 	bl	80017a4 <HAL_GetTick>
 8002c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	015b      	lsls	r3, r3, #5
 8002c1c:	0d1b      	lsrs	r3, r3, #20
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	e054      	b.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2e:	d050      	beq.n	8002cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c30:	f7fe fdb8 	bl	80017a4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d902      	bls.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d13d      	bne.n	8002cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d111      	bne.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d004      	beq.n	8002c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d107      	bne.n	8002c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8c:	d10f      	bne.n	8002cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e017      	b.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d19b      	bne.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000004c 	.word	0x2000004c

08002d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <SPI_EndRxTxTransaction+0x7c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <SPI_EndRxTxTransaction+0x80>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0d5b      	lsrs	r3, r3, #21
 8002d18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2a:	d112      	bne.n	8002d52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff ff5a 	bl	8002bf0 <SPI_WaitFlagStateUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d0f2      	beq.n	8002d52 <SPI_EndRxTxTransaction+0x52>
 8002d6c:	e000      	b.n	8002d70 <SPI_EndRxTxTransaction+0x70>
        break;
 8002d6e:	bf00      	nop
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000004c 	.word	0x2000004c
 8002d80:	165e9f81 	.word	0x165e9f81

08002d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e031      	b.n	8002dfa <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe f9ee 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f000 f9ee 	bl	80031a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d122      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d11b      	bne.n	8002e5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0202 	mvn.w	r2, #2
 8002e2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f991 	bl	800316c <HAL_TIM_IC_CaptureCallback>
 8002e4a:	e005      	b.n	8002e58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f984 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f993 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d122      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d11b      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0204 	mvn.w	r2, #4
 8002e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f967 	bl	800316c <HAL_TIM_IC_CaptureCallback>
 8002e9e:	e005      	b.n	8002eac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f95a 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f969 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d122      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11b      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0208 	mvn.w	r2, #8
 8002ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2204      	movs	r2, #4
 8002edc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f93d 	bl	800316c <HAL_TIM_IC_CaptureCallback>
 8002ef2:	e005      	b.n	8002f00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f930 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f93f 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d122      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d11b      	bne.n	8002f5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0210 	mvn.w	r2, #16
 8002f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f913 	bl	800316c <HAL_TIM_IC_CaptureCallback>
 8002f46:	e005      	b.n	8002f54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f906 	bl	800315a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f915 	bl	800317e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10e      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d107      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f06f 0201 	mvn.w	r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f8e1 	bl	8003148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d10e      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d107      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8ef 	bl	8003190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0b4      	b.n	8003140 <HAL_TIM_ConfigClockSource+0x186>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ff4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300e:	d03e      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xd4>
 8003010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003014:	f200 8087 	bhi.w	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	f000 8086 	beq.w	800312c <HAL_TIM_ConfigClockSource+0x172>
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d87f      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 8003026:	2b70      	cmp	r3, #112	; 0x70
 8003028:	d01a      	beq.n	8003060 <HAL_TIM_ConfigClockSource+0xa6>
 800302a:	2b70      	cmp	r3, #112	; 0x70
 800302c:	d87b      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 800302e:	2b60      	cmp	r3, #96	; 0x60
 8003030:	d050      	beq.n	80030d4 <HAL_TIM_ConfigClockSource+0x11a>
 8003032:	2b60      	cmp	r3, #96	; 0x60
 8003034:	d877      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 8003036:	2b50      	cmp	r3, #80	; 0x50
 8003038:	d03c      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xfa>
 800303a:	2b50      	cmp	r3, #80	; 0x50
 800303c:	d873      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d058      	beq.n	80030f4 <HAL_TIM_ConfigClockSource+0x13a>
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d86f      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 8003046:	2b30      	cmp	r3, #48	; 0x30
 8003048:	d064      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x15a>
 800304a:	2b30      	cmp	r3, #48	; 0x30
 800304c:	d86b      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 800304e:	2b20      	cmp	r3, #32
 8003050:	d060      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x15a>
 8003052:	2b20      	cmp	r3, #32
 8003054:	d867      	bhi.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d05c      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x15a>
 800305a:	2b10      	cmp	r3, #16
 800305c:	d05a      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0x15a>
 800305e:	e062      	b.n	8003126 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	f000 f97f 	bl	8003372 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003082:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e04f      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	f000 f968 	bl	8003372 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b0:	609a      	str	r2, [r3, #8]
      break;
 80030b2:	e03c      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c0:	461a      	mov	r2, r3
 80030c2:	f000 f8df 	bl	8003284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2150      	movs	r1, #80	; 0x50
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f936 	bl	800333e <TIM_ITRx_SetConfig>
      break;
 80030d2:	e02c      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e0:	461a      	mov	r2, r3
 80030e2:	f000 f8fd 	bl	80032e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2160      	movs	r1, #96	; 0x60
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f926 	bl	800333e <TIM_ITRx_SetConfig>
      break;
 80030f2:	e01c      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003100:	461a      	mov	r2, r3
 8003102:	f000 f8bf 	bl	8003284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f916 	bl	800333e <TIM_ITRx_SetConfig>
      break;
 8003112:	e00c      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f000 f90d 	bl	800333e <TIM_ITRx_SetConfig>
      break;
 8003124:	e003      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      break;
 800312a:	e000      	b.n	800312e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800312c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d00f      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a2b      	ldr	r2, [pc, #172]	; (800326c <TIM_Base_SetConfig+0xc8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00b      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a2a      	ldr	r2, [pc, #168]	; (8003270 <TIM_Base_SetConfig+0xcc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <TIM_Base_SetConfig+0xd0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a28      	ldr	r2, [pc, #160]	; (8003278 <TIM_Base_SetConfig+0xd4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d108      	bne.n	80031ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0x82>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	; (800326c <TIM_Base_SetConfig+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0x82>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <TIM_Base_SetConfig+0xcc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0x82>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <TIM_Base_SetConfig+0xd0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x82>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <TIM_Base_SetConfig+0xd4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x82>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <TIM_Base_SetConfig+0xd8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x82>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a17      	ldr	r2, [pc, #92]	; (8003280 <TIM_Base_SetConfig+0xdc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40010800 	.word	0x40010800
 800327c:	40010c00 	.word	0x40010c00
 8003280:	40011000 	.word	0x40011000

08003284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0201 	bic.w	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f023 030a 	bic.w	r3, r3, #10
 80032c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0210 	bic.w	r2, r3, #16
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800330a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	031b      	lsls	r3, r3, #12
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800331c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	f043 0307 	orr.w	r3, r3, #7
 8003360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	431a      	orrs	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4313      	orrs	r3, r2
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	609a      	str	r2, [r3, #8]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e046      	b.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d00e      	beq.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a13      	ldr	r2, [pc, #76]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10c      	bne.n	8003444 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4313      	orrs	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40010800 	.word	0x40010800

0800346c <srand>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <srand+0x44>)
 8003470:	4604      	mov	r4, r0
 8003472:	681d      	ldr	r5, [r3, #0]
 8003474:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003476:	b9b3      	cbnz	r3, 80034a6 <srand+0x3a>
 8003478:	2018      	movs	r0, #24
 800347a:	f000 fa4b 	bl	8003914 <malloc>
 800347e:	4602      	mov	r2, r0
 8003480:	6328      	str	r0, [r5, #48]	; 0x30
 8003482:	b920      	cbnz	r0, 800348e <srand+0x22>
 8003484:	2146      	movs	r1, #70	; 0x46
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <srand+0x48>)
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <srand+0x4c>)
 800348a:	f000 f9dd 	bl	8003848 <__assert_func>
 800348e:	490b      	ldr	r1, [pc, #44]	; (80034bc <srand+0x50>)
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <srand+0x54>)
 8003492:	e9c0 1300 	strd	r1, r3, [r0]
 8003496:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <srand+0x58>)
 8003498:	2100      	movs	r1, #0
 800349a:	6083      	str	r3, [r0, #8]
 800349c:	230b      	movs	r3, #11
 800349e:	8183      	strh	r3, [r0, #12]
 80034a0:	2001      	movs	r0, #1
 80034a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80034a6:	2200      	movs	r2, #0
 80034a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80034aa:	611c      	str	r4, [r3, #16]
 80034ac:	615a      	str	r2, [r3, #20]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	200000b8 	.word	0x200000b8
 80034b4:	080044e4 	.word	0x080044e4
 80034b8:	080044fb 	.word	0x080044fb
 80034bc:	abcd330e 	.word	0xabcd330e
 80034c0:	e66d1234 	.word	0xe66d1234
 80034c4:	0005deec 	.word	0x0005deec

080034c8 <rand>:
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <rand+0x5c>)
 80034ca:	b510      	push	{r4, lr}
 80034cc:	681c      	ldr	r4, [r3, #0]
 80034ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034d0:	b9b3      	cbnz	r3, 8003500 <rand+0x38>
 80034d2:	2018      	movs	r0, #24
 80034d4:	f000 fa1e 	bl	8003914 <malloc>
 80034d8:	4602      	mov	r2, r0
 80034da:	6320      	str	r0, [r4, #48]	; 0x30
 80034dc:	b920      	cbnz	r0, 80034e8 <rand+0x20>
 80034de:	2152      	movs	r1, #82	; 0x52
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <rand+0x60>)
 80034e2:	4812      	ldr	r0, [pc, #72]	; (800352c <rand+0x64>)
 80034e4:	f000 f9b0 	bl	8003848 <__assert_func>
 80034e8:	4911      	ldr	r1, [pc, #68]	; (8003530 <rand+0x68>)
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <rand+0x6c>)
 80034ec:	e9c0 1300 	strd	r1, r3, [r0]
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <rand+0x70>)
 80034f2:	2100      	movs	r1, #0
 80034f4:	6083      	str	r3, [r0, #8]
 80034f6:	230b      	movs	r3, #11
 80034f8:	8183      	strh	r3, [r0, #12]
 80034fa:	2001      	movs	r0, #1
 80034fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003500:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003502:	480e      	ldr	r0, [pc, #56]	; (800353c <rand+0x74>)
 8003504:	690b      	ldr	r3, [r1, #16]
 8003506:	694c      	ldr	r4, [r1, #20]
 8003508:	4358      	muls	r0, r3
 800350a:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <rand+0x78>)
 800350c:	fb02 0004 	mla	r0, r2, r4, r0
 8003510:	fba3 3202 	umull	r3, r2, r3, r2
 8003514:	3301      	adds	r3, #1
 8003516:	eb40 0002 	adc.w	r0, r0, r2
 800351a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800351e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003522:	bd10      	pop	{r4, pc}
 8003524:	200000b8 	.word	0x200000b8
 8003528:	080044e4 	.word	0x080044e4
 800352c:	080044fb 	.word	0x080044fb
 8003530:	abcd330e 	.word	0xabcd330e
 8003534:	e66d1234 	.word	0xe66d1234
 8003538:	0005deec 	.word	0x0005deec
 800353c:	5851f42d 	.word	0x5851f42d
 8003540:	4c957f2d 	.word	0x4c957f2d

08003544 <std>:
 8003544:	2300      	movs	r3, #0
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	e9c0 3300 	strd	r3, r3, [r0]
 800354e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003552:	6083      	str	r3, [r0, #8]
 8003554:	8181      	strh	r1, [r0, #12]
 8003556:	6643      	str	r3, [r0, #100]	; 0x64
 8003558:	81c2      	strh	r2, [r0, #14]
 800355a:	6183      	str	r3, [r0, #24]
 800355c:	4619      	mov	r1, r3
 800355e:	2208      	movs	r2, #8
 8003560:	305c      	adds	r0, #92	; 0x5c
 8003562:	f000 f8f4 	bl	800374e <memset>
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <std+0x58>)
 8003568:	6224      	str	r4, [r4, #32]
 800356a:	6263      	str	r3, [r4, #36]	; 0x24
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <std+0x5c>)
 800356e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <std+0x60>)
 8003572:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <std+0x64>)
 8003576:	6323      	str	r3, [r4, #48]	; 0x30
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <std+0x68>)
 800357a:	429c      	cmp	r4, r3
 800357c:	d006      	beq.n	800358c <std+0x48>
 800357e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003582:	4294      	cmp	r4, r2
 8003584:	d002      	beq.n	800358c <std+0x48>
 8003586:	33d0      	adds	r3, #208	; 0xd0
 8003588:	429c      	cmp	r4, r3
 800358a:	d105      	bne.n	8003598 <std+0x54>
 800358c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003594:	f000 b954 	b.w	8003840 <__retarget_lock_init_recursive>
 8003598:	bd10      	pop	{r4, pc}
 800359a:	bf00      	nop
 800359c:	080036c9 	.word	0x080036c9
 80035a0:	080036eb 	.word	0x080036eb
 80035a4:	08003723 	.word	0x08003723
 80035a8:	08003747 	.word	0x08003747
 80035ac:	2000018c 	.word	0x2000018c

080035b0 <stdio_exit_handler>:
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <stdio_exit_handler+0xc>)
 80035b2:	4903      	ldr	r1, [pc, #12]	; (80035c0 <stdio_exit_handler+0x10>)
 80035b4:	4803      	ldr	r0, [pc, #12]	; (80035c4 <stdio_exit_handler+0x14>)
 80035b6:	f000 b869 	b.w	800368c <_fwalk_sglue>
 80035ba:	bf00      	nop
 80035bc:	20000060 	.word	0x20000060
 80035c0:	08003b81 	.word	0x08003b81
 80035c4:	2000006c 	.word	0x2000006c

080035c8 <cleanup_stdio>:
 80035c8:	6841      	ldr	r1, [r0, #4]
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <cleanup_stdio+0x34>)
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4299      	cmp	r1, r3
 80035d0:	4604      	mov	r4, r0
 80035d2:	d001      	beq.n	80035d8 <cleanup_stdio+0x10>
 80035d4:	f000 fad4 	bl	8003b80 <_fflush_r>
 80035d8:	68a1      	ldr	r1, [r4, #8]
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <cleanup_stdio+0x38>)
 80035dc:	4299      	cmp	r1, r3
 80035de:	d002      	beq.n	80035e6 <cleanup_stdio+0x1e>
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 facd 	bl	8003b80 <_fflush_r>
 80035e6:	68e1      	ldr	r1, [r4, #12]
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <cleanup_stdio+0x3c>)
 80035ea:	4299      	cmp	r1, r3
 80035ec:	d004      	beq.n	80035f8 <cleanup_stdio+0x30>
 80035ee:	4620      	mov	r0, r4
 80035f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f4:	f000 bac4 	b.w	8003b80 <_fflush_r>
 80035f8:	bd10      	pop	{r4, pc}
 80035fa:	bf00      	nop
 80035fc:	2000018c 	.word	0x2000018c
 8003600:	200001f4 	.word	0x200001f4
 8003604:	2000025c 	.word	0x2000025c

08003608 <global_stdio_init.part.0>:
 8003608:	b510      	push	{r4, lr}
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <global_stdio_init.part.0+0x30>)
 800360c:	4c0b      	ldr	r4, [pc, #44]	; (800363c <global_stdio_init.part.0+0x34>)
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <global_stdio_init.part.0+0x38>)
 8003610:	4620      	mov	r0, r4
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	2104      	movs	r1, #4
 8003616:	2200      	movs	r2, #0
 8003618:	f7ff ff94 	bl	8003544 <std>
 800361c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003620:	2201      	movs	r2, #1
 8003622:	2109      	movs	r1, #9
 8003624:	f7ff ff8e 	bl	8003544 <std>
 8003628:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800362c:	2202      	movs	r2, #2
 800362e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003632:	2112      	movs	r1, #18
 8003634:	f7ff bf86 	b.w	8003544 <std>
 8003638:	200002c4 	.word	0x200002c4
 800363c:	2000018c 	.word	0x2000018c
 8003640:	080035b1 	.word	0x080035b1

08003644 <__sfp_lock_acquire>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__sfp_lock_acquire+0x8>)
 8003646:	f000 b8fc 	b.w	8003842 <__retarget_lock_acquire_recursive>
 800364a:	bf00      	nop
 800364c:	200002cd 	.word	0x200002cd

08003650 <__sfp_lock_release>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__sfp_lock_release+0x8>)
 8003652:	f000 b8f7 	b.w	8003844 <__retarget_lock_release_recursive>
 8003656:	bf00      	nop
 8003658:	200002cd 	.word	0x200002cd

0800365c <__sinit>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
 8003660:	f7ff fff0 	bl	8003644 <__sfp_lock_acquire>
 8003664:	6a23      	ldr	r3, [r4, #32]
 8003666:	b11b      	cbz	r3, 8003670 <__sinit+0x14>
 8003668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366c:	f7ff bff0 	b.w	8003650 <__sfp_lock_release>
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__sinit+0x28>)
 8003672:	6223      	str	r3, [r4, #32]
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <__sinit+0x2c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f5      	bne.n	8003668 <__sinit+0xc>
 800367c:	f7ff ffc4 	bl	8003608 <global_stdio_init.part.0>
 8003680:	e7f2      	b.n	8003668 <__sinit+0xc>
 8003682:	bf00      	nop
 8003684:	080035c9 	.word	0x080035c9
 8003688:	200002c4 	.word	0x200002c4

0800368c <_fwalk_sglue>:
 800368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003690:	4607      	mov	r7, r0
 8003692:	4688      	mov	r8, r1
 8003694:	4614      	mov	r4, r2
 8003696:	2600      	movs	r6, #0
 8003698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800369c:	f1b9 0901 	subs.w	r9, r9, #1
 80036a0:	d505      	bpl.n	80036ae <_fwalk_sglue+0x22>
 80036a2:	6824      	ldr	r4, [r4, #0]
 80036a4:	2c00      	cmp	r4, #0
 80036a6:	d1f7      	bne.n	8003698 <_fwalk_sglue+0xc>
 80036a8:	4630      	mov	r0, r6
 80036aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ae:	89ab      	ldrh	r3, [r5, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d907      	bls.n	80036c4 <_fwalk_sglue+0x38>
 80036b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d003      	beq.n	80036c4 <_fwalk_sglue+0x38>
 80036bc:	4629      	mov	r1, r5
 80036be:	4638      	mov	r0, r7
 80036c0:	47c0      	blx	r8
 80036c2:	4306      	orrs	r6, r0
 80036c4:	3568      	adds	r5, #104	; 0x68
 80036c6:	e7e9      	b.n	800369c <_fwalk_sglue+0x10>

080036c8 <__sread>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	460c      	mov	r4, r1
 80036cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d0:	f000 f868 	bl	80037a4 <_read_r>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	bfab      	itete	ge
 80036d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036da:	89a3      	ldrhlt	r3, [r4, #12]
 80036dc:	181b      	addge	r3, r3, r0
 80036de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036e2:	bfac      	ite	ge
 80036e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80036e6:	81a3      	strhlt	r3, [r4, #12]
 80036e8:	bd10      	pop	{r4, pc}

080036ea <__swrite>:
 80036ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ee:	461f      	mov	r7, r3
 80036f0:	898b      	ldrh	r3, [r1, #12]
 80036f2:	4605      	mov	r5, r0
 80036f4:	05db      	lsls	r3, r3, #23
 80036f6:	460c      	mov	r4, r1
 80036f8:	4616      	mov	r6, r2
 80036fa:	d505      	bpl.n	8003708 <__swrite+0x1e>
 80036fc:	2302      	movs	r3, #2
 80036fe:	2200      	movs	r2, #0
 8003700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003704:	f000 f83c 	bl	8003780 <_lseek_r>
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	4632      	mov	r2, r6
 800370c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003710:	81a3      	strh	r3, [r4, #12]
 8003712:	4628      	mov	r0, r5
 8003714:	463b      	mov	r3, r7
 8003716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800371a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800371e:	f000 b853 	b.w	80037c8 <_write_r>

08003722 <__sseek>:
 8003722:	b510      	push	{r4, lr}
 8003724:	460c      	mov	r4, r1
 8003726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372a:	f000 f829 	bl	8003780 <_lseek_r>
 800372e:	1c43      	adds	r3, r0, #1
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	bf15      	itete	ne
 8003734:	6560      	strne	r0, [r4, #84]	; 0x54
 8003736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800373a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800373e:	81a3      	strheq	r3, [r4, #12]
 8003740:	bf18      	it	ne
 8003742:	81a3      	strhne	r3, [r4, #12]
 8003744:	bd10      	pop	{r4, pc}

08003746 <__sclose>:
 8003746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374a:	f000 b809 	b.w	8003760 <_close_r>

0800374e <memset>:
 800374e:	4603      	mov	r3, r0
 8003750:	4402      	add	r2, r0
 8003752:	4293      	cmp	r3, r2
 8003754:	d100      	bne.n	8003758 <memset+0xa>
 8003756:	4770      	bx	lr
 8003758:	f803 1b01 	strb.w	r1, [r3], #1
 800375c:	e7f9      	b.n	8003752 <memset+0x4>
	...

08003760 <_close_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	2300      	movs	r3, #0
 8003764:	4d05      	ldr	r5, [pc, #20]	; (800377c <_close_r+0x1c>)
 8003766:	4604      	mov	r4, r0
 8003768:	4608      	mov	r0, r1
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	f7fd fdd4 	bl	8001318 <_close>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_close_r+0x1a>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_close_r+0x1a>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	200002c8 	.word	0x200002c8

08003780 <_lseek_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	2200      	movs	r2, #0
 800378a:	4d05      	ldr	r5, [pc, #20]	; (80037a0 <_lseek_r+0x20>)
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fd fde6 	bl	8001360 <_lseek>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_lseek_r+0x1e>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	b103      	cbz	r3, 800379e <_lseek_r+0x1e>
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	200002c8 	.word	0x200002c8

080037a4 <_read_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	2200      	movs	r2, #0
 80037ae:	4d05      	ldr	r5, [pc, #20]	; (80037c4 <_read_r+0x20>)
 80037b0:	602a      	str	r2, [r5, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f7fd fd77 	bl	80012a6 <_read>
 80037b8:	1c43      	adds	r3, r0, #1
 80037ba:	d102      	bne.n	80037c2 <_read_r+0x1e>
 80037bc:	682b      	ldr	r3, [r5, #0]
 80037be:	b103      	cbz	r3, 80037c2 <_read_r+0x1e>
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	200002c8 	.word	0x200002c8

080037c8 <_write_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	2200      	movs	r2, #0
 80037d2:	4d05      	ldr	r5, [pc, #20]	; (80037e8 <_write_r+0x20>)
 80037d4:	602a      	str	r2, [r5, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7fd fd82 	bl	80012e0 <_write>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	d102      	bne.n	80037e6 <_write_r+0x1e>
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	b103      	cbz	r3, 80037e6 <_write_r+0x1e>
 80037e4:	6023      	str	r3, [r4, #0]
 80037e6:	bd38      	pop	{r3, r4, r5, pc}
 80037e8:	200002c8 	.word	0x200002c8

080037ec <__errno>:
 80037ec:	4b01      	ldr	r3, [pc, #4]	; (80037f4 <__errno+0x8>)
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	200000b8 	.word	0x200000b8

080037f8 <__libc_init_array>:
 80037f8:	b570      	push	{r4, r5, r6, lr}
 80037fa:	2600      	movs	r6, #0
 80037fc:	4d0c      	ldr	r5, [pc, #48]	; (8003830 <__libc_init_array+0x38>)
 80037fe:	4c0d      	ldr	r4, [pc, #52]	; (8003834 <__libc_init_array+0x3c>)
 8003800:	1b64      	subs	r4, r4, r5
 8003802:	10a4      	asrs	r4, r4, #2
 8003804:	42a6      	cmp	r6, r4
 8003806:	d109      	bne.n	800381c <__libc_init_array+0x24>
 8003808:	f000 fe4c 	bl	80044a4 <_init>
 800380c:	2600      	movs	r6, #0
 800380e:	4d0a      	ldr	r5, [pc, #40]	; (8003838 <__libc_init_array+0x40>)
 8003810:	4c0a      	ldr	r4, [pc, #40]	; (800383c <__libc_init_array+0x44>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	42a6      	cmp	r6, r4
 8003818:	d105      	bne.n	8003826 <__libc_init_array+0x2e>
 800381a:	bd70      	pop	{r4, r5, r6, pc}
 800381c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003820:	4798      	blx	r3
 8003822:	3601      	adds	r6, #1
 8003824:	e7ee      	b.n	8003804 <__libc_init_array+0xc>
 8003826:	f855 3b04 	ldr.w	r3, [r5], #4
 800382a:	4798      	blx	r3
 800382c:	3601      	adds	r6, #1
 800382e:	e7f2      	b.n	8003816 <__libc_init_array+0x1e>
 8003830:	080045cc 	.word	0x080045cc
 8003834:	080045cc 	.word	0x080045cc
 8003838:	080045cc 	.word	0x080045cc
 800383c:	080045d0 	.word	0x080045d0

08003840 <__retarget_lock_init_recursive>:
 8003840:	4770      	bx	lr

08003842 <__retarget_lock_acquire_recursive>:
 8003842:	4770      	bx	lr

08003844 <__retarget_lock_release_recursive>:
 8003844:	4770      	bx	lr
	...

08003848 <__assert_func>:
 8003848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800384a:	4614      	mov	r4, r2
 800384c:	461a      	mov	r2, r3
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <__assert_func+0x2c>)
 8003850:	4605      	mov	r5, r0
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68d8      	ldr	r0, [r3, #12]
 8003856:	b14c      	cbz	r4, 800386c <__assert_func+0x24>
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <__assert_func+0x30>)
 800385a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800385e:	9100      	str	r1, [sp, #0]
 8003860:	462b      	mov	r3, r5
 8003862:	4906      	ldr	r1, [pc, #24]	; (800387c <__assert_func+0x34>)
 8003864:	f000 f9b4 	bl	8003bd0 <fiprintf>
 8003868:	f000 f9d4 	bl	8003c14 <abort>
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__assert_func+0x38>)
 800386e:	461c      	mov	r4, r3
 8003870:	e7f3      	b.n	800385a <__assert_func+0x12>
 8003872:	bf00      	nop
 8003874:	200000b8 	.word	0x200000b8
 8003878:	08004553 	.word	0x08004553
 800387c:	08004560 	.word	0x08004560
 8003880:	0800458e 	.word	0x0800458e

08003884 <_free_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4605      	mov	r5, r0
 8003888:	2900      	cmp	r1, #0
 800388a:	d040      	beq.n	800390e <_free_r+0x8a>
 800388c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003890:	1f0c      	subs	r4, r1, #4
 8003892:	2b00      	cmp	r3, #0
 8003894:	bfb8      	it	lt
 8003896:	18e4      	addlt	r4, r4, r3
 8003898:	f000 f8e4 	bl	8003a64 <__malloc_lock>
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <_free_r+0x8c>)
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	b933      	cbnz	r3, 80038b0 <_free_r+0x2c>
 80038a2:	6063      	str	r3, [r4, #4]
 80038a4:	6014      	str	r4, [r2, #0]
 80038a6:	4628      	mov	r0, r5
 80038a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ac:	f000 b8e0 	b.w	8003a70 <__malloc_unlock>
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	d908      	bls.n	80038c6 <_free_r+0x42>
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	1821      	adds	r1, r4, r0
 80038b8:	428b      	cmp	r3, r1
 80038ba:	bf01      	itttt	eq
 80038bc:	6819      	ldreq	r1, [r3, #0]
 80038be:	685b      	ldreq	r3, [r3, #4]
 80038c0:	1809      	addeq	r1, r1, r0
 80038c2:	6021      	streq	r1, [r4, #0]
 80038c4:	e7ed      	b.n	80038a2 <_free_r+0x1e>
 80038c6:	461a      	mov	r2, r3
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	b10b      	cbz	r3, 80038d0 <_free_r+0x4c>
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	d9fa      	bls.n	80038c6 <_free_r+0x42>
 80038d0:	6811      	ldr	r1, [r2, #0]
 80038d2:	1850      	adds	r0, r2, r1
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d10b      	bne.n	80038f0 <_free_r+0x6c>
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	4401      	add	r1, r0
 80038dc:	1850      	adds	r0, r2, r1
 80038de:	4283      	cmp	r3, r0
 80038e0:	6011      	str	r1, [r2, #0]
 80038e2:	d1e0      	bne.n	80038a6 <_free_r+0x22>
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4408      	add	r0, r1
 80038ea:	6010      	str	r0, [r2, #0]
 80038ec:	6053      	str	r3, [r2, #4]
 80038ee:	e7da      	b.n	80038a6 <_free_r+0x22>
 80038f0:	d902      	bls.n	80038f8 <_free_r+0x74>
 80038f2:	230c      	movs	r3, #12
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	e7d6      	b.n	80038a6 <_free_r+0x22>
 80038f8:	6820      	ldr	r0, [r4, #0]
 80038fa:	1821      	adds	r1, r4, r0
 80038fc:	428b      	cmp	r3, r1
 80038fe:	bf01      	itttt	eq
 8003900:	6819      	ldreq	r1, [r3, #0]
 8003902:	685b      	ldreq	r3, [r3, #4]
 8003904:	1809      	addeq	r1, r1, r0
 8003906:	6021      	streq	r1, [r4, #0]
 8003908:	6063      	str	r3, [r4, #4]
 800390a:	6054      	str	r4, [r2, #4]
 800390c:	e7cb      	b.n	80038a6 <_free_r+0x22>
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	200002d0 	.word	0x200002d0

08003914 <malloc>:
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <malloc+0xc>)
 8003916:	4601      	mov	r1, r0
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	f000 b823 	b.w	8003964 <_malloc_r>
 800391e:	bf00      	nop
 8003920:	200000b8 	.word	0x200000b8

08003924 <sbrk_aligned>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4e0e      	ldr	r6, [pc, #56]	; (8003960 <sbrk_aligned+0x3c>)
 8003928:	460c      	mov	r4, r1
 800392a:	6831      	ldr	r1, [r6, #0]
 800392c:	4605      	mov	r5, r0
 800392e:	b911      	cbnz	r1, 8003936 <sbrk_aligned+0x12>
 8003930:	f000 f960 	bl	8003bf4 <_sbrk_r>
 8003934:	6030      	str	r0, [r6, #0]
 8003936:	4621      	mov	r1, r4
 8003938:	4628      	mov	r0, r5
 800393a:	f000 f95b 	bl	8003bf4 <_sbrk_r>
 800393e:	1c43      	adds	r3, r0, #1
 8003940:	d00a      	beq.n	8003958 <sbrk_aligned+0x34>
 8003942:	1cc4      	adds	r4, r0, #3
 8003944:	f024 0403 	bic.w	r4, r4, #3
 8003948:	42a0      	cmp	r0, r4
 800394a:	d007      	beq.n	800395c <sbrk_aligned+0x38>
 800394c:	1a21      	subs	r1, r4, r0
 800394e:	4628      	mov	r0, r5
 8003950:	f000 f950 	bl	8003bf4 <_sbrk_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d101      	bne.n	800395c <sbrk_aligned+0x38>
 8003958:	f04f 34ff 	mov.w	r4, #4294967295
 800395c:	4620      	mov	r0, r4
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	200002d4 	.word	0x200002d4

08003964 <_malloc_r>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	1ccd      	adds	r5, r1, #3
 800396a:	f025 0503 	bic.w	r5, r5, #3
 800396e:	3508      	adds	r5, #8
 8003970:	2d0c      	cmp	r5, #12
 8003972:	bf38      	it	cc
 8003974:	250c      	movcc	r5, #12
 8003976:	2d00      	cmp	r5, #0
 8003978:	4607      	mov	r7, r0
 800397a:	db01      	blt.n	8003980 <_malloc_r+0x1c>
 800397c:	42a9      	cmp	r1, r5
 800397e:	d905      	bls.n	800398c <_malloc_r+0x28>
 8003980:	230c      	movs	r3, #12
 8003982:	2600      	movs	r6, #0
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4630      	mov	r0, r6
 8003988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800398c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a60 <_malloc_r+0xfc>
 8003990:	f000 f868 	bl	8003a64 <__malloc_lock>
 8003994:	f8d8 3000 	ldr.w	r3, [r8]
 8003998:	461c      	mov	r4, r3
 800399a:	bb5c      	cbnz	r4, 80039f4 <_malloc_r+0x90>
 800399c:	4629      	mov	r1, r5
 800399e:	4638      	mov	r0, r7
 80039a0:	f7ff ffc0 	bl	8003924 <sbrk_aligned>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	4604      	mov	r4, r0
 80039a8:	d155      	bne.n	8003a56 <_malloc_r+0xf2>
 80039aa:	f8d8 4000 	ldr.w	r4, [r8]
 80039ae:	4626      	mov	r6, r4
 80039b0:	2e00      	cmp	r6, #0
 80039b2:	d145      	bne.n	8003a40 <_malloc_r+0xdc>
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	d048      	beq.n	8003a4a <_malloc_r+0xe6>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	4631      	mov	r1, r6
 80039bc:	4638      	mov	r0, r7
 80039be:	eb04 0903 	add.w	r9, r4, r3
 80039c2:	f000 f917 	bl	8003bf4 <_sbrk_r>
 80039c6:	4581      	cmp	r9, r0
 80039c8:	d13f      	bne.n	8003a4a <_malloc_r+0xe6>
 80039ca:	6821      	ldr	r1, [r4, #0]
 80039cc:	4638      	mov	r0, r7
 80039ce:	1a6d      	subs	r5, r5, r1
 80039d0:	4629      	mov	r1, r5
 80039d2:	f7ff ffa7 	bl	8003924 <sbrk_aligned>
 80039d6:	3001      	adds	r0, #1
 80039d8:	d037      	beq.n	8003a4a <_malloc_r+0xe6>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	442b      	add	r3, r5
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	f8d8 3000 	ldr.w	r3, [r8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d038      	beq.n	8003a5a <_malloc_r+0xf6>
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	42a2      	cmp	r2, r4
 80039ec:	d12b      	bne.n	8003a46 <_malloc_r+0xe2>
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	e00f      	b.n	8003a14 <_malloc_r+0xb0>
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	1b52      	subs	r2, r2, r5
 80039f8:	d41f      	bmi.n	8003a3a <_malloc_r+0xd6>
 80039fa:	2a0b      	cmp	r2, #11
 80039fc:	d917      	bls.n	8003a2e <_malloc_r+0xca>
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	6025      	str	r5, [r4, #0]
 8003a04:	bf18      	it	ne
 8003a06:	6059      	strne	r1, [r3, #4]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	bf08      	it	eq
 8003a0c:	f8c8 1000 	streq.w	r1, [r8]
 8003a10:	5162      	str	r2, [r4, r5]
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	4638      	mov	r0, r7
 8003a16:	f104 060b 	add.w	r6, r4, #11
 8003a1a:	f000 f829 	bl	8003a70 <__malloc_unlock>
 8003a1e:	f026 0607 	bic.w	r6, r6, #7
 8003a22:	1d23      	adds	r3, r4, #4
 8003a24:	1af2      	subs	r2, r6, r3
 8003a26:	d0ae      	beq.n	8003986 <_malloc_r+0x22>
 8003a28:	1b9b      	subs	r3, r3, r6
 8003a2a:	50a3      	str	r3, [r4, r2]
 8003a2c:	e7ab      	b.n	8003986 <_malloc_r+0x22>
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	6862      	ldr	r2, [r4, #4]
 8003a32:	d1dd      	bne.n	80039f0 <_malloc_r+0x8c>
 8003a34:	f8c8 2000 	str.w	r2, [r8]
 8003a38:	e7ec      	b.n	8003a14 <_malloc_r+0xb0>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7ac      	b.n	800399a <_malloc_r+0x36>
 8003a40:	4634      	mov	r4, r6
 8003a42:	6876      	ldr	r6, [r6, #4]
 8003a44:	e7b4      	b.n	80039b0 <_malloc_r+0x4c>
 8003a46:	4613      	mov	r3, r2
 8003a48:	e7cc      	b.n	80039e4 <_malloc_r+0x80>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	f000 f80e 	bl	8003a70 <__malloc_unlock>
 8003a54:	e797      	b.n	8003986 <_malloc_r+0x22>
 8003a56:	6025      	str	r5, [r4, #0]
 8003a58:	e7dc      	b.n	8003a14 <_malloc_r+0xb0>
 8003a5a:	605b      	str	r3, [r3, #4]
 8003a5c:	deff      	udf	#255	; 0xff
 8003a5e:	bf00      	nop
 8003a60:	200002d0 	.word	0x200002d0

08003a64 <__malloc_lock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	; (8003a6c <__malloc_lock+0x8>)
 8003a66:	f7ff beec 	b.w	8003842 <__retarget_lock_acquire_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	200002cc 	.word	0x200002cc

08003a70 <__malloc_unlock>:
 8003a70:	4801      	ldr	r0, [pc, #4]	; (8003a78 <__malloc_unlock+0x8>)
 8003a72:	f7ff bee7 	b.w	8003844 <__retarget_lock_release_recursive>
 8003a76:	bf00      	nop
 8003a78:	200002cc 	.word	0x200002cc

08003a7c <__sflush_r>:
 8003a7c:	898a      	ldrh	r2, [r1, #12]
 8003a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a80:	4605      	mov	r5, r0
 8003a82:	0710      	lsls	r0, r2, #28
 8003a84:	460c      	mov	r4, r1
 8003a86:	d457      	bmi.n	8003b38 <__sflush_r+0xbc>
 8003a88:	684b      	ldr	r3, [r1, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	dc04      	bgt.n	8003a98 <__sflush_r+0x1c>
 8003a8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dc01      	bgt.n	8003a98 <__sflush_r+0x1c>
 8003a94:	2000      	movs	r0, #0
 8003a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a9a:	2e00      	cmp	r6, #0
 8003a9c:	d0fa      	beq.n	8003a94 <__sflush_r+0x18>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003aa4:	682f      	ldr	r7, [r5, #0]
 8003aa6:	6a21      	ldr	r1, [r4, #32]
 8003aa8:	602b      	str	r3, [r5, #0]
 8003aaa:	d032      	beq.n	8003b12 <__sflush_r+0x96>
 8003aac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	075a      	lsls	r2, r3, #29
 8003ab2:	d505      	bpl.n	8003ac0 <__sflush_r+0x44>
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	1ac0      	subs	r0, r0, r3
 8003ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003aba:	b10b      	cbz	r3, 8003ac0 <__sflush_r+0x44>
 8003abc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003abe:	1ac0      	subs	r0, r0, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	6a21      	ldr	r1, [r4, #32]
 8003aca:	47b0      	blx	r6
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	89a3      	ldrh	r3, [r4, #12]
 8003ad0:	d106      	bne.n	8003ae0 <__sflush_r+0x64>
 8003ad2:	6829      	ldr	r1, [r5, #0]
 8003ad4:	291d      	cmp	r1, #29
 8003ad6:	d82b      	bhi.n	8003b30 <__sflush_r+0xb4>
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <__sflush_r+0x100>)
 8003ada:	410a      	asrs	r2, r1
 8003adc:	07d6      	lsls	r6, r2, #31
 8003ade:	d427      	bmi.n	8003b30 <__sflush_r+0xb4>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6062      	str	r2, [r4, #4]
 8003ae4:	6922      	ldr	r2, [r4, #16]
 8003ae6:	04d9      	lsls	r1, r3, #19
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	d504      	bpl.n	8003af6 <__sflush_r+0x7a>
 8003aec:	1c42      	adds	r2, r0, #1
 8003aee:	d101      	bne.n	8003af4 <__sflush_r+0x78>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b903      	cbnz	r3, 8003af6 <__sflush_r+0x7a>
 8003af4:	6560      	str	r0, [r4, #84]	; 0x54
 8003af6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003af8:	602f      	str	r7, [r5, #0]
 8003afa:	2900      	cmp	r1, #0
 8003afc:	d0ca      	beq.n	8003a94 <__sflush_r+0x18>
 8003afe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b02:	4299      	cmp	r1, r3
 8003b04:	d002      	beq.n	8003b0c <__sflush_r+0x90>
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7ff febc 	bl	8003884 <_free_r>
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b10:	e7c1      	b.n	8003a96 <__sflush_r+0x1a>
 8003b12:	2301      	movs	r3, #1
 8003b14:	4628      	mov	r0, r5
 8003b16:	47b0      	blx	r6
 8003b18:	1c41      	adds	r1, r0, #1
 8003b1a:	d1c8      	bne.n	8003aae <__sflush_r+0x32>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0c5      	beq.n	8003aae <__sflush_r+0x32>
 8003b22:	2b1d      	cmp	r3, #29
 8003b24:	d001      	beq.n	8003b2a <__sflush_r+0xae>
 8003b26:	2b16      	cmp	r3, #22
 8003b28:	d101      	bne.n	8003b2e <__sflush_r+0xb2>
 8003b2a:	602f      	str	r7, [r5, #0]
 8003b2c:	e7b2      	b.n	8003a94 <__sflush_r+0x18>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	e7ae      	b.n	8003a96 <__sflush_r+0x1a>
 8003b38:	690f      	ldr	r7, [r1, #16]
 8003b3a:	2f00      	cmp	r7, #0
 8003b3c:	d0aa      	beq.n	8003a94 <__sflush_r+0x18>
 8003b3e:	0793      	lsls	r3, r2, #30
 8003b40:	bf18      	it	ne
 8003b42:	2300      	movne	r3, #0
 8003b44:	680e      	ldr	r6, [r1, #0]
 8003b46:	bf08      	it	eq
 8003b48:	694b      	ldreq	r3, [r1, #20]
 8003b4a:	1bf6      	subs	r6, r6, r7
 8003b4c:	600f      	str	r7, [r1, #0]
 8003b4e:	608b      	str	r3, [r1, #8]
 8003b50:	2e00      	cmp	r6, #0
 8003b52:	dd9f      	ble.n	8003a94 <__sflush_r+0x18>
 8003b54:	4633      	mov	r3, r6
 8003b56:	463a      	mov	r2, r7
 8003b58:	4628      	mov	r0, r5
 8003b5a:	6a21      	ldr	r1, [r4, #32]
 8003b5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003b60:	47e0      	blx	ip
 8003b62:	2800      	cmp	r0, #0
 8003b64:	dc06      	bgt.n	8003b74 <__sflush_r+0xf8>
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b70:	81a3      	strh	r3, [r4, #12]
 8003b72:	e790      	b.n	8003a96 <__sflush_r+0x1a>
 8003b74:	4407      	add	r7, r0
 8003b76:	1a36      	subs	r6, r6, r0
 8003b78:	e7ea      	b.n	8003b50 <__sflush_r+0xd4>
 8003b7a:	bf00      	nop
 8003b7c:	dfbffffe 	.word	0xdfbffffe

08003b80 <_fflush_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	690b      	ldr	r3, [r1, #16]
 8003b84:	4605      	mov	r5, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b913      	cbnz	r3, 8003b90 <_fflush_r+0x10>
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	b118      	cbz	r0, 8003b9a <_fflush_r+0x1a>
 8003b92:	6a03      	ldr	r3, [r0, #32]
 8003b94:	b90b      	cbnz	r3, 8003b9a <_fflush_r+0x1a>
 8003b96:	f7ff fd61 	bl	800365c <__sinit>
 8003b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f3      	beq.n	8003b8a <_fflush_r+0xa>
 8003ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ba4:	07d0      	lsls	r0, r2, #31
 8003ba6:	d404      	bmi.n	8003bb2 <_fflush_r+0x32>
 8003ba8:	0599      	lsls	r1, r3, #22
 8003baa:	d402      	bmi.n	8003bb2 <_fflush_r+0x32>
 8003bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bae:	f7ff fe48 	bl	8003842 <__retarget_lock_acquire_recursive>
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	f7ff ff61 	bl	8003a7c <__sflush_r>
 8003bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	07da      	lsls	r2, r3, #31
 8003bc0:	d4e4      	bmi.n	8003b8c <_fflush_r+0xc>
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	059b      	lsls	r3, r3, #22
 8003bc6:	d4e1      	bmi.n	8003b8c <_fflush_r+0xc>
 8003bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bca:	f7ff fe3b 	bl	8003844 <__retarget_lock_release_recursive>
 8003bce:	e7dd      	b.n	8003b8c <_fflush_r+0xc>

08003bd0 <fiprintf>:
 8003bd0:	b40e      	push	{r1, r2, r3}
 8003bd2:	b503      	push	{r0, r1, lr}
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	ab03      	add	r3, sp, #12
 8003bd8:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <fiprintf+0x20>)
 8003bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bde:	6800      	ldr	r0, [r0, #0]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	f000 f845 	bl	8003c70 <_vfiprintf_r>
 8003be6:	b002      	add	sp, #8
 8003be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bec:	b003      	add	sp, #12
 8003bee:	4770      	bx	lr
 8003bf0:	200000b8 	.word	0x200000b8

08003bf4 <_sbrk_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4d05      	ldr	r5, [pc, #20]	; (8003c10 <_sbrk_r+0x1c>)
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fd fbba 	bl	8001378 <_sbrk>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_sbrk_r+0x1a>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_sbrk_r+0x1a>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	200002c8 	.word	0x200002c8

08003c14 <abort>:
 8003c14:	2006      	movs	r0, #6
 8003c16:	b508      	push	{r3, lr}
 8003c18:	f000 fb96 	bl	8004348 <raise>
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7fd fb38 	bl	8001292 <_exit>

08003c22 <__sfputc_r>:
 8003c22:	6893      	ldr	r3, [r2, #8]
 8003c24:	b410      	push	{r4}
 8003c26:	3b01      	subs	r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	6093      	str	r3, [r2, #8]
 8003c2c:	da07      	bge.n	8003c3e <__sfputc_r+0x1c>
 8003c2e:	6994      	ldr	r4, [r2, #24]
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	db01      	blt.n	8003c38 <__sfputc_r+0x16>
 8003c34:	290a      	cmp	r1, #10
 8003c36:	d102      	bne.n	8003c3e <__sfputc_r+0x1c>
 8003c38:	bc10      	pop	{r4}
 8003c3a:	f000 bac7 	b.w	80041cc <__swbuf_r>
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	1c58      	adds	r0, r3, #1
 8003c42:	6010      	str	r0, [r2, #0]
 8003c44:	7019      	strb	r1, [r3, #0]
 8003c46:	4608      	mov	r0, r1
 8003c48:	bc10      	pop	{r4}
 8003c4a:	4770      	bx	lr

08003c4c <__sfputs_r>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	4606      	mov	r6, r0
 8003c50:	460f      	mov	r7, r1
 8003c52:	4614      	mov	r4, r2
 8003c54:	18d5      	adds	r5, r2, r3
 8003c56:	42ac      	cmp	r4, r5
 8003c58:	d101      	bne.n	8003c5e <__sfputs_r+0x12>
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	e007      	b.n	8003c6e <__sfputs_r+0x22>
 8003c5e:	463a      	mov	r2, r7
 8003c60:	4630      	mov	r0, r6
 8003c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c66:	f7ff ffdc 	bl	8003c22 <__sfputc_r>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d1f3      	bne.n	8003c56 <__sfputs_r+0xa>
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c70 <_vfiprintf_r>:
 8003c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c74:	460d      	mov	r5, r1
 8003c76:	4614      	mov	r4, r2
 8003c78:	4698      	mov	r8, r3
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	b09d      	sub	sp, #116	; 0x74
 8003c7e:	b118      	cbz	r0, 8003c88 <_vfiprintf_r+0x18>
 8003c80:	6a03      	ldr	r3, [r0, #32]
 8003c82:	b90b      	cbnz	r3, 8003c88 <_vfiprintf_r+0x18>
 8003c84:	f7ff fcea 	bl	800365c <__sinit>
 8003c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c8a:	07d9      	lsls	r1, r3, #31
 8003c8c:	d405      	bmi.n	8003c9a <_vfiprintf_r+0x2a>
 8003c8e:	89ab      	ldrh	r3, [r5, #12]
 8003c90:	059a      	lsls	r2, r3, #22
 8003c92:	d402      	bmi.n	8003c9a <_vfiprintf_r+0x2a>
 8003c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c96:	f7ff fdd4 	bl	8003842 <__retarget_lock_acquire_recursive>
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	071b      	lsls	r3, r3, #28
 8003c9e:	d501      	bpl.n	8003ca4 <_vfiprintf_r+0x34>
 8003ca0:	692b      	ldr	r3, [r5, #16]
 8003ca2:	b99b      	cbnz	r3, 8003ccc <_vfiprintf_r+0x5c>
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f000 face 	bl	8004248 <__swsetup_r>
 8003cac:	b170      	cbz	r0, 8003ccc <_vfiprintf_r+0x5c>
 8003cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cb0:	07dc      	lsls	r4, r3, #31
 8003cb2:	d504      	bpl.n	8003cbe <_vfiprintf_r+0x4e>
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	b01d      	add	sp, #116	; 0x74
 8003cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbe:	89ab      	ldrh	r3, [r5, #12]
 8003cc0:	0598      	lsls	r0, r3, #22
 8003cc2:	d4f7      	bmi.n	8003cb4 <_vfiprintf_r+0x44>
 8003cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cc6:	f7ff fdbd 	bl	8003844 <__retarget_lock_release_recursive>
 8003cca:	e7f3      	b.n	8003cb4 <_vfiprintf_r+0x44>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cd6:	2330      	movs	r3, #48	; 0x30
 8003cd8:	f04f 0901 	mov.w	r9, #1
 8003cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003e90 <_vfiprintf_r+0x220>
 8003ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ce8:	4623      	mov	r3, r4
 8003cea:	469a      	mov	sl, r3
 8003cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_vfiprintf_r+0x86>
 8003cf2:	2a25      	cmp	r2, #37	; 0x25
 8003cf4:	d1f9      	bne.n	8003cea <_vfiprintf_r+0x7a>
 8003cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8003cfa:	d00b      	beq.n	8003d14 <_vfiprintf_r+0xa4>
 8003cfc:	465b      	mov	r3, fp
 8003cfe:	4622      	mov	r2, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	4630      	mov	r0, r6
 8003d04:	f7ff ffa2 	bl	8003c4c <__sfputs_r>
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f000 80a9 	beq.w	8003e60 <_vfiprintf_r+0x1f0>
 8003d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d10:	445a      	add	r2, fp
 8003d12:	9209      	str	r2, [sp, #36]	; 0x24
 8003d14:	f89a 3000 	ldrb.w	r3, [sl]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a1 	beq.w	8003e60 <_vfiprintf_r+0x1f0>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d28:	f10a 0a01 	add.w	sl, sl, #1
 8003d2c:	9304      	str	r3, [sp, #16]
 8003d2e:	9307      	str	r3, [sp, #28]
 8003d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d34:	931a      	str	r3, [sp, #104]	; 0x68
 8003d36:	4654      	mov	r4, sl
 8003d38:	2205      	movs	r2, #5
 8003d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d3e:	4854      	ldr	r0, [pc, #336]	; (8003e90 <_vfiprintf_r+0x220>)
 8003d40:	f000 fb1e 	bl	8004380 <memchr>
 8003d44:	9a04      	ldr	r2, [sp, #16]
 8003d46:	b9d8      	cbnz	r0, 8003d80 <_vfiprintf_r+0x110>
 8003d48:	06d1      	lsls	r1, r2, #27
 8003d4a:	bf44      	itt	mi
 8003d4c:	2320      	movmi	r3, #32
 8003d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d52:	0713      	lsls	r3, r2, #28
 8003d54:	bf44      	itt	mi
 8003d56:	232b      	movmi	r3, #43	; 0x2b
 8003d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d60:	2b2a      	cmp	r3, #42	; 0x2a
 8003d62:	d015      	beq.n	8003d90 <_vfiprintf_r+0x120>
 8003d64:	4654      	mov	r4, sl
 8003d66:	2000      	movs	r0, #0
 8003d68:	f04f 0c0a 	mov.w	ip, #10
 8003d6c:	9a07      	ldr	r2, [sp, #28]
 8003d6e:	4621      	mov	r1, r4
 8003d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d74:	3b30      	subs	r3, #48	; 0x30
 8003d76:	2b09      	cmp	r3, #9
 8003d78:	d94d      	bls.n	8003e16 <_vfiprintf_r+0x1a6>
 8003d7a:	b1b0      	cbz	r0, 8003daa <_vfiprintf_r+0x13a>
 8003d7c:	9207      	str	r2, [sp, #28]
 8003d7e:	e014      	b.n	8003daa <_vfiprintf_r+0x13a>
 8003d80:	eba0 0308 	sub.w	r3, r0, r8
 8003d84:	fa09 f303 	lsl.w	r3, r9, r3
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	46a2      	mov	sl, r4
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	e7d2      	b.n	8003d36 <_vfiprintf_r+0xc6>
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	1d19      	adds	r1, r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	9103      	str	r1, [sp, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bfbb      	ittet	lt
 8003d9c:	425b      	neglt	r3, r3
 8003d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8003da2:	9307      	strge	r3, [sp, #28]
 8003da4:	9307      	strlt	r3, [sp, #28]
 8003da6:	bfb8      	it	lt
 8003da8:	9204      	strlt	r2, [sp, #16]
 8003daa:	7823      	ldrb	r3, [r4, #0]
 8003dac:	2b2e      	cmp	r3, #46	; 0x2e
 8003dae:	d10c      	bne.n	8003dca <_vfiprintf_r+0x15a>
 8003db0:	7863      	ldrb	r3, [r4, #1]
 8003db2:	2b2a      	cmp	r3, #42	; 0x2a
 8003db4:	d134      	bne.n	8003e20 <_vfiprintf_r+0x1b0>
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	3402      	adds	r4, #2
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9203      	str	r2, [sp, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bfb8      	it	lt
 8003dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e94 <_vfiprintf_r+0x224>
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	7821      	ldrb	r1, [r4, #0]
 8003dd4:	f000 fad4 	bl	8004380 <memchr>
 8003dd8:	b138      	cbz	r0, 8003dea <_vfiprintf_r+0x17a>
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	9b04      	ldr	r3, [sp, #16]
 8003dde:	eba0 000a 	sub.w	r0, r0, sl
 8003de2:	4082      	lsls	r2, r0
 8003de4:	4313      	orrs	r3, r2
 8003de6:	3401      	adds	r4, #1
 8003de8:	9304      	str	r3, [sp, #16]
 8003dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dee:	2206      	movs	r2, #6
 8003df0:	4829      	ldr	r0, [pc, #164]	; (8003e98 <_vfiprintf_r+0x228>)
 8003df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003df6:	f000 fac3 	bl	8004380 <memchr>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d03f      	beq.n	8003e7e <_vfiprintf_r+0x20e>
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <_vfiprintf_r+0x22c>)
 8003e00:	bb1b      	cbnz	r3, 8003e4a <_vfiprintf_r+0x1da>
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	3307      	adds	r3, #7
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	9303      	str	r3, [sp, #12]
 8003e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e10:	443b      	add	r3, r7
 8003e12:	9309      	str	r3, [sp, #36]	; 0x24
 8003e14:	e768      	b.n	8003ce8 <_vfiprintf_r+0x78>
 8003e16:	460c      	mov	r4, r1
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e1e:	e7a6      	b.n	8003d6e <_vfiprintf_r+0xfe>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f04f 0c0a 	mov.w	ip, #10
 8003e26:	4619      	mov	r1, r3
 8003e28:	3401      	adds	r4, #1
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e32:	3a30      	subs	r2, #48	; 0x30
 8003e34:	2a09      	cmp	r2, #9
 8003e36:	d903      	bls.n	8003e40 <_vfiprintf_r+0x1d0>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0c6      	beq.n	8003dca <_vfiprintf_r+0x15a>
 8003e3c:	9105      	str	r1, [sp, #20]
 8003e3e:	e7c4      	b.n	8003dca <_vfiprintf_r+0x15a>
 8003e40:	4604      	mov	r4, r0
 8003e42:	2301      	movs	r3, #1
 8003e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e48:	e7f0      	b.n	8003e2c <_vfiprintf_r+0x1bc>
 8003e4a:	ab03      	add	r3, sp, #12
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	462a      	mov	r2, r5
 8003e50:	4630      	mov	r0, r6
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <_vfiprintf_r+0x230>)
 8003e54:	a904      	add	r1, sp, #16
 8003e56:	f3af 8000 	nop.w
 8003e5a:	4607      	mov	r7, r0
 8003e5c:	1c78      	adds	r0, r7, #1
 8003e5e:	d1d6      	bne.n	8003e0e <_vfiprintf_r+0x19e>
 8003e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e62:	07d9      	lsls	r1, r3, #31
 8003e64:	d405      	bmi.n	8003e72 <_vfiprintf_r+0x202>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	059a      	lsls	r2, r3, #22
 8003e6a:	d402      	bmi.n	8003e72 <_vfiprintf_r+0x202>
 8003e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e6e:	f7ff fce9 	bl	8003844 <__retarget_lock_release_recursive>
 8003e72:	89ab      	ldrh	r3, [r5, #12]
 8003e74:	065b      	lsls	r3, r3, #25
 8003e76:	f53f af1d 	bmi.w	8003cb4 <_vfiprintf_r+0x44>
 8003e7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e7c:	e71c      	b.n	8003cb8 <_vfiprintf_r+0x48>
 8003e7e:	ab03      	add	r3, sp, #12
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	462a      	mov	r2, r5
 8003e84:	4630      	mov	r0, r6
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <_vfiprintf_r+0x230>)
 8003e88:	a904      	add	r1, sp, #16
 8003e8a:	f000 f87d 	bl	8003f88 <_printf_i>
 8003e8e:	e7e4      	b.n	8003e5a <_vfiprintf_r+0x1ea>
 8003e90:	0800458f 	.word	0x0800458f
 8003e94:	08004595 	.word	0x08004595
 8003e98:	08004599 	.word	0x08004599
 8003e9c:	00000000 	.word	0x00000000
 8003ea0:	08003c4d 	.word	0x08003c4d

08003ea4 <_printf_common>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	4699      	mov	r9, r3
 8003eac:	688a      	ldr	r2, [r1, #8]
 8003eae:	690b      	ldr	r3, [r1, #16]
 8003eb0:	4607      	mov	r7, r0
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	bfb8      	it	lt
 8003eb6:	4613      	movlt	r3, r2
 8003eb8:	6033      	str	r3, [r6, #0]
 8003eba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ec4:	b10a      	cbz	r2, 8003eca <_printf_common+0x26>
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	6033      	str	r3, [r6, #0]
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	0699      	lsls	r1, r3, #26
 8003ece:	bf42      	ittt	mi
 8003ed0:	6833      	ldrmi	r3, [r6, #0]
 8003ed2:	3302      	addmi	r3, #2
 8003ed4:	6033      	strmi	r3, [r6, #0]
 8003ed6:	6825      	ldr	r5, [r4, #0]
 8003ed8:	f015 0506 	ands.w	r5, r5, #6
 8003edc:	d106      	bne.n	8003eec <_printf_common+0x48>
 8003ede:	f104 0a19 	add.w	sl, r4, #25
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	6832      	ldr	r2, [r6, #0]
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	42ab      	cmp	r3, r5
 8003eea:	dc2b      	bgt.n	8003f44 <_printf_common+0xa0>
 8003eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ef0:	1e13      	subs	r3, r2, #0
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	bf18      	it	ne
 8003ef6:	2301      	movne	r3, #1
 8003ef8:	0692      	lsls	r2, r2, #26
 8003efa:	d430      	bmi.n	8003f5e <_printf_common+0xba>
 8003efc:	4649      	mov	r1, r9
 8003efe:	4638      	mov	r0, r7
 8003f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f04:	47c0      	blx	r8
 8003f06:	3001      	adds	r0, #1
 8003f08:	d023      	beq.n	8003f52 <_printf_common+0xae>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	bf14      	ite	ne
 8003f16:	2500      	movne	r5, #0
 8003f18:	6833      	ldreq	r3, [r6, #0]
 8003f1a:	f04f 0600 	mov.w	r6, #0
 8003f1e:	bf08      	it	eq
 8003f20:	68e5      	ldreq	r5, [r4, #12]
 8003f22:	f104 041a 	add.w	r4, r4, #26
 8003f26:	bf08      	it	eq
 8003f28:	1aed      	subeq	r5, r5, r3
 8003f2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f2e:	bf08      	it	eq
 8003f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f34:	4293      	cmp	r3, r2
 8003f36:	bfc4      	itt	gt
 8003f38:	1a9b      	subgt	r3, r3, r2
 8003f3a:	18ed      	addgt	r5, r5, r3
 8003f3c:	42b5      	cmp	r5, r6
 8003f3e:	d11a      	bne.n	8003f76 <_printf_common+0xd2>
 8003f40:	2000      	movs	r0, #0
 8003f42:	e008      	b.n	8003f56 <_printf_common+0xb2>
 8003f44:	2301      	movs	r3, #1
 8003f46:	4652      	mov	r2, sl
 8003f48:	4649      	mov	r1, r9
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	47c0      	blx	r8
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d103      	bne.n	8003f5a <_printf_common+0xb6>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5a:	3501      	adds	r5, #1
 8003f5c:	e7c1      	b.n	8003ee2 <_printf_common+0x3e>
 8003f5e:	2030      	movs	r0, #48	; 0x30
 8003f60:	18e1      	adds	r1, r4, r3
 8003f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f6c:	4422      	add	r2, r4
 8003f6e:	3302      	adds	r3, #2
 8003f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f74:	e7c2      	b.n	8003efc <_printf_common+0x58>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4622      	mov	r2, r4
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	4638      	mov	r0, r7
 8003f7e:	47c0      	blx	r8
 8003f80:	3001      	adds	r0, #1
 8003f82:	d0e6      	beq.n	8003f52 <_printf_common+0xae>
 8003f84:	3601      	adds	r6, #1
 8003f86:	e7d9      	b.n	8003f3c <_printf_common+0x98>

08003f88 <_printf_i>:
 8003f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	7e0f      	ldrb	r7, [r1, #24]
 8003f8e:	4691      	mov	r9, r2
 8003f90:	2f78      	cmp	r7, #120	; 0x78
 8003f92:	4680      	mov	r8, r0
 8003f94:	460c      	mov	r4, r1
 8003f96:	469a      	mov	sl, r3
 8003f98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f9e:	d807      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fa0:	2f62      	cmp	r7, #98	; 0x62
 8003fa2:	d80a      	bhi.n	8003fba <_printf_i+0x32>
 8003fa4:	2f00      	cmp	r7, #0
 8003fa6:	f000 80d5 	beq.w	8004154 <_printf_i+0x1cc>
 8003faa:	2f58      	cmp	r7, #88	; 0x58
 8003fac:	f000 80c1 	beq.w	8004132 <_printf_i+0x1aa>
 8003fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fb8:	e03a      	b.n	8004030 <_printf_i+0xa8>
 8003fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fbe:	2b15      	cmp	r3, #21
 8003fc0:	d8f6      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fc2:	a101      	add	r1, pc, #4	; (adr r1, 8003fc8 <_printf_i+0x40>)
 8003fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	08003fb1 	.word	0x08003fb1
 8003fd4:	08003fb1 	.word	0x08003fb1
 8003fd8:	08003fb1 	.word	0x08003fb1
 8003fdc:	08003fb1 	.word	0x08003fb1
 8003fe0:	08004035 	.word	0x08004035
 8003fe4:	08003fb1 	.word	0x08003fb1
 8003fe8:	08003fb1 	.word	0x08003fb1
 8003fec:	08003fb1 	.word	0x08003fb1
 8003ff0:	08003fb1 	.word	0x08003fb1
 8003ff4:	0800413b 	.word	0x0800413b
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	080040f5 	.word	0x080040f5
 8004000:	08003fb1 	.word	0x08003fb1
 8004004:	08003fb1 	.word	0x08003fb1
 8004008:	0800415d 	.word	0x0800415d
 800400c:	08003fb1 	.word	0x08003fb1
 8004010:	08004061 	.word	0x08004061
 8004014:	08003fb1 	.word	0x08003fb1
 8004018:	08003fb1 	.word	0x08003fb1
 800401c:	080040fd 	.word	0x080040fd
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	602a      	str	r2, [r5, #0]
 8004028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800402c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004030:	2301      	movs	r3, #1
 8004032:	e0a0      	b.n	8004176 <_printf_i+0x1ee>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	682b      	ldr	r3, [r5, #0]
 8004038:	0607      	lsls	r7, r0, #24
 800403a:	f103 0104 	add.w	r1, r3, #4
 800403e:	6029      	str	r1, [r5, #0]
 8004040:	d501      	bpl.n	8004046 <_printf_i+0xbe>
 8004042:	681e      	ldr	r6, [r3, #0]
 8004044:	e003      	b.n	800404e <_printf_i+0xc6>
 8004046:	0646      	lsls	r6, r0, #25
 8004048:	d5fb      	bpl.n	8004042 <_printf_i+0xba>
 800404a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800404e:	2e00      	cmp	r6, #0
 8004050:	da03      	bge.n	800405a <_printf_i+0xd2>
 8004052:	232d      	movs	r3, #45	; 0x2d
 8004054:	4276      	negs	r6, r6
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405a:	230a      	movs	r3, #10
 800405c:	4859      	ldr	r0, [pc, #356]	; (80041c4 <_printf_i+0x23c>)
 800405e:	e012      	b.n	8004086 <_printf_i+0xfe>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	6820      	ldr	r0, [r4, #0]
 8004064:	1d19      	adds	r1, r3, #4
 8004066:	6029      	str	r1, [r5, #0]
 8004068:	0605      	lsls	r5, r0, #24
 800406a:	d501      	bpl.n	8004070 <_printf_i+0xe8>
 800406c:	681e      	ldr	r6, [r3, #0]
 800406e:	e002      	b.n	8004076 <_printf_i+0xee>
 8004070:	0641      	lsls	r1, r0, #25
 8004072:	d5fb      	bpl.n	800406c <_printf_i+0xe4>
 8004074:	881e      	ldrh	r6, [r3, #0]
 8004076:	2f6f      	cmp	r7, #111	; 0x6f
 8004078:	bf0c      	ite	eq
 800407a:	2308      	moveq	r3, #8
 800407c:	230a      	movne	r3, #10
 800407e:	4851      	ldr	r0, [pc, #324]	; (80041c4 <_printf_i+0x23c>)
 8004080:	2100      	movs	r1, #0
 8004082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004086:	6865      	ldr	r5, [r4, #4]
 8004088:	2d00      	cmp	r5, #0
 800408a:	bfa8      	it	ge
 800408c:	6821      	ldrge	r1, [r4, #0]
 800408e:	60a5      	str	r5, [r4, #8]
 8004090:	bfa4      	itt	ge
 8004092:	f021 0104 	bicge.w	r1, r1, #4
 8004096:	6021      	strge	r1, [r4, #0]
 8004098:	b90e      	cbnz	r6, 800409e <_printf_i+0x116>
 800409a:	2d00      	cmp	r5, #0
 800409c:	d04b      	beq.n	8004136 <_printf_i+0x1ae>
 800409e:	4615      	mov	r5, r2
 80040a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040a4:	fb03 6711 	mls	r7, r3, r1, r6
 80040a8:	5dc7      	ldrb	r7, [r0, r7]
 80040aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ae:	4637      	mov	r7, r6
 80040b0:	42bb      	cmp	r3, r7
 80040b2:	460e      	mov	r6, r1
 80040b4:	d9f4      	bls.n	80040a0 <_printf_i+0x118>
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d10b      	bne.n	80040d2 <_printf_i+0x14a>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	07de      	lsls	r6, r3, #31
 80040be:	d508      	bpl.n	80040d2 <_printf_i+0x14a>
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	6861      	ldr	r1, [r4, #4]
 80040c4:	4299      	cmp	r1, r3
 80040c6:	bfde      	ittt	le
 80040c8:	2330      	movle	r3, #48	; 0x30
 80040ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040d2:	1b52      	subs	r2, r2, r5
 80040d4:	6122      	str	r2, [r4, #16]
 80040d6:	464b      	mov	r3, r9
 80040d8:	4621      	mov	r1, r4
 80040da:	4640      	mov	r0, r8
 80040dc:	f8cd a000 	str.w	sl, [sp]
 80040e0:	aa03      	add	r2, sp, #12
 80040e2:	f7ff fedf 	bl	8003ea4 <_printf_common>
 80040e6:	3001      	adds	r0, #1
 80040e8:	d14a      	bne.n	8004180 <_printf_i+0x1f8>
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295
 80040ee:	b004      	add	sp, #16
 80040f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	f043 0320 	orr.w	r3, r3, #32
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	2778      	movs	r7, #120	; 0x78
 80040fe:	4832      	ldr	r0, [pc, #200]	; (80041c8 <_printf_i+0x240>)
 8004100:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	6829      	ldr	r1, [r5, #0]
 8004108:	061f      	lsls	r7, r3, #24
 800410a:	f851 6b04 	ldr.w	r6, [r1], #4
 800410e:	d402      	bmi.n	8004116 <_printf_i+0x18e>
 8004110:	065f      	lsls	r7, r3, #25
 8004112:	bf48      	it	mi
 8004114:	b2b6      	uxthmi	r6, r6
 8004116:	07df      	lsls	r7, r3, #31
 8004118:	bf48      	it	mi
 800411a:	f043 0320 	orrmi.w	r3, r3, #32
 800411e:	6029      	str	r1, [r5, #0]
 8004120:	bf48      	it	mi
 8004122:	6023      	strmi	r3, [r4, #0]
 8004124:	b91e      	cbnz	r6, 800412e <_printf_i+0x1a6>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f023 0320 	bic.w	r3, r3, #32
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	2310      	movs	r3, #16
 8004130:	e7a6      	b.n	8004080 <_printf_i+0xf8>
 8004132:	4824      	ldr	r0, [pc, #144]	; (80041c4 <_printf_i+0x23c>)
 8004134:	e7e4      	b.n	8004100 <_printf_i+0x178>
 8004136:	4615      	mov	r5, r2
 8004138:	e7bd      	b.n	80040b6 <_printf_i+0x12e>
 800413a:	682b      	ldr	r3, [r5, #0]
 800413c:	6826      	ldr	r6, [r4, #0]
 800413e:	1d18      	adds	r0, r3, #4
 8004140:	6961      	ldr	r1, [r4, #20]
 8004142:	6028      	str	r0, [r5, #0]
 8004144:	0635      	lsls	r5, r6, #24
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	d501      	bpl.n	800414e <_printf_i+0x1c6>
 800414a:	6019      	str	r1, [r3, #0]
 800414c:	e002      	b.n	8004154 <_printf_i+0x1cc>
 800414e:	0670      	lsls	r0, r6, #25
 8004150:	d5fb      	bpl.n	800414a <_printf_i+0x1c2>
 8004152:	8019      	strh	r1, [r3, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	4615      	mov	r5, r2
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	e7bc      	b.n	80040d6 <_printf_i+0x14e>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	2100      	movs	r1, #0
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	602a      	str	r2, [r5, #0]
 8004164:	681d      	ldr	r5, [r3, #0]
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	4628      	mov	r0, r5
 800416a:	f000 f909 	bl	8004380 <memchr>
 800416e:	b108      	cbz	r0, 8004174 <_printf_i+0x1ec>
 8004170:	1b40      	subs	r0, r0, r5
 8004172:	6060      	str	r0, [r4, #4]
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	6123      	str	r3, [r4, #16]
 8004178:	2300      	movs	r3, #0
 800417a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800417e:	e7aa      	b.n	80040d6 <_printf_i+0x14e>
 8004180:	462a      	mov	r2, r5
 8004182:	4649      	mov	r1, r9
 8004184:	4640      	mov	r0, r8
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	47d0      	blx	sl
 800418a:	3001      	adds	r0, #1
 800418c:	d0ad      	beq.n	80040ea <_printf_i+0x162>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	079b      	lsls	r3, r3, #30
 8004192:	d413      	bmi.n	80041bc <_printf_i+0x234>
 8004194:	68e0      	ldr	r0, [r4, #12]
 8004196:	9b03      	ldr	r3, [sp, #12]
 8004198:	4298      	cmp	r0, r3
 800419a:	bfb8      	it	lt
 800419c:	4618      	movlt	r0, r3
 800419e:	e7a6      	b.n	80040ee <_printf_i+0x166>
 80041a0:	2301      	movs	r3, #1
 80041a2:	4632      	mov	r2, r6
 80041a4:	4649      	mov	r1, r9
 80041a6:	4640      	mov	r0, r8
 80041a8:	47d0      	blx	sl
 80041aa:	3001      	adds	r0, #1
 80041ac:	d09d      	beq.n	80040ea <_printf_i+0x162>
 80041ae:	3501      	adds	r5, #1
 80041b0:	68e3      	ldr	r3, [r4, #12]
 80041b2:	9903      	ldr	r1, [sp, #12]
 80041b4:	1a5b      	subs	r3, r3, r1
 80041b6:	42ab      	cmp	r3, r5
 80041b8:	dcf2      	bgt.n	80041a0 <_printf_i+0x218>
 80041ba:	e7eb      	b.n	8004194 <_printf_i+0x20c>
 80041bc:	2500      	movs	r5, #0
 80041be:	f104 0619 	add.w	r6, r4, #25
 80041c2:	e7f5      	b.n	80041b0 <_printf_i+0x228>
 80041c4:	080045a0 	.word	0x080045a0
 80041c8:	080045b1 	.word	0x080045b1

080041cc <__swbuf_r>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	460e      	mov	r6, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	4605      	mov	r5, r0
 80041d4:	b118      	cbz	r0, 80041de <__swbuf_r+0x12>
 80041d6:	6a03      	ldr	r3, [r0, #32]
 80041d8:	b90b      	cbnz	r3, 80041de <__swbuf_r+0x12>
 80041da:	f7ff fa3f 	bl	800365c <__sinit>
 80041de:	69a3      	ldr	r3, [r4, #24]
 80041e0:	60a3      	str	r3, [r4, #8]
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	071a      	lsls	r2, r3, #28
 80041e6:	d525      	bpl.n	8004234 <__swbuf_r+0x68>
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	b31b      	cbz	r3, 8004234 <__swbuf_r+0x68>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	6922      	ldr	r2, [r4, #16]
 80041f0:	b2f6      	uxtb	r6, r6
 80041f2:	1a98      	subs	r0, r3, r2
 80041f4:	6963      	ldr	r3, [r4, #20]
 80041f6:	4637      	mov	r7, r6
 80041f8:	4283      	cmp	r3, r0
 80041fa:	dc04      	bgt.n	8004206 <__swbuf_r+0x3a>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	f7ff fcbe 	bl	8003b80 <_fflush_r>
 8004204:	b9e0      	cbnz	r0, 8004240 <__swbuf_r+0x74>
 8004206:	68a3      	ldr	r3, [r4, #8]
 8004208:	3b01      	subs	r3, #1
 800420a:	60a3      	str	r3, [r4, #8]
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	6022      	str	r2, [r4, #0]
 8004212:	701e      	strb	r6, [r3, #0]
 8004214:	6962      	ldr	r2, [r4, #20]
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	429a      	cmp	r2, r3
 800421a:	d004      	beq.n	8004226 <__swbuf_r+0x5a>
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	07db      	lsls	r3, r3, #31
 8004220:	d506      	bpl.n	8004230 <__swbuf_r+0x64>
 8004222:	2e0a      	cmp	r6, #10
 8004224:	d104      	bne.n	8004230 <__swbuf_r+0x64>
 8004226:	4621      	mov	r1, r4
 8004228:	4628      	mov	r0, r5
 800422a:	f7ff fca9 	bl	8003b80 <_fflush_r>
 800422e:	b938      	cbnz	r0, 8004240 <__swbuf_r+0x74>
 8004230:	4638      	mov	r0, r7
 8004232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004234:	4621      	mov	r1, r4
 8004236:	4628      	mov	r0, r5
 8004238:	f000 f806 	bl	8004248 <__swsetup_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	d0d5      	beq.n	80041ec <__swbuf_r+0x20>
 8004240:	f04f 37ff 	mov.w	r7, #4294967295
 8004244:	e7f4      	b.n	8004230 <__swbuf_r+0x64>
	...

08004248 <__swsetup_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <__swsetup_r+0xac>)
 800424c:	4605      	mov	r5, r0
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	460c      	mov	r4, r1
 8004252:	b118      	cbz	r0, 800425c <__swsetup_r+0x14>
 8004254:	6a03      	ldr	r3, [r0, #32]
 8004256:	b90b      	cbnz	r3, 800425c <__swsetup_r+0x14>
 8004258:	f7ff fa00 	bl	800365c <__sinit>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004262:	0718      	lsls	r0, r3, #28
 8004264:	d422      	bmi.n	80042ac <__swsetup_r+0x64>
 8004266:	06d9      	lsls	r1, r3, #27
 8004268:	d407      	bmi.n	800427a <__swsetup_r+0x32>
 800426a:	2309      	movs	r3, #9
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	e034      	b.n	80042e4 <__swsetup_r+0x9c>
 800427a:	0758      	lsls	r0, r3, #29
 800427c:	d512      	bpl.n	80042a4 <__swsetup_r+0x5c>
 800427e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004280:	b141      	cbz	r1, 8004294 <__swsetup_r+0x4c>
 8004282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004286:	4299      	cmp	r1, r3
 8004288:	d002      	beq.n	8004290 <__swsetup_r+0x48>
 800428a:	4628      	mov	r0, r5
 800428c:	f7ff fafa 	bl	8003884 <_free_r>
 8004290:	2300      	movs	r3, #0
 8004292:	6363      	str	r3, [r4, #52]	; 0x34
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	2300      	movs	r3, #0
 800429e:	6063      	str	r3, [r4, #4]
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f043 0308 	orr.w	r3, r3, #8
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	b94b      	cbnz	r3, 80042c4 <__swsetup_r+0x7c>
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ba:	d003      	beq.n	80042c4 <__swsetup_r+0x7c>
 80042bc:	4621      	mov	r1, r4
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 f891 	bl	80043e6 <__smakebuf_r>
 80042c4:	89a0      	ldrh	r0, [r4, #12]
 80042c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042ca:	f010 0301 	ands.w	r3, r0, #1
 80042ce:	d00a      	beq.n	80042e6 <__swsetup_r+0x9e>
 80042d0:	2300      	movs	r3, #0
 80042d2:	60a3      	str	r3, [r4, #8]
 80042d4:	6963      	ldr	r3, [r4, #20]
 80042d6:	425b      	negs	r3, r3
 80042d8:	61a3      	str	r3, [r4, #24]
 80042da:	6923      	ldr	r3, [r4, #16]
 80042dc:	b943      	cbnz	r3, 80042f0 <__swsetup_r+0xa8>
 80042de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042e2:	d1c4      	bne.n	800426e <__swsetup_r+0x26>
 80042e4:	bd38      	pop	{r3, r4, r5, pc}
 80042e6:	0781      	lsls	r1, r0, #30
 80042e8:	bf58      	it	pl
 80042ea:	6963      	ldrpl	r3, [r4, #20]
 80042ec:	60a3      	str	r3, [r4, #8]
 80042ee:	e7f4      	b.n	80042da <__swsetup_r+0x92>
 80042f0:	2000      	movs	r0, #0
 80042f2:	e7f7      	b.n	80042e4 <__swsetup_r+0x9c>
 80042f4:	200000b8 	.word	0x200000b8

080042f8 <_raise_r>:
 80042f8:	291f      	cmp	r1, #31
 80042fa:	b538      	push	{r3, r4, r5, lr}
 80042fc:	4604      	mov	r4, r0
 80042fe:	460d      	mov	r5, r1
 8004300:	d904      	bls.n	800430c <_raise_r+0x14>
 8004302:	2316      	movs	r3, #22
 8004304:	6003      	str	r3, [r0, #0]
 8004306:	f04f 30ff 	mov.w	r0, #4294967295
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800430e:	b112      	cbz	r2, 8004316 <_raise_r+0x1e>
 8004310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004314:	b94b      	cbnz	r3, 800432a <_raise_r+0x32>
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f830 	bl	800437c <_getpid_r>
 800431c:	462a      	mov	r2, r5
 800431e:	4601      	mov	r1, r0
 8004320:	4620      	mov	r0, r4
 8004322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004326:	f000 b817 	b.w	8004358 <_kill_r>
 800432a:	2b01      	cmp	r3, #1
 800432c:	d00a      	beq.n	8004344 <_raise_r+0x4c>
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	d103      	bne.n	800433a <_raise_r+0x42>
 8004332:	2316      	movs	r3, #22
 8004334:	6003      	str	r3, [r0, #0]
 8004336:	2001      	movs	r0, #1
 8004338:	e7e7      	b.n	800430a <_raise_r+0x12>
 800433a:	2400      	movs	r4, #0
 800433c:	4628      	mov	r0, r5
 800433e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004342:	4798      	blx	r3
 8004344:	2000      	movs	r0, #0
 8004346:	e7e0      	b.n	800430a <_raise_r+0x12>

08004348 <raise>:
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <raise+0xc>)
 800434a:	4601      	mov	r1, r0
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f7ff bfd3 	b.w	80042f8 <_raise_r>
 8004352:	bf00      	nop
 8004354:	200000b8 	.word	0x200000b8

08004358 <_kill_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	2300      	movs	r3, #0
 800435c:	4d06      	ldr	r5, [pc, #24]	; (8004378 <_kill_r+0x20>)
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	f7fc ff84 	bl	8001272 <_kill>
 800436a:	1c43      	adds	r3, r0, #1
 800436c:	d102      	bne.n	8004374 <_kill_r+0x1c>
 800436e:	682b      	ldr	r3, [r5, #0]
 8004370:	b103      	cbz	r3, 8004374 <_kill_r+0x1c>
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	bd38      	pop	{r3, r4, r5, pc}
 8004376:	bf00      	nop
 8004378:	200002c8 	.word	0x200002c8

0800437c <_getpid_r>:
 800437c:	f7fc bf72 	b.w	8001264 <_getpid>

08004380 <memchr>:
 8004380:	4603      	mov	r3, r0
 8004382:	b510      	push	{r4, lr}
 8004384:	b2c9      	uxtb	r1, r1
 8004386:	4402      	add	r2, r0
 8004388:	4293      	cmp	r3, r2
 800438a:	4618      	mov	r0, r3
 800438c:	d101      	bne.n	8004392 <memchr+0x12>
 800438e:	2000      	movs	r0, #0
 8004390:	e003      	b.n	800439a <memchr+0x1a>
 8004392:	7804      	ldrb	r4, [r0, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	428c      	cmp	r4, r1
 8004398:	d1f6      	bne.n	8004388 <memchr+0x8>
 800439a:	bd10      	pop	{r4, pc}

0800439c <__swhatbuf_r>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	460c      	mov	r4, r1
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	4615      	mov	r5, r2
 80043a6:	2900      	cmp	r1, #0
 80043a8:	461e      	mov	r6, r3
 80043aa:	b096      	sub	sp, #88	; 0x58
 80043ac:	da0c      	bge.n	80043c8 <__swhatbuf_r+0x2c>
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	2100      	movs	r1, #0
 80043b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043b6:	bf0c      	ite	eq
 80043b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80043bc:	2340      	movne	r3, #64	; 0x40
 80043be:	2000      	movs	r0, #0
 80043c0:	6031      	str	r1, [r6, #0]
 80043c2:	602b      	str	r3, [r5, #0]
 80043c4:	b016      	add	sp, #88	; 0x58
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	466a      	mov	r2, sp
 80043ca:	f000 f849 	bl	8004460 <_fstat_r>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	dbed      	blt.n	80043ae <__swhatbuf_r+0x12>
 80043d2:	9901      	ldr	r1, [sp, #4]
 80043d4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80043d8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80043dc:	4259      	negs	r1, r3
 80043de:	4159      	adcs	r1, r3
 80043e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e4:	e7eb      	b.n	80043be <__swhatbuf_r+0x22>

080043e6 <__smakebuf_r>:
 80043e6:	898b      	ldrh	r3, [r1, #12]
 80043e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043ea:	079d      	lsls	r5, r3, #30
 80043ec:	4606      	mov	r6, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	d507      	bpl.n	8004402 <__smakebuf_r+0x1c>
 80043f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	6123      	str	r3, [r4, #16]
 80043fa:	2301      	movs	r3, #1
 80043fc:	6163      	str	r3, [r4, #20]
 80043fe:	b002      	add	sp, #8
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	466a      	mov	r2, sp
 8004404:	ab01      	add	r3, sp, #4
 8004406:	f7ff ffc9 	bl	800439c <__swhatbuf_r>
 800440a:	9900      	ldr	r1, [sp, #0]
 800440c:	4605      	mov	r5, r0
 800440e:	4630      	mov	r0, r6
 8004410:	f7ff faa8 	bl	8003964 <_malloc_r>
 8004414:	b948      	cbnz	r0, 800442a <__smakebuf_r+0x44>
 8004416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800441a:	059a      	lsls	r2, r3, #22
 800441c:	d4ef      	bmi.n	80043fe <__smakebuf_r+0x18>
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	e7e3      	b.n	80043f2 <__smakebuf_r+0xc>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	6020      	str	r0, [r4, #0]
 800442e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004432:	81a3      	strh	r3, [r4, #12]
 8004434:	9b00      	ldr	r3, [sp, #0]
 8004436:	6120      	str	r0, [r4, #16]
 8004438:	6163      	str	r3, [r4, #20]
 800443a:	9b01      	ldr	r3, [sp, #4]
 800443c:	b15b      	cbz	r3, 8004456 <__smakebuf_r+0x70>
 800443e:	4630      	mov	r0, r6
 8004440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004444:	f000 f81e 	bl	8004484 <_isatty_r>
 8004448:	b128      	cbz	r0, 8004456 <__smakebuf_r+0x70>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f023 0303 	bic.w	r3, r3, #3
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	431d      	orrs	r5, r3
 800445a:	81a5      	strh	r5, [r4, #12]
 800445c:	e7cf      	b.n	80043fe <__smakebuf_r+0x18>
	...

08004460 <_fstat_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	2300      	movs	r3, #0
 8004464:	4d06      	ldr	r5, [pc, #24]	; (8004480 <_fstat_r+0x20>)
 8004466:	4604      	mov	r4, r0
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	602b      	str	r3, [r5, #0]
 800446e:	f7fc ff5e 	bl	800132e <_fstat>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	d102      	bne.n	800447c <_fstat_r+0x1c>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	b103      	cbz	r3, 800447c <_fstat_r+0x1c>
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	bd38      	pop	{r3, r4, r5, pc}
 800447e:	bf00      	nop
 8004480:	200002c8 	.word	0x200002c8

08004484 <_isatty_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	2300      	movs	r3, #0
 8004488:	4d05      	ldr	r5, [pc, #20]	; (80044a0 <_isatty_r+0x1c>)
 800448a:	4604      	mov	r4, r0
 800448c:	4608      	mov	r0, r1
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	f7fc ff5c 	bl	800134c <_isatty>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_isatty_r+0x1a>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_isatty_r+0x1a>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200002c8 	.word	0x200002c8

080044a4 <_init>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr

080044b0 <_fini>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	bf00      	nop
 80044b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b6:	bc08      	pop	{r3}
 80044b8:	469e      	mov	lr, r3
 80044ba:	4770      	bx	lr
