
React_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004440  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004684  08004684  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004684  08004684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800468c  0800468c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08004694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000bc  08004750  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004750  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f9  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f7  00000000  00000000  0002b621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091d  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174b6  00000000  00000000  0002ec4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d20a  00000000  00000000  00046103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d63a  00000000  00000000  0005330d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad8  00000000  00000000  000e0948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000e4420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000bc 	.word	0x200000bc
 8000158:	00000000 	.word	0x00000000
 800015c:	08004564 	.word	0x08004564

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000c0 	.word	0x200000c0
 8000178:	08004564 	.word	0x08004564

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <set_new_state>:
		};

int tab_case[5][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0,
		0, 1 }, { 1, 1, 1, 1 } };

static void set_new_state(FSM_State_Enum _new_state) {
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz)) {
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b31      	ldr	r3, [pc, #196]	; (8000550 <set_new_state+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d257      	bcs.n	8000542 <set_new_state+0xc6>
		fsm_handle->state = fsm_handle->states_list[_new_state];
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <set_new_state+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	441a      	add	r2, r3
 800049e:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <set_new_state+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}

		fsm_handle->controllers.state_execution_count = 0;
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <set_new_state+0xd4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
		fsm_handle->controllers.animation_state = ANIMATION_RUNNING;
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <set_new_state+0xd4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
		fsm_handle->controllers.state_base_time = HAL_GetTick();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <set_new_state+0xd4>)
 80004bc:	681c      	ldr	r4, [r3, #0]
 80004be:	f001 f99b 	bl	80017f8 <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	61a3      	str	r3, [r4, #24]

		actualBTN1 = fsm_handle->inputs.nb_press_btn1;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <set_new_state+0xd4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	7c1a      	ldrb	r2, [r3, #16]
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <set_new_state+0xd8>)
 80004ce:	701a      	strb	r2, [r3, #0]
		actualBTN2 = fsm_handle->inputs.nb_press_btn2;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <set_new_state+0xd4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7c5a      	ldrb	r2, [r3, #17]
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <set_new_state+0xdc>)
 80004d8:	701a      	strb	r2, [r3, #0]
		actualBTN3 = fsm_handle->inputs.nb_press_btn3;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <set_new_state+0xd4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	7c9a      	ldrb	r2, [r3, #18]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <set_new_state+0xe0>)
 80004e2:	701a      	strb	r2, [r3, #0]
		actualBTN4 = fsm_handle->inputs.nb_press_btn4;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <set_new_state+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	7cda      	ldrb	r2, [r3, #19]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <set_new_state+0xe4>)
 80004ec:	701a      	strb	r2, [r3, #0]

		srand(HAL_GetTick());
 80004ee:	f001 f983 	bl	80017f8 <HAL_GetTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 f817 	bl	8003528 <srand>

		fsm_handle->controllers.randomTime = (rand() % 4501) + 500;
 80004fa:	f003 f843 	bl	8003584 <rand>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <set_new_state+0xe8>)
 8000502:	fb83 1302 	smull	r1, r3, r3, r2
 8000506:	1259      	asrs	r1, r3, #9
 8000508:	17d3      	asrs	r3, r2, #31
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	f241 1195 	movw	r1, #4501	; 0x1195
 8000510:	fb01 f303 	mul.w	r3, r1, r3
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <set_new_state+0xd4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	621a      	str	r2, [r3, #32]
		fsm_handle->controllers.randomCase = rand() % 5;
 8000520:	f003 f830 	bl	8003584 <rand>
 8000524:	4602      	mov	r2, r0
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <set_new_state+0xec>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1059      	asrs	r1, r3, #1
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	1ad1      	subs	r1, r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <set_new_state+0xd4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	460a      	mov	r2, r1
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	max7219_erase_no_decode();
 8000542:	f001 f8b7 	bl	80016b4 <max7219_erase_no_decode>
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	200000dc 	.word	0x200000dc
 8000554:	200000e4 	.word	0x200000e4
 8000558:	200000e5 	.word	0x200000e5
 800055c:	200000e6 	.word	0x200000e6
 8000560:	200000e7 	.word	0x200000e7
 8000564:	1d1ee241 	.word	0x1d1ee241
 8000568:	66666667 	.word	0x66666667

0800056c <init_game>:

HAL_StatusTypeDef init_game(Game_Handle_TypeDef *_game_handle,
		FSM_Handle_TypeDef *_fsm_handle) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef led_array_status = HAL_OK;

	game_handle = _game_handle;
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <init_game+0x64>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <init_game+0x68>)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]

	max7219_status = max7219_init(&game_handle->max7219_handle);
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <init_game+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ffb8 	bl	8001500 <max7219_init>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]

	if (max7219_status != HAL_OK)
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <init_game+0x32>
		return max7219_status;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	e013      	b.n	80005c6 <init_game+0x5a>

	fsm_handle->states_list = states_list;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <init_game+0x68>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <init_game+0x6c>)
 80005a4:	609a      	str	r2, [r3, #8]
	fsm_handle->states_list_sz = sizeof(states_list)
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <init_game+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2206      	movs	r2, #6
 80005ac:	60da      	str	r2, [r3, #12]
			/ sizeof(FSM_State_TypeDef);

	fsm_handle->controllers.randomTime = 0;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <init_game+0x68>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
	fsm_handle->controllers.randomCase = 0;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <init_game+0x68>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24

	set_new_state(STATE_START);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5c 	bl	800047c <set_new_state>

	return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	200000dc 	.word	0x200000dc
 80005d8:	20000000 	.word	0x20000000

080005dc <run_game>:

HAL_StatusTypeDef run_game(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	fsm_handle->state.state_callback();
 80005e0:	4b82      	ldr	r3, [pc, #520]	; (80007ec <run_game+0x210>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4798      	blx	r3
	fsm_handle->controllers.state_execution_count += 1;
 80005e8:	4b80      	ldr	r3, [pc, #512]	; (80007ec <run_game+0x210>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <run_game+0x210>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3201      	adds	r2, #1
 80005f4:	615a      	str	r2, [r3, #20]

	switch (fsm_handle->state.state) {
 80005f6:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <run_game+0x210>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	f200 817d 	bhi.w	80008fc <run_game+0x320>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <run_game+0x2c>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000621 	.word	0x08000621
 800060c:	08000635 	.word	0x08000635
 8000610:	080006cd 	.word	0x080006cd
 8000614:	080008c3 	.word	0x080008c3
 8000618:	080008b1 	.word	0x080008b1
 800061c:	080008d5 	.word	0x080008d5
	case STATE_START:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 8000620:	4b72      	ldr	r3, [pc, #456]	; (80007ec <run_game+0x210>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7f1b      	ldrb	r3, [r3, #28]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 815d 	bne.w	80008e6 <run_game+0x30a>
			set_new_state(STATE_WP);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff25 	bl	800047c <set_new_state>
		}
		break;
 8000632:	e158      	b.n	80008e6 <run_game+0x30a>
	case STATE_WP:
		checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000634:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <run_game+0x210>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	7c1a      	ldrb	r2, [r3, #16]
 800063a:	4b6d      	ldr	r3, [pc, #436]	; (80007f0 <run_game+0x214>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <run_game+0x218>)
 8000644:	701a      	strb	r2, [r3, #0]
		checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000646:	4b69      	ldr	r3, [pc, #420]	; (80007ec <run_game+0x210>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7c5a      	ldrb	r2, [r3, #17]
 800064c:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <run_game+0x21c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b69      	ldr	r3, [pc, #420]	; (80007fc <run_game+0x220>)
 8000656:	701a      	strb	r2, [r3, #0]
		checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000658:	4b64      	ldr	r3, [pc, #400]	; (80007ec <run_game+0x210>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	7c9a      	ldrb	r2, [r3, #18]
 800065e:	4b68      	ldr	r3, [pc, #416]	; (8000800 <run_game+0x224>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b67      	ldr	r3, [pc, #412]	; (8000804 <run_game+0x228>)
 8000668:	701a      	strb	r2, [r3, #0]
		checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 800066a:	4b60      	ldr	r3, [pc, #384]	; (80007ec <run_game+0x210>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7cda      	ldrb	r2, [r3, #19]
 8000670:	4b65      	ldr	r3, [pc, #404]	; (8000808 <run_game+0x22c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b64      	ldr	r3, [pc, #400]	; (800080c <run_game+0x230>)
 800067a:	701a      	strb	r2, [r3, #0]
		if (checkP1 != 0 || checkP2 != 0 || checkP3 != 0 || checkP4 != 0) {
 800067c:	4b5d      	ldr	r3, [pc, #372]	; (80007f4 <run_game+0x218>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <run_game+0xc0>
 8000684:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <run_game+0x220>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d107      	bne.n	800069c <run_game+0xc0>
 800068c:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <run_game+0x228>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <run_game+0xc0>
 8000694:	4b5d      	ldr	r3, [pc, #372]	; (800080c <run_game+0x230>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <run_game+0xc6>
			set_new_state(STATE_WAIT);
 800069c:	2003      	movs	r0, #3
 800069e:	f7ff feed 	bl	800047c <set_new_state>
		}
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 10000){
 80006a2:	f001 f8a9 	bl	80017f8 <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	4b50      	ldr	r3, [pc, #320]	; (80007ec <run_game+0x210>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b4:	4293      	cmp	r3, r2
 80006b6:	f240 8118 	bls.w	80008ea <run_game+0x30e>
			HAL_SuspendTick();
 80006ba:	f001 f8a7 	bl	800180c <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006be:	2101      	movs	r1, #1
 80006c0:	2000      	movs	r0, #0
 80006c2:	f001 fb7f 	bl	8001dc4 <HAL_PWR_EnterSLEEPMode>
			SystemClock_Config();
 80006c6:	f000 fbd3 	bl	8000e70 <SystemClock_Config>
		}

		break;
 80006ca:	e10e      	b.n	80008ea <run_game+0x30e>
	case STATE_GP:
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time <= 10000) {
 80006cc:	f001 f894 	bl	80017f8 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <run_game+0x210>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	f242 7210 	movw	r2, #10000	; 0x2710
 80006de:	4293      	cmp	r3, r2
 80006e0:	f200 80d8 	bhi.w	8000894 <run_game+0x2b8>
			switch (fsm_handle->controllers.randomCase) {
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <run_game+0x210>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	f200 80ff 	bhi.w	80008ee <run_game+0x312>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <run_game+0x11c>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	0800070d 	.word	0x0800070d
 80006fc:	08000745 	.word	0x08000745
 8000700:	0800077d 	.word	0x0800077d
 8000704:	080007b5 	.word	0x080007b5
 8000708:	08000811 	.word	0x08000811
			case 0:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <run_game+0x210>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7c1a      	ldrb	r2, [r3, #16]
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <run_game+0x214>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <run_game+0x218>)
 800071c:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0) {
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <run_game+0x218>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 80ba 	beq.w	800089c <run_game+0x2c0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000728:	f001 f866 	bl	80017f8 <HAL_GetTick>
 800072c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <run_game+0x210>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <run_game+0x210>)
 8000736:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000738:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800073c:	2004      	movs	r0, #4
 800073e:	f7ff fe9d 	bl	800047c <set_new_state>
				}
				break;
 8000742:	e0ab      	b.n	800089c <run_game+0x2c0>
			case 1:
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <run_game+0x210>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7c5a      	ldrb	r2, [r3, #17]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <run_game+0x21c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <run_game+0x220>)
 8000754:	701a      	strb	r2, [r3, #0]
				if (checkP2 != 0) {
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <run_game+0x220>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	f000 80a0 	beq.w	80008a0 <run_game+0x2c4>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000760:	f001 f84a 	bl	80017f8 <HAL_GetTick>
 8000764:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <run_game+0x210>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <run_game+0x210>)
 800076e:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000770:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff fe81 	bl	800047c <set_new_state>
				}
				break;
 800077a:	e091      	b.n	80008a0 <run_game+0x2c4>
			case 2:
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <run_game+0x210>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	7c9a      	ldrb	r2, [r3, #18]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <run_game+0x224>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <run_game+0x228>)
 800078c:	701a      	strb	r2, [r3, #0]
				if (checkP3 != 0) {
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <run_game+0x228>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8086 	beq.w	80008a4 <run_game+0x2c8>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000798:	f001 f82e 	bl	80017f8 <HAL_GetTick>
 800079c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <run_game+0x210>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <run_game+0x210>)
 80007a6:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007a8:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007ac:	2004      	movs	r0, #4
 80007ae:	f7ff fe65 	bl	800047c <set_new_state>
				}
				break;
 80007b2:	e077      	b.n	80008a4 <run_game+0x2c8>
			case 3:
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <run_game+0x210>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7cda      	ldrb	r2, [r3, #19]
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <run_game+0x22c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <run_game+0x230>)
 80007c4:	701a      	strb	r2, [r3, #0]
				if (checkP4 != 0) {
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <run_game+0x230>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d06c      	beq.n	80008a8 <run_game+0x2cc>
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007ce:	f001 f813 	bl	80017f8 <HAL_GetTick>
 80007d2:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <run_game+0x210>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <run_game+0x210>)
 80007dc:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007de:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f7ff fe4a 	bl	800047c <set_new_state>
				}
				break;
 80007e8:	e05e      	b.n	80008a8 <run_game+0x2cc>
 80007ea:	bf00      	nop
 80007ec:	200000dc 	.word	0x200000dc
 80007f0:	200000e4 	.word	0x200000e4
 80007f4:	200000e0 	.word	0x200000e0
 80007f8:	200000e5 	.word	0x200000e5
 80007fc:	200000e1 	.word	0x200000e1
 8000800:	200000e6 	.word	0x200000e6
 8000804:	200000e2 	.word	0x200000e2
 8000808:	200000e7 	.word	0x200000e7
 800080c:	200000e3 	.word	0x200000e3

			case 4:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000810:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <run_game+0x328>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c1a      	ldrb	r2, [r3, #16]
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <run_game+0x32c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <run_game+0x330>)
 8000820:	701a      	strb	r2, [r3, #0]
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <run_game+0x328>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	7c5a      	ldrb	r2, [r3, #17]
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <run_game+0x334>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <run_game+0x338>)
 8000832:	701a      	strb	r2, [r3, #0]
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <run_game+0x328>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7c9a      	ldrb	r2, [r3, #18]
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <run_game+0x33c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <run_game+0x340>)
 8000844:	701a      	strb	r2, [r3, #0]
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <run_game+0x328>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	7cda      	ldrb	r2, [r3, #19]
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <run_game+0x344>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <run_game+0x348>)
 8000856:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0 && checkP2 != 0 && checkP3 != 0
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <run_game+0x330>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d025      	beq.n	80008ac <run_game+0x2d0>
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <run_game+0x338>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d021      	beq.n	80008ac <run_game+0x2d0>
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <run_game+0x340>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d01d      	beq.n	80008ac <run_game+0x2d0>
						&& checkP4 != 0) {
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <run_game+0x348>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d019      	beq.n	80008ac <run_game+0x2d0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000878:	f000 ffbe 	bl	80017f8 <HAL_GetTick>
 800087c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <run_game+0x328>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <run_game+0x328>)
 8000886:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000888:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800088c:	2004      	movs	r0, #4
 800088e:	f7ff fdf5 	bl	800047c <set_new_state>
				}
				break;
 8000892:	e00b      	b.n	80008ac <run_game+0x2d0>
			}
		} else {
			set_new_state(STATE_LOOSE);
 8000894:	2005      	movs	r0, #5
 8000896:	f7ff fdf1 	bl	800047c <set_new_state>
		}
		break;
 800089a:	e028      	b.n	80008ee <run_game+0x312>
				break;
 800089c:	bf00      	nop
 800089e:	e026      	b.n	80008ee <run_game+0x312>
				break;
 80008a0:	bf00      	nop
 80008a2:	e024      	b.n	80008ee <run_game+0x312>
				break;
 80008a4:	bf00      	nop
 80008a6:	e022      	b.n	80008ee <run_game+0x312>
				break;
 80008a8:	bf00      	nop
 80008aa:	e020      	b.n	80008ee <run_game+0x312>
				break;
 80008ac:	bf00      	nop
		break;
 80008ae:	e01e      	b.n	80008ee <run_game+0x312>
	case STATE_DISP:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <run_game+0x328>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7f1b      	ldrb	r3, [r3, #28]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d11b      	bne.n	80008f2 <run_game+0x316>
			set_new_state(STATE_WP);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fdde 	bl	800047c <set_new_state>
		}
		break;
 80008c0:	e017      	b.n	80008f2 <run_game+0x316>
	case STATE_WAIT:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <run_game+0x328>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d114      	bne.n	80008f6 <run_game+0x31a>
			set_new_state(STATE_GP);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fdd5 	bl	800047c <set_new_state>
		}
		break;
 80008d2:	e010      	b.n	80008f6 <run_game+0x31a>
	case STATE_LOOSE:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <run_game+0x328>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7f1b      	ldrb	r3, [r3, #28]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10d      	bne.n	80008fa <run_game+0x31e>
			set_new_state(STATE_WP);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fdcc 	bl	800047c <set_new_state>
		}
		break;
 80008e4:	e009      	b.n	80008fa <run_game+0x31e>
		break;
 80008e6:	bf00      	nop
 80008e8:	e008      	b.n	80008fc <run_game+0x320>
		break;
 80008ea:	bf00      	nop
 80008ec:	e006      	b.n	80008fc <run_game+0x320>
		break;
 80008ee:	bf00      	nop
 80008f0:	e004      	b.n	80008fc <run_game+0x320>
		break;
 80008f2:	bf00      	nop
 80008f4:	e002      	b.n	80008fc <run_game+0x320>
		break;
 80008f6:	bf00      	nop
 80008f8:	e000      	b.n	80008fc <run_game+0x320>
		break;
 80008fa:	bf00      	nop
	}

	return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000dc 	.word	0x200000dc
 8000908:	200000e4 	.word	0x200000e4
 800090c:	200000e0 	.word	0x200000e0
 8000910:	200000e5 	.word	0x200000e5
 8000914:	200000e1 	.word	0x200000e1
 8000918:	200000e6 	.word	0x200000e6
 800091c:	200000e2 	.word	0x200000e2
 8000920:	200000e7 	.word	0x200000e7
 8000924:	200000e3 	.word	0x200000e3

08000928 <state_start>:

void state_start(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	//Affichage
	max7219_status = display_letter(game_handle->max7219_handle, 'G', 0);
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <state_start+0xa4>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2347      	movs	r3, #71	; 0x47
 8000938:	ca07      	ldmia	r2, {r0, r1, r2}
 800093a:	f000 fa0d 	bl	8000d58 <display_letter>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <state_start+0x24>
		Error_Handler();
 8000948:	f000 fbd2 	bl	80010f0 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'A', 1);
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <state_start+0xa4>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2341      	movs	r3, #65	; 0x41
 8000956:	ca07      	ldmia	r2, {r0, r1, r2}
 8000958:	f000 f9fe 	bl	8000d58 <display_letter>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <state_start+0x42>
		Error_Handler();
 8000966:	f000 fbc3 	bl	80010f0 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'M', 2);
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <state_start+0xa4>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	2302      	movs	r3, #2
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	234d      	movs	r3, #77	; 0x4d
 8000974:	ca07      	ldmia	r2, {r0, r1, r2}
 8000976:	f000 f9ef 	bl	8000d58 <display_letter>
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <state_start+0x60>
		Error_Handler();
 8000984:	f000 fbb4 	bl	80010f0 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 3);
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <state_start+0xa4>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2303      	movs	r3, #3
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2345      	movs	r3, #69	; 0x45
 8000992:	ca07      	ldmia	r2, {r0, r1, r2}
 8000994:	f000 f9e0 	bl	8000d58 <display_letter>
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <state_start+0x7e>
		Error_Handler();
 80009a2:	f000 fba5 	bl	80010f0 <Error_Handler>

	//Ellapsed time
	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 80009a6:	f000 ff27 	bl	80017f8 <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <state_start+0xa8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d903      	bls.n	80009c4 <state_start+0x9c>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <state_start+0xa8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	771a      	strb	r2, [r3, #28]
	}

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	200000dc 	.word	0x200000dc

080009d4 <state_wp>:
void state_wp(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	max7219_status = display_letter(game_handle->max7219_handle, 'P', 0);
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <state_wp+0x88>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2350      	movs	r3, #80	; 0x50
 80009e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e6:	f000 f9b7 	bl	8000d58 <display_letter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <state_wp+0x24>
		Error_Handler();
 80009f4:	f000 fb7c 	bl	80010f0 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'R', 1);
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <state_wp+0x88>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2352      	movs	r3, #82	; 0x52
 8000a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a04:	f000 f9a8 	bl	8000d58 <display_letter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <state_wp+0x42>
		Error_Handler();
 8000a12:	f000 fb6d 	bl	80010f0 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 2);
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <state_wp+0x88>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2345      	movs	r3, #69	; 0x45
 8000a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a22:	f000 f999 	bl	8000d58 <display_letter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <state_wp+0x60>
		Error_Handler();
 8000a30:	f000 fb5e 	bl	80010f0 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <state_wp+0x88>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2303      	movs	r3, #3
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2353      	movs	r3, #83	; 0x53
 8000a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a40:	f000 f98a 	bl	8000d58 <display_letter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <state_wp+0x7e>
		Error_Handler();
 8000a4e:	f000 fb4f 	bl	80010f0 <Error_Handler>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d8 	.word	0x200000d8

08000a60 <state_gp>:
void state_gp(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef max7219_status;
	switch (fsm_handle->controllers.randomCase) {
 8000a66:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <state_gp+0x100>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d873      	bhi.n	8000b58 <state_gp+0xf8>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <state_gp+0x18>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a8d 	.word	0x08000a8d
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000abd 	.word	0x08000abd
 8000a84:	08000ad5 	.word	0x08000ad5
 8000a88:	08000aed 	.word	0x08000aed
	case 0:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000a8c:	2130      	movs	r1, #48	; 0x30
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fd94 	bl	80015bc <max7219_display_no_decode>
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d053      	beq.n	8000b46 <state_gp+0xe6>
			Error_Handler();
 8000a9e:	f000 fb27 	bl	80010f0 <Error_Handler>
		break;
 8000aa2:	e050      	b.n	8000b46 <state_gp+0xe6>
	case 1:
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000aa4:	216d      	movs	r1, #109	; 0x6d
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fd88 	bl	80015bc <max7219_display_no_decode>
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d049      	beq.n	8000b4a <state_gp+0xea>
			Error_Handler();
 8000ab6:	f000 fb1b 	bl	80010f0 <Error_Handler>
		break;
 8000aba:	e046      	b.n	8000b4a <state_gp+0xea>
	case 2:
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000abc:	2179      	movs	r1, #121	; 0x79
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f000 fd7c 	bl	80015bc <max7219_display_no_decode>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d03f      	beq.n	8000b4e <state_gp+0xee>
			Error_Handler();
 8000ace:	f000 fb0f 	bl	80010f0 <Error_Handler>
		break;
 8000ad2:	e03c      	b.n	8000b4e <state_gp+0xee>
	case 3:
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000ad4:	2133      	movs	r1, #51	; 0x33
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 fd70 	bl	80015bc <max7219_display_no_decode>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d035      	beq.n	8000b52 <state_gp+0xf2>
			Error_Handler();
 8000ae6:	f000 fb03 	bl	80010f0 <Error_Handler>
		break;
 8000aea:	e032      	b.n	8000b52 <state_gp+0xf2>

	case 4:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000aec:	2130      	movs	r1, #48	; 0x30
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fd64 	bl	80015bc <max7219_display_no_decode>
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <state_gp+0xa2>
			Error_Handler();
 8000afe:	f000 faf7 	bl	80010f0 <Error_Handler>
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000b02:	216d      	movs	r1, #109	; 0x6d
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fd59 	bl	80015bc <max7219_display_no_decode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <state_gp+0xb8>
			Error_Handler();
 8000b14:	f000 faec 	bl	80010f0 <Error_Handler>
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000b18:	2179      	movs	r1, #121	; 0x79
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fd4e 	bl	80015bc <max7219_display_no_decode>
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <state_gp+0xce>
			Error_Handler();
 8000b2a:	f000 fae1 	bl	80010f0 <Error_Handler>
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000b2e:	2133      	movs	r1, #51	; 0x33
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fd43 	bl	80015bc <max7219_display_no_decode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00a      	beq.n	8000b56 <state_gp+0xf6>
			Error_Handler();
 8000b40:	f000 fad6 	bl	80010f0 <Error_Handler>
		break;
 8000b44:	e007      	b.n	8000b56 <state_gp+0xf6>
		break;
 8000b46:	bf00      	nop
 8000b48:	e006      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b4a:	bf00      	nop
 8000b4c:	e004      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b4e:	bf00      	nop
 8000b50:	e002      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b52:	bf00      	nop
 8000b54:	e000      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b56:	bf00      	nop
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <state_disp>:

void state_disp(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status;
	int mil, cent, diz, ent;

	mil = fsm_handle->controllers.timing / 1000;
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <state_disp+0x104>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <state_disp+0x108>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	099b      	lsrs	r3, r3, #6
 8000b78:	617b      	str	r3, [r7, #20]
	cent = (fsm_handle->controllers.timing / 100) % 10;
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <state_disp+0x104>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <state_disp+0x10c>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	0959      	lsrs	r1, r3, #5
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <state_disp+0x110>)
 8000b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	1aca      	subs	r2, r1, r3
 8000b9a:	613a      	str	r2, [r7, #16]
	diz = (fsm_handle->controllers.timing / 10) % 10;
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <state_disp+0x104>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <state_disp+0x110>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	08d9      	lsrs	r1, r3, #3
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <state_disp+0x110>)
 8000bac:	fba3 2301 	umull	r2, r3, r3, r1
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	60fa      	str	r2, [r7, #12]
	ent = fsm_handle->controllers.timing % 10;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <state_disp+0x104>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <state_disp+0x110>)
 8000bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	1aca      	subs	r2, r1, r3
 8000bd6:	60ba      	str	r2, [r7, #8]

	max7219_status = max7219_display_decode(0, mil);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 fd2a 	bl	8001638 <max7219_display_decode>
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <state_disp+0x8e>
		Error_Handler();
 8000bee:	f000 fa7f 	bl	80010f0 <Error_Handler>
	max7219_status = max7219_display_decode(1, cent);
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fd1d 	bl	8001638 <max7219_display_decode>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <state_disp+0xa8>
		Error_Handler();
 8000c08:	f000 fa72 	bl	80010f0 <Error_Handler>
	max7219_status = max7219_display_decode(2, diz);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	2002      	movs	r0, #2
 8000c14:	f000 fd10 	bl	8001638 <max7219_display_decode>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <state_disp+0xc2>
		Error_Handler();
 8000c22:	f000 fa65 	bl	80010f0 <Error_Handler>
	max7219_status = max7219_display_decode(3, ent);
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fd03 	bl	8001638 <max7219_display_decode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <state_disp+0xdc>
		Error_Handler();
 8000c3c:	f000 fa58 	bl	80010f0 <Error_Handler>

	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 8000c40:	f000 fdda 	bl	80017f8 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <state_disp+0x104>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d903      	bls.n	8000c5e <state_disp+0xfa>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <state_disp+0x104>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	771a      	strb	r2, [r3, #28]
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000dc 	.word	0x200000dc
 8000c6c:	10624dd3 	.word	0x10624dd3
 8000c70:	51eb851f 	.word	0x51eb851f
 8000c74:	cccccccd 	.word	0xcccccccd

08000c78 <state_wait>:

void state_wait(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time)
 8000c7c:	bf00      	nop
 8000c7e:	f000 fdbb 	bl	80017f8 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <state_wait+0x2c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	1ad2      	subs	r2, r2, r3
			< fsm_handle->controllers.randomTime)
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <state_wait+0x2c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3f3      	bcc.n	8000c7e <state_wait+0x6>
		;
	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c96:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <state_wait+0x2c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	771a      	strb	r2, [r3, #28]
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <state_loose>:

void state_loose(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000cae:	e03b      	b.n	8000d28 <state_loose+0x80>
		max7219_status = display_letter(game_handle->max7219_handle, 'L', 0);
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <state_loose+0xa8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	234c      	movs	r3, #76	; 0x4c
 8000cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cbc:	f000 f84c 	bl	8000d58 <display_letter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <state_loose+0x26>
			Error_Handler();
 8000cca:	f000 fa11 	bl	80010f0 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 1);
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <state_loose+0xa8>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	234f      	movs	r3, #79	; 0x4f
 8000cd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cda:	f000 f83d 	bl	8000d58 <display_letter>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <state_loose+0x44>
			Error_Handler();
 8000ce8:	f000 fa02 	bl	80010f0 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 2);
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <state_loose+0xa8>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	234f      	movs	r3, #79	; 0x4f
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	f000 f82e 	bl	8000d58 <display_letter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <state_loose+0x62>
			Error_Handler();
 8000d06:	f000 f9f3 	bl	80010f0 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <state_loose+0xa8>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	2303      	movs	r3, #3
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2353      	movs	r3, #83	; 0x53
 8000d14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d16:	f000 f81f 	bl	8000d58 <display_letter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <state_loose+0x80>
			Error_Handler();
 8000d24:	f000 f9e4 	bl	80010f0 <Error_Handler>
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000d28:	f000 fd66 	bl	80017f8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <state_loose+0xac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d9b8      	bls.n	8000cb0 <state_loose+0x8>
	}

	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <state_loose+0xac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2201      	movs	r2, #1
 8000d44:	771a      	strb	r2, [r3, #28]
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000d8 	.word	0x200000d8
 8000d54:	200000dc 	.word	0x200000dc

08000d58 <display_letter>:

HAL_StatusTypeDef display_letter(MAX7219_Handle_TypeDef max7219_handle,char letter, int pos) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	1d3c      	adds	r4, r7, #4
 8000d60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d64:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef max7219_status;

	if (letter >= 'A' && letter <= 'Z') {
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	2b40      	cmp	r3, #64	; 0x40
 8000d6a:	d90e      	bls.n	8000d8a <display_letter+0x32>
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b5a      	cmp	r3, #90	; 0x5a
 8000d70:	d80b      	bhi.n	8000d8a <display_letter+0x32>
		max7219_status = max7219_display_no_decode(pos, LETTERS[letter - 'A']);
 8000d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	3b41      	subs	r3, #65	; 0x41
 8000d7a:	4906      	ldr	r1, [pc, #24]	; (8000d94 <display_letter+0x3c>)
 8000d7c:	5ccb      	ldrb	r3, [r1, r3]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4610      	mov	r0, r2
 8000d82:	f000 fc1b 	bl	80015bc <max7219_display_no_decode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	75fb      	strb	r3, [r7, #23]
	}
	return max7219_status;
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	371c      	adds	r7, #28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000030 	.word	0x20000030

08000d98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin) {
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000da8:	d014      	beq.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x3c>
 8000daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dae:	dc26      	bgt.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
 8000db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_EXTI_Callback+0x2e>
 8000db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dba:	dc20      	bgt.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_EXTI_Callback+0x58>
 8000dc0:	2b40      	cmp	r3, #64	; 0x40
 8000dc2:	d00e      	beq.n	8000de2 <HAL_GPIO_EXTI_Callback+0x4a>
	case BTN4_Pin:
		fsm_handle->inputs.nb_press_btn4++;
		break;
	}

}
 8000dc4:	e01b      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn1++;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	7c1a      	ldrb	r2, [r3, #16]
 8000dcc:	3201      	adds	r2, #1
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	741a      	strb	r2, [r3, #16]
		break;
 8000dd2:	e014      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn2++;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	7c5a      	ldrb	r2, [r3, #17]
 8000dda:	3201      	adds	r2, #1
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	745a      	strb	r2, [r3, #17]
		break;
 8000de0:	e00d      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn3++;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	7c9a      	ldrb	r2, [r3, #18]
 8000de8:	3201      	adds	r2, #1
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	749a      	strb	r2, [r3, #18]
		break;
 8000dee:	e006      	b.n	8000dfe <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn4++;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_GPIO_EXTI_Callback+0x70>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	7cda      	ldrb	r2, [r3, #19]
 8000df6:	3201      	adds	r2, #1
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	74da      	strb	r2, [r3, #19]
		break;
 8000dfc:	bf00      	nop
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	200000dc 	.word	0x200000dc

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b092      	sub	sp, #72	; 0x48
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fc8d 	bl	8001730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f82b 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f8fb 	bl	8001014 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e1e:	f000 f875 	bl	8000f0c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e22:	f000 f8a9 	bl	8000f78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Handle_TypeDef max7219_handle ={
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <main+0x60>)
 8000e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            &hspi1,
            NCS_GPIO_Port,
            NCS_Pin,
            4
    };
  HAL_StatusTypeDef game_status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    Game_Handle_TypeDef game_handler = {
 8000e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            max7219_handle,
    };

    FSM_Handle_TypeDef fsm_handler;

    init_game(&game_handler, &fsm_handler);
 8000e46:	463a      	mov	r2, r7
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb8c 	bl	800056c <init_game>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  game_status=run_game();
 8000e54:	f7ff fbc2 	bl	80005dc <run_game>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  if(game_status != HAL_OK)Error_Handler();
 8000e5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f6      	beq.n	8000e54 <main+0x48>
 8000e66:	f000 f943 	bl	80010f0 <Error_Handler>
	  game_status=run_game();
 8000e6a:	e7f3      	b.n	8000e54 <main+0x48>
 8000e6c:	0800457c 	.word	0x0800457c

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b092      	sub	sp, #72	; 0x48
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f002 fc80 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <SystemClock_Config+0x98>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <SystemClock_Config+0x98>)
 8000e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000eb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000ebc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 ffa2 	bl	8001e10 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ed2:	f000 f90d 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2303      	movs	r3, #3
 8000edc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	2101      	movs	r1, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fabe 	bl	8002470 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000efa:	f000 f8f9 	bl	80010f0 <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3748      	adds	r7, #72	; 0x48
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40007000 	.word	0x40007000

08000f0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <MX_SPI1_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f58:	220a      	movs	r2, #10
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f5e:	f001 fcd9 	bl	8002914 <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f68:	f000 f8c2 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000e8 	.word	0x200000e8
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_TIM2_Init+0x98>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_TIM2_Init+0x98>)
 8000f9e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000fa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM2_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_TIM2_Init+0x98>)
 8000fac:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000fb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <MX_TIM2_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_TIM2_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <MX_TIM2_Init+0x98>)
 8000fc0:	f001 ff3e 	bl	8002e40 <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fca:	f000 f891 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_TIM2_Init+0x98>)
 8000fdc:	f002 f84b 	bl	8003076 <HAL_TIM_ConfigClockSource>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fe6:	f000 f883 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM2_Init+0x98>)
 8000ff8:	f002 fa38 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001002:	f000 f875 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000140 	.word	0x20000140

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <MX_GPIO_Init+0xd0>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <MX_GPIO_Init+0xd0>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4821      	ldr	r0, [pc, #132]	; (80010e8 <MX_GPIO_Init+0xd4>)
 8001062:	f000 fe7f 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 8001066:	2360      	movs	r3, #96	; 0x60
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	481c      	ldr	r0, [pc, #112]	; (80010ec <MX_GPIO_Init+0xd8>)
 800107c:	f000 fce2 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 8001080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001084:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <MX_GPIO_Init+0xd4>)
 800109a:	f000 fcd3 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800109e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_GPIO_Init+0xd4>)
 80010b6:	f000 fcc5 	bl	8001a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2017      	movs	r0, #23
 80010c0:	f000 fc89 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010c4:	2017      	movs	r0, #23
 80010c6:	f000 fca2 	bl	8001a0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f000 fc81 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d4:	2028      	movs	r0, #40	; 0x28
 80010d6:	f000 fc9a 	bl	8001a0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020800 	.word	0x40020800

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_MspInit+0x58>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <HAL_MspInit+0x58>)
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_MspInit+0x58>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_MspInit+0x58>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_MspInit+0x58>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_MspInit+0x58>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_MspInit+0x58>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_MspInit+0x58>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6253      	str	r3, [r2, #36]	; 0x24
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_MspInit+0x58>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_SPI_MspInit+0x7c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d127      	bne.n	80011ca <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_SPI_MspInit+0x80>)
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_SPI_MspInit+0x80>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001184:	6213      	str	r3, [r2, #32]
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_SPI_MspInit+0x80>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_SPI_MspInit+0x80>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_SPI_MspInit+0x80>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_SPI_MspInit+0x80>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011aa:	23a0      	movs	r3, #160	; 0xa0
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_SPI_MspInit+0x84>)
 80011c6:	f000 fc3d 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f0:	d113      	bne.n	800121a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6253      	str	r3, [r2, #36]	; 0x24
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_TIM_Base_MspInit+0x44>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201c      	movs	r0, #28
 8001210:	f000 fbe1 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001214:	201c      	movs	r0, #28
 8001216:	f000 fbfa 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126e:	f000 fab1 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 800127a:	2020      	movs	r0, #32
 800127c:	f000 fd8a 	bl	8001d94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001280:	2040      	movs	r0, #64	; 0x40
 8001282:	f000 fd87 	bl	8001d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM2_IRQHandler+0x10>)
 8001292:	f001 fe14 	bl	8002ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000140 	.word	0x20000140

080012a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80012a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012a8:	f000 fd74 	bl	8001d94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80012ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012b0:	f000 fd70 	bl	8001d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return 1;
 80012bc:	2301      	movs	r3, #1
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <_kill>:

int _kill(int pid, int sig)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d0:	f002 fa60 	bl	8003794 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2216      	movs	r2, #22
 80012d8:	601a      	str	r2, [r3, #0]
  return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_exit>:

void _exit (int status)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffe7 	bl	80012c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f8:	e7fe      	b.n	80012f8 <_exit+0x12>

080012fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e00a      	b.n	8001322 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130c:	f3af 8000 	nop.w
 8001310:	4601      	mov	r1, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	60ba      	str	r2, [r7, #8]
 8001318:	b2ca      	uxtb	r2, r1
 800131a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	dbf0      	blt.n	800130c <_read+0x12>
  }

  return len;
 800132a:	687b      	ldr	r3, [r7, #4]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e009      	b.n	800135a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	429a      	cmp	r2, r3
 8001360:	dbf1      	blt.n	8001346 <_write+0x12>
  }
  return len;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_close>:

int _close(int file)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	605a      	str	r2, [r3, #4]
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <_isatty>:

int _isatty(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f002 f9ca 	bl	8003794 <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20014000 	.word	0x20014000
 800142c:	00000400 	.word	0x00000400
 8001430:	20000180 	.word	0x20000180
 8001434:	200002d8 	.word	0x200002d8

08001438 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff fff8 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800144a:	490c      	ldr	r1, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <LoopFillZerobss+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001460:	4c09      	ldr	r4, [pc, #36]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f002 f997 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fccb 	bl	8000e0c <main>
  bx lr
 8001476:	4770      	bx	lr
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001480:	08004694 	.word	0x08004694
  ldr r2, =_sbss
 8001484:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001488:	200002d8 	.word	0x200002d8

0800148c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_IRQHandler>
	...

08001490 <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	723b      	strb	r3, [r7, #8]
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 80014a8:	2302      	movs	r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 80014ac:	2300      	movs	r3, #0
 80014ae:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <max7219_transmit+0x6c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6858      	ldr	r0, [r3, #4]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <max7219_transmit+0x6c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	891b      	ldrh	r3, [r3, #8]
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	f000 fc50 	bl	8001d64 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <max7219_transmit+0x6c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f107 0108 	add.w	r1, r7, #8
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	f001 faa7 	bl	8002a26 <HAL_SPI_Transmit>
 80014d8:	4603      	mov	r3, r0
 80014da:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <max7219_transmit+0x6c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6858      	ldr	r0, [r3, #4]
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <max7219_transmit+0x6c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	891b      	ldrh	r3, [r3, #8]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	f000 fc3a 	bl	8001d64 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 80014f0:	7afb      	ldrb	r3, [r7, #11]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000184 	.word	0x20000184

08001500 <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <max7219_init+0xb8>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <max7219_init+0xb8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <max7219_init+0x20>
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <max7219_init+0xb8>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	e047      	b.n	80015b0 <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8001524:	2100      	movs	r1, #0
 8001526:	200c      	movs	r0, #12
 8001528:	f7ff ffb2 	bl	8001490 <max7219_transmit>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <max7219_init+0x3a>
		return max7219_status;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	e03a      	b.n	80015b0 <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 800153a:	2101      	movs	r1, #1
 800153c:	200c      	movs	r0, #12
 800153e:	f7ff ffa7 	bl	8001490 <max7219_transmit>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <max7219_init+0x50>
		return max7219_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	e02f      	b.n	80015b0 <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <max7219_init+0xb8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	7a9b      	ldrb	r3, [r3, #10]
 8001556:	3b01      	subs	r3, #1
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	200b      	movs	r0, #11
 800155e:	f7ff ff97 	bl	8001490 <max7219_transmit>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <max7219_init+0x70>
		return max7219_status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	e01f      	b.n	80015b0 <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001570:	2100      	movs	r1, #0
 8001572:	2009      	movs	r0, #9
 8001574:	f7ff ff8c 	bl	8001490 <max7219_transmit>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <max7219_init+0x86>
		return max7219_status;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	e014      	b.n	80015b0 <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 8001586:	2108      	movs	r1, #8
 8001588:	200a      	movs	r0, #10
 800158a:	f7ff ff81 	bl	8001490 <max7219_transmit>
 800158e:	4603      	mov	r3, r0
 8001590:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <max7219_init+0x9c>
		return max7219_status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	e009      	b.n	80015b0 <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 800159c:	f000 f88a 	bl	80016b4 <max7219_erase_no_decode>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <max7219_init+0xae>
		return max7219_status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	e000      	b.n	80015b0 <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000184 	.word	0x20000184

080015bc <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <max7219_display_no_decode+0x74>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d104      	bne.n	80015e2 <max7219_display_no_decode+0x26>
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <max7219_display_no_decode+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	e022      	b.n	8001628 <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 80015e2:	2100      	movs	r1, #0
 80015e4:	2009      	movs	r0, #9
 80015e6:	f7ff ff53 	bl	8001490 <max7219_transmit>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <max7219_display_no_decode+0x3c>
		return max7219_status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	e017      	b.n	8001628 <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <max7219_display_no_decode+0x74>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	7a9b      	ldrb	r3, [r3, #10]
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	429a      	cmp	r2, r3
 8001602:	d901      	bls.n	8001608 <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e00f      	b.n	8001628 <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <max7219_display_no_decode+0x78>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	79ba      	ldrb	r2, [r7, #6]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff3c 	bl	8001490 <max7219_transmit>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <max7219_display_no_decode+0x6a>
		return max7219_status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	e000      	b.n	8001628 <max7219_display_no_decode+0x6c>

	return max7219_status;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000184 	.word	0x20000184
 8001634:	20000050 	.word	0x20000050

08001638 <max7219_display_decode>:
 * @brief Display value with code B decoding.
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_decode(uint8_t _digit_index, uint8_t _digit_value){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	460a      	mov	r2, r1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	4613      	mov	r3, r2
 8001646:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <max7219_display_decode+0x74>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d104      	bne.n	800165e <max7219_display_decode+0x26>
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <max7219_display_decode+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	2301      	movs	r3, #1
 800165c:	e022      	b.n	80016a4 <max7219_display_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <max7219_display_decode+0x74>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	7a9b      	ldrb	r3, [r3, #10]
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	429a      	cmp	r2, r3
 8001668:	d901      	bls.n	800166e <max7219_display_decode+0x36>
		return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e01a      	b.n	80016a4 <max7219_display_decode+0x6c>

	// Set decode mode to 'decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0xFF);
 800166e:	21ff      	movs	r1, #255	; 0xff
 8001670:	2009      	movs	r0, #9
 8001672:	f7ff ff0d 	bl	8001490 <max7219_transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <max7219_display_decode+0x4c>
		return max7219_status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	e00f      	b.n	80016a4 <max7219_display_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <max7219_display_decode+0x78>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	79ba      	ldrb	r2, [r7, #6]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fefe 	bl	8001490 <max7219_transmit>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <max7219_display_decode+0x6a>
		return max7219_status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	e000      	b.n	80016a4 <max7219_display_decode+0x6c>

	return max7219_status;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000184 	.word	0x20000184
 80016b0:	20000050 	.word	0x20000050

080016b4 <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <max7219_erase_no_decode+0x74>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <max7219_erase_no_decode+0x1c>
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <max7219_erase_no_decode+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	e027      	b.n	8001720 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 80016d0:	2100      	movs	r1, #0
 80016d2:	2009      	movs	r0, #9
 80016d4:	f7ff fedc 	bl	8001490 <max7219_transmit>
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <max7219_erase_no_decode+0x32>
		return max7219_status;
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	e01c      	b.n	8001720 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	e011      	b.n	8001710 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <max7219_erase_no_decode+0x78>)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff feca 	bl	8001490 <max7219_transmit>
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <max7219_erase_no_decode+0x56>
			return max7219_status;
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	e00a      	b.n	8001720 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <max7219_erase_no_decode+0x74>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	7a9b      	ldrb	r3, [r3, #10]
 8001716:	461a      	mov	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4293      	cmp	r3, r2
 800171c:	dbe6      	blt.n	80016ec <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 800171e:	79fb      	ldrb	r3, [r7, #7]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000184 	.word	0x20000184
 800172c:	20000050 	.word	0x20000050

08001730 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173a:	2003      	movs	r0, #3
 800173c:	f000 f940 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001740:	200f      	movs	r0, #15
 8001742:	f000 f80d 	bl	8001760 <HAL_InitTick>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	e001      	b.n	8001756 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001752:	f7ff fcd3 	bl	80010fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001756:	79fb      	ldrb	r3, [r7, #7]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_InitTick+0x68>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d022      	beq.n	80017ba <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_InitTick+0x6c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_InitTick+0x68>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001780:	fbb1 f3f3 	udiv	r3, r1, r3
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f94e 	bl	8001a2a <HAL_SYSTICK_Config>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10f      	bne.n	80017b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	d809      	bhi.n	80017ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179a:	2200      	movs	r2, #0
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a2:	f000 f918 	bl	80019d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_InitTick+0x70>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e007      	b.n	80017be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e004      	b.n	80017be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e001      	b.n	80017be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000005c 	.word	0x2000005c
 80017cc:	2000004c 	.word	0x2000004c
 80017d0:	20000058 	.word	0x20000058

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_IncTick+0x1c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_IncTick+0x20>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_IncTick+0x1c>)
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000188 	.word	0x20000188
 80017f4:	2000005c 	.word	0x2000005c

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_GetTick+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000188 	.word	0x20000188

0800180c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <HAL_SuspendTick+0x18>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_SuspendTick+0x18>)
 8001816:	f023 0302 	bic.w	r3, r3, #2
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	e000e010 	.word	0xe000e010

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4906      	ldr	r1, [pc, #24]	; (80018c0 <__NVIC_EnableIRQ+0x34>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff90 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff2d 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff42 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff90 	bl	8001918 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5f 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff35 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a5a:	e160      	b.n	8001d1e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2101      	movs	r1, #1
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8152 	beq.w	8001d18 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d005      	beq.n	8001a8c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d130      	bne.n	8001aee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 0201 	and.w	r2, r3, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d017      	beq.n	8001b2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d123      	bne.n	8001b7e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0203 	and.w	r2, r3, #3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80ac 	beq.w	8001d18 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc0:	4b5e      	ldr	r3, [pc, #376]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a5d      	ldr	r2, [pc, #372]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bd8:	4a59      	ldr	r2, [pc, #356]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d025      	beq.n	8001c50 <HAL_GPIO_Init+0x20c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d01f      	beq.n	8001c4c <HAL_GPIO_Init+0x208>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d019      	beq.n	8001c48 <HAL_GPIO_Init+0x204>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d013      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00d      	beq.n	8001c40 <HAL_GPIO_Init+0x1fc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d007      	beq.n	8001c3c <HAL_GPIO_Init+0x1f8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_GPIO_Init+0x1f4>
 8001c34:	2306      	movs	r3, #6
 8001c36:	e00c      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c38:	2307      	movs	r3, #7
 8001c3a:	e00a      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c3c:	2305      	movs	r3, #5
 8001c3e:	e008      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c50:	2300      	movs	r3, #0
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c62:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c70:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c94:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cbe:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f ae97 	bne.w	8001a5c <HAL_GPIO_Init+0x18>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fff0 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 0203 	bic.w	r2, r3, #3
 8001dd8:	490b      	ldr	r1, [pc, #44]	; (8001e08 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_PWR_EnterSLEEPMode+0x48>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_PWR_EnterSLEEPMode+0x48>)
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001df2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001df4:	e002      	b.n	8001dfc <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 8001df6:	bf40      	sev
    __WFE();
 8001df8:	bf20      	wfe
    __WFE();
 8001dfa:	bf20      	wfe
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e31d      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	4b94      	ldr	r3, [pc, #592]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2c:	4b91      	ldr	r3, [pc, #580]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d07b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d006      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d10f      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b87      	ldr	r3, [pc, #540]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06a      	beq.n	8001f38 <HAL_RCC_OscConfig+0x128>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d166      	bne.n	8001f38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e2f7      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e02d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x96>
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a78      	ldr	r2, [pc, #480]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a75      	ldr	r2, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e01c      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xb8>
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a70      	ldr	r2, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd0>
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a66      	ldr	r2, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fc86 	bl	80017f8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fc82 	bl	80017f8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e2ad      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc72 	bl	80017f8 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fc6e 	bl	80017f8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e299      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f2a:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d05a      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_OscConfig+0x176>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d116      	bne.n	8001f86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x160>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e276      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	493d      	ldr	r1, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f84:	e03a      	b.n	8001ffc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d020      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCC_OscConfig+0x268>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fc30 	bl	80017f8 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fc2c 	bl	80017f8 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e257      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	492a      	ldr	r1, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
 8001fce:	e015      	b.n	8001ffc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_OscConfig+0x268>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fc0f 	bl	80017f8 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fc0b 	bl	80017f8 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e236      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80b8 	beq.w	800217a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d170      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x218>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e21a      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1a      	ldr	r2, [r3, #32]
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002034:	429a      	cmp	r2, r3
 8002036:	d921      	bls.n	800207c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fc09 	bl	8002854 <RCC_SetFlashLatencyFromMSIRange>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e208      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4906      	ldr	r1, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	4901      	ldr	r1, [pc, #4]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
 8002072:	e020      	b.n	80020b6 <HAL_RCC_OscConfig+0x2a6>
 8002074:	40023800 	.word	0x40023800
 8002078:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4996      	ldr	r1, [pc, #600]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	4b95      	ldr	r3, [pc, #596]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	4991      	ldr	r1, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fbd4 	bl	8002854 <RCC_SetFlashLatencyFromMSIRange>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1d3      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	0b5b      	lsrs	r3, r3, #13
 80020bc:	3301      	adds	r3, #1
 80020be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80020c8:	6892      	ldr	r2, [r2, #8]
 80020ca:	0912      	lsrs	r2, r2, #4
 80020cc:	f002 020f 	and.w	r2, r2, #15
 80020d0:	4985      	ldr	r1, [pc, #532]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	5c8a      	ldrb	r2, [r1, r2]
 80020d4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020d6:	4a85      	ldr	r2, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x4dc>)
 80020d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020da:	4b85      	ldr	r3, [pc, #532]	; (80022f0 <HAL_RCC_OscConfig+0x4e0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fb3e 	bl	8001760 <HAL_InitTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d045      	beq.n	800217a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	e1b5      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d029      	beq.n	800214e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020fa:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x4e4>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb7a 	bl	80017f8 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002108:	f7ff fb76 	bl	80017f8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1a1      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800211a:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002126:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	496c      	ldr	r1, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	4967      	ldr	r1, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800214e:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4e4>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fb50 	bl	80017f8 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215c:	f7ff fb4c 	bl	80017f8 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e177      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d030      	beq.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7ff fb30 	bl	80017f8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff fb2c 	bl	80017f8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e157      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x38c>
 80021ba:	e015      	b.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fb19 	bl	80017f8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff fb15 	bl	80017f8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e140      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021dc:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80b5 	beq.w	8002360 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6253      	str	r3, [r2, #36]	; 0x24
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff fadd 	bl	80017f8 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff fad9 	bl	80017f8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e104      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x466>
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	6353      	str	r3, [r2, #52]	; 0x34
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x488>
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002288:	6353      	str	r3, [r2, #52]	; 0x34
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002294:	6353      	str	r3, [r2, #52]	; 0x34
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x4aa>
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6353      	str	r3, [r2, #52]	; 0x34
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	6353      	str	r3, [r2, #52]	; 0x34
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	6353      	str	r3, [r2, #52]	; 0x34
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d024      	beq.n	8002324 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff fa8d 	bl	80017f8 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e0:	e019      	b.n	8002316 <HAL_RCC_OscConfig+0x506>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	08004594 	.word	0x08004594
 80022ec:	2000004c 	.word	0x2000004c
 80022f0:	20000058 	.word	0x20000058
 80022f4:	42470020 	.word	0x42470020
 80022f8:	42470680 	.word	0x42470680
 80022fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7ff fa7a 	bl	80017f8 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0a3      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002316:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <HAL_RCC_OscConfig+0x4f0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7ff fa68 	bl	80017f8 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7ff fa64 	bl	80017f8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e08d      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800234e:	7ffb      	ldrb	r3, [r7, #31]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	4a43      	ldr	r2, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d079      	beq.n	800245c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d056      	beq.n	800241c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b02      	cmp	r3, #2
 8002374:	d13b      	bne.n	80023ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x65c>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fa3c 	bl	80017f8 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff fa38 	bl	80017f8 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e063      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	4319      	orrs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	430b      	orrs	r3, r1
 80023ba:	492b      	ldr	r1, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x65c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fa17 	bl	80017f8 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff fa13 	bl	80017f8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03e      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x5be>
 80023ec:	e036      	b.n	800245c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_RCC_OscConfig+0x65c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa00 	bl	80017f8 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff f9fc 	bl	80017f8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e027      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x5ec>
 800241a:	e01f      	b.n	800245c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01a      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	429a      	cmp	r2, r3
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	42470060 	.word	0x42470060

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e11a      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b8f      	ldr	r3, [pc, #572]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d919      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x34>
 8002498:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a89      	ldr	r2, [pc, #548]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b87      	ldr	r3, [pc, #540]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0201 	bic.w	r2, r3, #1
 80024ac:	4985      	ldr	r1, [pc, #532]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b83      	ldr	r3, [pc, #524]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0f9      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d2:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	497a      	ldr	r1, [pc, #488]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 808e 	beq.w	800260e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d121      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0d7      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002512:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0cb      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0bf      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0b7      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	495c      	ldr	r1, [pc, #368]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7ff f94c 	bl	80017f8 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d112      	bne.n	8002590 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff f944 	bl	80017f8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e09b      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002582:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d1ee      	bne.n	800256c <HAL_RCC_ClockConfig+0xfc>
 800258e:	e03e      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d112      	bne.n	80025be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259a:	f7ff f92d 	bl	80017f8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e084      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d1ee      	bne.n	800259a <HAL_RCC_ClockConfig+0x12a>
 80025bc:	e027      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d11d      	bne.n	8002602 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff f916 	bl	80017f8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e06d      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d1ee      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x158>
 80025ea:	e010      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7ff f904 	bl	80017f8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e05b      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ee      	bne.n	80025ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d219      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_RCC_ClockConfig+0x1be>
 8002622:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0201 	bic.w	r2, r3, #1
 8002636:	4923      	ldr	r1, [pc, #140]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e034      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4917      	ldr	r1, [pc, #92]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490f      	ldr	r1, [pc, #60]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f823 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490b      	ldr	r1, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x25c>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f856 	bl	8001760 <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80026b8:	7afb      	ldrb	r3, [r7, #11]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08004594 	.word	0x08004594
 80026d0:	2000004c 	.word	0x2000004c
 80026d4:	20000058 	.word	0x20000058

080026d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b08e      	sub	sp, #56	; 0x38
 80026de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80026e0:	4b58      	ldr	r3, [pc, #352]	; (8002844 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d00d      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	f200 8092 	bhi.w	800281a <HAL_RCC_GetSysClockFreq+0x142>
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x28>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x2e>
 80026fe:	e08c      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b51      	ldr	r3, [pc, #324]	; (8002848 <HAL_RCC_GetSysClockFreq+0x170>)
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002704:	e097      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002706:	4b51      	ldr	r3, [pc, #324]	; (800284c <HAL_RCC_GetSysClockFreq+0x174>)
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270a:	e094      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_RCC_GetSysClockFreq+0x178>)
 8002716:	5c9b      	ldrb	r3, [r3, r2]
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	0d9b      	lsrs	r3, r3, #22
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	3301      	adds	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d021      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	2200      	movs	r2, #0
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	61fa      	str	r2, [r7, #28]
 800273a:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_GetSysClockFreq+0x174>)
 800273c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002740:	464a      	mov	r2, r9
 8002742:	fb03 f202 	mul.w	r2, r3, r2
 8002746:	2300      	movs	r3, #0
 8002748:	4644      	mov	r4, r8
 800274a:	fb04 f303 	mul.w	r3, r4, r3
 800274e:	4413      	add	r3, r2
 8002750:	4a3e      	ldr	r2, [pc, #248]	; (800284c <HAL_RCC_GetSysClockFreq+0x174>)
 8002752:	4644      	mov	r4, r8
 8002754:	fba4 0102 	umull	r0, r1, r4, r2
 8002758:	440b      	add	r3, r1
 800275a:	4619      	mov	r1, r3
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	2200      	movs	r2, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	617a      	str	r2, [r7, #20]
 8002764:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002768:	f7fd fd08 	bl	800017c <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
 8002774:	e04e      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	2200      	movs	r2, #0
 800277a:	469a      	mov	sl, r3
 800277c:	4693      	mov	fp, r2
 800277e:	4652      	mov	r2, sl
 8002780:	465b      	mov	r3, fp
 8002782:	f04f 0000 	mov.w	r0, #0
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	0159      	lsls	r1, r3, #5
 800278c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002790:	0150      	lsls	r0, r2, #5
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	ebb2 080a 	subs.w	r8, r2, sl
 800279a:	eb63 090b 	sbc.w	r9, r3, fp
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027b2:	ebb2 0408 	subs.w	r4, r2, r8
 80027b6:	eb63 0509 	sbc.w	r5, r3, r9
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	00eb      	lsls	r3, r5, #3
 80027c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c8:	00e2      	lsls	r2, r4, #3
 80027ca:	4614      	mov	r4, r2
 80027cc:	461d      	mov	r5, r3
 80027ce:	eb14 030a 	adds.w	r3, r4, sl
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	eb45 030b 	adc.w	r3, r5, fp
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e6:	4629      	mov	r1, r5
 80027e8:	028b      	lsls	r3, r1, #10
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	4604      	mov	r4, r0
 80027f0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80027f4:	4601      	mov	r1, r0
 80027f6:	028a      	lsls	r2, r1, #10
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	2200      	movs	r2, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	60fa      	str	r2, [r7, #12]
 8002804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002808:	f7fd fcb8 	bl	800017c <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002818:	e00d      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_GetSysClockFreq+0x16c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0b5b      	lsrs	r3, r3, #13
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	3301      	adds	r3, #1
 800282a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002838:	4618      	mov	r0, r3
 800283a:	3738      	adds	r7, #56	; 0x38
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	016e3600 	.word	0x016e3600
 8002850:	08004588 	.word	0x08004588

08002854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d12c      	bne.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e016      	b.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288e:	6253      	str	r3, [r2, #36]	; 0x24
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028a4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028b8:	d105      	bne.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028c0:	d101      	bne.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80028c2:	2301      	movs	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 0201 	bic.w	r2, r3, #1
 80028e0:	490b      	ldr	r1, [pc, #44]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	40023c00 	.word	0x40023c00

08002914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07b      	b.n	8002a1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002936:	d009      	beq.n	800294c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
 800293e:	e005      	b.n	800294c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fbf6 	bl	8001158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	ea42 0103 	orr.w	r1, r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	f003 0104 	and.w	r1, r3, #4
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f003 0210 	and.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b088      	sub	sp, #32
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_SPI_Transmit+0x22>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e12d      	b.n	8002ca4 <HAL_SPI_Transmit+0x27e>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a50:	f7fe fed2 	bl	80017f8 <HAL_GetTick>
 8002a54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a6a:	e116      	b.n	8002c9a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_SPI_Transmit+0x52>
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a7c:	e10d      	b.n	8002c9a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2203      	movs	r2, #3
 8002a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	88fa      	ldrh	r2, [r7, #6]
 8002a9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d007      	beq.n	8002b04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0c:	d14f      	bne.n	8002bae <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SPI_Transmit+0xf6>
 8002b16:	8afb      	ldrh	r3, [r7, #22]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d142      	bne.n	8002ba2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	881a      	ldrh	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b40:	e02f      	b.n	8002ba2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d112      	bne.n	8002b76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b74:	e015      	b.n	8002ba2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b76:	f7fe fe3f 	bl	80017f8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d803      	bhi.n	8002b8e <HAL_SPI_Transmit+0x168>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Transmit+0x16e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ba0:	e07b      	b.n	8002c9a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ca      	bne.n	8002b42 <HAL_SPI_Transmit+0x11c>
 8002bac:	e050      	b.n	8002c50 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_SPI_Transmit+0x196>
 8002bb6:	8afb      	ldrh	r3, [r7, #22]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d144      	bne.n	8002c46 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002be2:	e030      	b.n	8002c46 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d113      	bne.n	8002c1a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c18:	e015      	b.n	8002c46 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1a:	f7fe fded 	bl	80017f8 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d803      	bhi.n	8002c32 <HAL_SPI_Transmit+0x20c>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c30:	d102      	bne.n	8002c38 <HAL_SPI_Transmit+0x212>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c44:	e029      	b.n	8002c9a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1c9      	bne.n	8002be4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f8b1 	bl	8002dbc <SPI_EndRxTxTransaction>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	77fb      	strb	r3, [r7, #31]
 8002c90:	e003      	b.n	8002c9a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cbc:	f7fe fd9c 	bl	80017f8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ccc:	f7fe fd94 	bl	80017f8 <HAL_GetTick>
 8002cd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	015b      	lsls	r3, r3, #5
 8002cd8:	0d1b      	lsrs	r3, r3, #20
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce2:	e054      	b.n	8002d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cea:	d050      	beq.n	8002d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cec:	f7fe fd84 	bl	80017f8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d902      	bls.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d13d      	bne.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d1a:	d111      	bne.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d24:	d004      	beq.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d107      	bne.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d10f      	bne.n	8002d6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e017      	b.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d19b      	bne.n	8002ce4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2000004c 	.word	0x2000004c

08002dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <SPI_EndRxTxTransaction+0x7c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <SPI_EndRxTxTransaction+0x80>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0d5b      	lsrs	r3, r3, #21
 8002dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de6:	d112      	bne.n	8002e0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff ff5a 	bl	8002cac <SPI_WaitFlagStateUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e00f      	b.n	8002e2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d0f2      	beq.n	8002e0e <SPI_EndRxTxTransaction+0x52>
 8002e28:	e000      	b.n	8002e2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002e2a:	bf00      	nop
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000004c 	.word	0x2000004c
 8002e3c:	165e9f81 	.word	0x165e9f81

08002e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e031      	b.n	8002eb6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f9ba 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 f9ee 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d122      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d11b      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0202 	mvn.w	r2, #2
 8002eea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f991 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002f06:	e005      	b.n	8002f14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f984 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f993 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d122      	bne.n	8002f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d11b      	bne.n	8002f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f06f 0204 	mvn.w	r2, #4
 8002f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f967 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002f5a:	e005      	b.n	8002f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f95a 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f969 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d122      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11b      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f06f 0208 	mvn.w	r2, #8
 8002f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2204      	movs	r2, #4
 8002f98:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f93d 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8002fae:	e005      	b.n	8002fbc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f930 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f93f 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b10      	cmp	r3, #16
 8002fce:	d122      	bne.n	8003016 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d11b      	bne.n	8003016 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0210 	mvn.w	r2, #16
 8002fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2208      	movs	r2, #8
 8002fec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f913 	bl	8003228 <HAL_TIM_IC_CaptureCallback>
 8003002:	e005      	b.n	8003010 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f906 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f915 	bl	800323a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10e      	bne.n	8003042 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d107      	bne.n	8003042 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0201 	mvn.w	r2, #1
 800303a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f8e1 	bl	8003204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d10e      	bne.n	800306e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d107      	bne.n	800306e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8ef 	bl	800324c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_TIM_ConfigClockSource+0x1c>
 800308e:	2302      	movs	r3, #2
 8003090:	e0b4      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x186>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ca:	d03e      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xd4>
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d0:	f200 8087 	bhi.w	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d8:	f000 8086 	beq.w	80031e8 <HAL_TIM_ConfigClockSource+0x172>
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e0:	d87f      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 80030e2:	2b70      	cmp	r3, #112	; 0x70
 80030e4:	d01a      	beq.n	800311c <HAL_TIM_ConfigClockSource+0xa6>
 80030e6:	2b70      	cmp	r3, #112	; 0x70
 80030e8:	d87b      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 80030ea:	2b60      	cmp	r3, #96	; 0x60
 80030ec:	d050      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0x11a>
 80030ee:	2b60      	cmp	r3, #96	; 0x60
 80030f0:	d877      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 80030f2:	2b50      	cmp	r3, #80	; 0x50
 80030f4:	d03c      	beq.n	8003170 <HAL_TIM_ConfigClockSource+0xfa>
 80030f6:	2b50      	cmp	r3, #80	; 0x50
 80030f8:	d873      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d058      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0x13a>
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d86f      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003102:	2b30      	cmp	r3, #48	; 0x30
 8003104:	d064      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003106:	2b30      	cmp	r3, #48	; 0x30
 8003108:	d86b      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d060      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15a>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d867      	bhi.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d05c      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003116:	2b10      	cmp	r3, #16
 8003118:	d05a      	beq.n	80031d0 <HAL_TIM_ConfigClockSource+0x15a>
 800311a:	e062      	b.n	80031e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	f000 f97f 	bl	800342e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800313e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
      break;
 8003148:	e04f      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	f000 f968 	bl	800342e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316c:	609a      	str	r2, [r3, #8]
      break;
 800316e:	e03c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317c:	461a      	mov	r2, r3
 800317e:	f000 f8df 	bl	8003340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2150      	movs	r1, #80	; 0x50
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f936 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 800318e:	e02c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800319c:	461a      	mov	r2, r3
 800319e:	f000 f8fd 	bl	800339c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2160      	movs	r1, #96	; 0x60
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f926 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 80031ae:	e01c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031bc:	461a      	mov	r2, r3
 80031be:	f000 f8bf 	bl	8003340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2140      	movs	r1, #64	; 0x40
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f916 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 80031ce:	e00c      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 f90d 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 80031e0:	e003      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	73fb      	strb	r3, [r7, #15]
      break;
 80031e6:	e000      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
	...

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d00f      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <TIM_Base_SetConfig+0xc8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00b      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <TIM_Base_SetConfig+0xcc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d007      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a29      	ldr	r2, [pc, #164]	; (8003330 <TIM_Base_SetConfig+0xd0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d003      	beq.n	8003298 <TIM_Base_SetConfig+0x38>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a28      	ldr	r2, [pc, #160]	; (8003334 <TIM_Base_SetConfig+0xd4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d017      	beq.n	80032e2 <TIM_Base_SetConfig+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <TIM_Base_SetConfig+0xc8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_Base_SetConfig+0x82>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <TIM_Base_SetConfig+0xcc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0x82>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1a      	ldr	r2, [pc, #104]	; (8003330 <TIM_Base_SetConfig+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x82>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <TIM_Base_SetConfig+0xd4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x82>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <TIM_Base_SetConfig+0xd8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x82>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <TIM_Base_SetConfig+0xdc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	615a      	str	r2, [r3, #20]
}
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40010800 	.word	0x40010800
 8003338:	40010c00 	.word	0x40010c00
 800333c:	40011000 	.word	0x40011000

08003340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0201 	bic.w	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800336a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f023 030a 	bic.w	r3, r3, #10
 800337c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0210 	bic.w	r2, r3, #16
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	031b      	lsls	r3, r3, #12
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	f043 0307 	orr.w	r3, r3, #7
 800341c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003448:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	021a      	lsls	r2, r3, #8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	431a      	orrs	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4313      	orrs	r3, r2
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	609a      	str	r2, [r3, #8]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e046      	b.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c6:	d00e      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a13      	ldr	r2, [pc, #76]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d009      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10c      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40000400 	.word	0x40000400
 8003520:	40000800 	.word	0x40000800
 8003524:	40010800 	.word	0x40010800

08003528 <srand>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <srand+0x44>)
 800352c:	4604      	mov	r4, r0
 800352e:	681d      	ldr	r5, [r3, #0]
 8003530:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003532:	b9b3      	cbnz	r3, 8003562 <srand+0x3a>
 8003534:	2018      	movs	r0, #24
 8003536:	f000 f979 	bl	800382c <malloc>
 800353a:	4602      	mov	r2, r0
 800353c:	6328      	str	r0, [r5, #48]	; 0x30
 800353e:	b920      	cbnz	r0, 800354a <srand+0x22>
 8003540:	2146      	movs	r1, #70	; 0x46
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <srand+0x48>)
 8003544:	480b      	ldr	r0, [pc, #44]	; (8003574 <srand+0x4c>)
 8003546:	f000 f953 	bl	80037f0 <__assert_func>
 800354a:	490b      	ldr	r1, [pc, #44]	; (8003578 <srand+0x50>)
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <srand+0x54>)
 800354e:	e9c0 1300 	strd	r1, r3, [r0]
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <srand+0x58>)
 8003554:	2100      	movs	r1, #0
 8003556:	6083      	str	r3, [r0, #8]
 8003558:	230b      	movs	r3, #11
 800355a:	8183      	strh	r3, [r0, #12]
 800355c:	2001      	movs	r0, #1
 800355e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003562:	2200      	movs	r2, #0
 8003564:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003566:	611c      	str	r4, [r3, #16]
 8003568:	615a      	str	r2, [r3, #20]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	200000b8 	.word	0x200000b8
 8003570:	080045a4 	.word	0x080045a4
 8003574:	080045bb 	.word	0x080045bb
 8003578:	abcd330e 	.word	0xabcd330e
 800357c:	e66d1234 	.word	0xe66d1234
 8003580:	0005deec 	.word	0x0005deec

08003584 <rand>:
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <rand+0x5c>)
 8003586:	b510      	push	{r4, lr}
 8003588:	681c      	ldr	r4, [r3, #0]
 800358a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800358c:	b9b3      	cbnz	r3, 80035bc <rand+0x38>
 800358e:	2018      	movs	r0, #24
 8003590:	f000 f94c 	bl	800382c <malloc>
 8003594:	4602      	mov	r2, r0
 8003596:	6320      	str	r0, [r4, #48]	; 0x30
 8003598:	b920      	cbnz	r0, 80035a4 <rand+0x20>
 800359a:	2152      	movs	r1, #82	; 0x52
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <rand+0x60>)
 800359e:	4812      	ldr	r0, [pc, #72]	; (80035e8 <rand+0x64>)
 80035a0:	f000 f926 	bl	80037f0 <__assert_func>
 80035a4:	4911      	ldr	r1, [pc, #68]	; (80035ec <rand+0x68>)
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <rand+0x6c>)
 80035a8:	e9c0 1300 	strd	r1, r3, [r0]
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <rand+0x70>)
 80035ae:	2100      	movs	r1, #0
 80035b0:	6083      	str	r3, [r0, #8]
 80035b2:	230b      	movs	r3, #11
 80035b4:	8183      	strh	r3, [r0, #12]
 80035b6:	2001      	movs	r0, #1
 80035b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80035bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035be:	480e      	ldr	r0, [pc, #56]	; (80035f8 <rand+0x74>)
 80035c0:	690b      	ldr	r3, [r1, #16]
 80035c2:	694c      	ldr	r4, [r1, #20]
 80035c4:	4358      	muls	r0, r3
 80035c6:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <rand+0x78>)
 80035c8:	fb02 0004 	mla	r0, r2, r4, r0
 80035cc:	fba3 3202 	umull	r3, r2, r3, r2
 80035d0:	3301      	adds	r3, #1
 80035d2:	eb40 0002 	adc.w	r0, r0, r2
 80035d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80035da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80035de:	bd10      	pop	{r4, pc}
 80035e0:	200000b8 	.word	0x200000b8
 80035e4:	080045a4 	.word	0x080045a4
 80035e8:	080045bb 	.word	0x080045bb
 80035ec:	abcd330e 	.word	0xabcd330e
 80035f0:	e66d1234 	.word	0xe66d1234
 80035f4:	0005deec 	.word	0x0005deec
 80035f8:	5851f42d 	.word	0x5851f42d
 80035fc:	4c957f2d 	.word	0x4c957f2d

08003600 <std>:
 8003600:	2300      	movs	r3, #0
 8003602:	b510      	push	{r4, lr}
 8003604:	4604      	mov	r4, r0
 8003606:	e9c0 3300 	strd	r3, r3, [r0]
 800360a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800360e:	6083      	str	r3, [r0, #8]
 8003610:	8181      	strh	r1, [r0, #12]
 8003612:	6643      	str	r3, [r0, #100]	; 0x64
 8003614:	81c2      	strh	r2, [r0, #14]
 8003616:	6183      	str	r3, [r0, #24]
 8003618:	4619      	mov	r1, r3
 800361a:	2208      	movs	r2, #8
 800361c:	305c      	adds	r0, #92	; 0x5c
 800361e:	f000 f8b1 	bl	8003784 <memset>
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <std+0x58>)
 8003624:	6224      	str	r4, [r4, #32]
 8003626:	6263      	str	r3, [r4, #36]	; 0x24
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <std+0x5c>)
 800362a:	62a3      	str	r3, [r4, #40]	; 0x28
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <std+0x60>)
 800362e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <std+0x64>)
 8003632:	6323      	str	r3, [r4, #48]	; 0x30
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <std+0x68>)
 8003636:	429c      	cmp	r4, r3
 8003638:	d006      	beq.n	8003648 <std+0x48>
 800363a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800363e:	4294      	cmp	r4, r2
 8003640:	d002      	beq.n	8003648 <std+0x48>
 8003642:	33d0      	adds	r3, #208	; 0xd0
 8003644:	429c      	cmp	r4, r3
 8003646:	d105      	bne.n	8003654 <std+0x54>
 8003648:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800364c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003650:	f000 b8ca 	b.w	80037e8 <__retarget_lock_init_recursive>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	bf00      	nop
 8003658:	08003ae9 	.word	0x08003ae9
 800365c:	08003b0b 	.word	0x08003b0b
 8003660:	08003b43 	.word	0x08003b43
 8003664:	08003b67 	.word	0x08003b67
 8003668:	2000018c 	.word	0x2000018c

0800366c <stdio_exit_handler>:
 800366c:	4a02      	ldr	r2, [pc, #8]	; (8003678 <stdio_exit_handler+0xc>)
 800366e:	4903      	ldr	r1, [pc, #12]	; (800367c <stdio_exit_handler+0x10>)
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <stdio_exit_handler+0x14>)
 8003672:	f000 b869 	b.w	8003748 <_fwalk_sglue>
 8003676:	bf00      	nop
 8003678:	20000060 	.word	0x20000060
 800367c:	08003a81 	.word	0x08003a81
 8003680:	2000006c 	.word	0x2000006c

08003684 <cleanup_stdio>:
 8003684:	6841      	ldr	r1, [r0, #4]
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <cleanup_stdio+0x34>)
 8003688:	b510      	push	{r4, lr}
 800368a:	4299      	cmp	r1, r3
 800368c:	4604      	mov	r4, r0
 800368e:	d001      	beq.n	8003694 <cleanup_stdio+0x10>
 8003690:	f000 f9f6 	bl	8003a80 <_fflush_r>
 8003694:	68a1      	ldr	r1, [r4, #8]
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <cleanup_stdio+0x38>)
 8003698:	4299      	cmp	r1, r3
 800369a:	d002      	beq.n	80036a2 <cleanup_stdio+0x1e>
 800369c:	4620      	mov	r0, r4
 800369e:	f000 f9ef 	bl	8003a80 <_fflush_r>
 80036a2:	68e1      	ldr	r1, [r4, #12]
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <cleanup_stdio+0x3c>)
 80036a6:	4299      	cmp	r1, r3
 80036a8:	d004      	beq.n	80036b4 <cleanup_stdio+0x30>
 80036aa:	4620      	mov	r0, r4
 80036ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036b0:	f000 b9e6 	b.w	8003a80 <_fflush_r>
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	bf00      	nop
 80036b8:	2000018c 	.word	0x2000018c
 80036bc:	200001f4 	.word	0x200001f4
 80036c0:	2000025c 	.word	0x2000025c

080036c4 <global_stdio_init.part.0>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <global_stdio_init.part.0+0x30>)
 80036c8:	4c0b      	ldr	r4, [pc, #44]	; (80036f8 <global_stdio_init.part.0+0x34>)
 80036ca:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <global_stdio_init.part.0+0x38>)
 80036cc:	4620      	mov	r0, r4
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	2104      	movs	r1, #4
 80036d2:	2200      	movs	r2, #0
 80036d4:	f7ff ff94 	bl	8003600 <std>
 80036d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036dc:	2201      	movs	r2, #1
 80036de:	2109      	movs	r1, #9
 80036e0:	f7ff ff8e 	bl	8003600 <std>
 80036e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80036e8:	2202      	movs	r2, #2
 80036ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ee:	2112      	movs	r1, #18
 80036f0:	f7ff bf86 	b.w	8003600 <std>
 80036f4:	200002c4 	.word	0x200002c4
 80036f8:	2000018c 	.word	0x2000018c
 80036fc:	0800366d 	.word	0x0800366d

08003700 <__sfp_lock_acquire>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__sfp_lock_acquire+0x8>)
 8003702:	f000 b872 	b.w	80037ea <__retarget_lock_acquire_recursive>
 8003706:	bf00      	nop
 8003708:	200002c9 	.word	0x200002c9

0800370c <__sfp_lock_release>:
 800370c:	4801      	ldr	r0, [pc, #4]	; (8003714 <__sfp_lock_release+0x8>)
 800370e:	f000 b86d 	b.w	80037ec <__retarget_lock_release_recursive>
 8003712:	bf00      	nop
 8003714:	200002c9 	.word	0x200002c9

08003718 <__sinit>:
 8003718:	b510      	push	{r4, lr}
 800371a:	4604      	mov	r4, r0
 800371c:	f7ff fff0 	bl	8003700 <__sfp_lock_acquire>
 8003720:	6a23      	ldr	r3, [r4, #32]
 8003722:	b11b      	cbz	r3, 800372c <__sinit+0x14>
 8003724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003728:	f7ff bff0 	b.w	800370c <__sfp_lock_release>
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <__sinit+0x28>)
 800372e:	6223      	str	r3, [r4, #32]
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <__sinit+0x2c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f5      	bne.n	8003724 <__sinit+0xc>
 8003738:	f7ff ffc4 	bl	80036c4 <global_stdio_init.part.0>
 800373c:	e7f2      	b.n	8003724 <__sinit+0xc>
 800373e:	bf00      	nop
 8003740:	08003685 	.word	0x08003685
 8003744:	200002c4 	.word	0x200002c4

08003748 <_fwalk_sglue>:
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374c:	4607      	mov	r7, r0
 800374e:	4688      	mov	r8, r1
 8003750:	4614      	mov	r4, r2
 8003752:	2600      	movs	r6, #0
 8003754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003758:	f1b9 0901 	subs.w	r9, r9, #1
 800375c:	d505      	bpl.n	800376a <_fwalk_sglue+0x22>
 800375e:	6824      	ldr	r4, [r4, #0]
 8003760:	2c00      	cmp	r4, #0
 8003762:	d1f7      	bne.n	8003754 <_fwalk_sglue+0xc>
 8003764:	4630      	mov	r0, r6
 8003766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800376a:	89ab      	ldrh	r3, [r5, #12]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d907      	bls.n	8003780 <_fwalk_sglue+0x38>
 8003770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003774:	3301      	adds	r3, #1
 8003776:	d003      	beq.n	8003780 <_fwalk_sglue+0x38>
 8003778:	4629      	mov	r1, r5
 800377a:	4638      	mov	r0, r7
 800377c:	47c0      	blx	r8
 800377e:	4306      	orrs	r6, r0
 8003780:	3568      	adds	r5, #104	; 0x68
 8003782:	e7e9      	b.n	8003758 <_fwalk_sglue+0x10>

08003784 <memset>:
 8003784:	4603      	mov	r3, r0
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <__errno>:
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <__errno+0x8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200000b8 	.word	0x200000b8

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	2600      	movs	r6, #0
 80037a4:	4d0c      	ldr	r5, [pc, #48]	; (80037d8 <__libc_init_array+0x38>)
 80037a6:	4c0d      	ldr	r4, [pc, #52]	; (80037dc <__libc_init_array+0x3c>)
 80037a8:	1b64      	subs	r4, r4, r5
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	f000 fed8 	bl	8004564 <_init>
 80037b4:	2600      	movs	r6, #0
 80037b6:	4d0a      	ldr	r5, [pc, #40]	; (80037e0 <__libc_init_array+0x40>)
 80037b8:	4c0a      	ldr	r4, [pc, #40]	; (80037e4 <__libc_init_array+0x44>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	0800468c 	.word	0x0800468c
 80037dc:	0800468c 	.word	0x0800468c
 80037e0:	0800468c 	.word	0x0800468c
 80037e4:	08004690 	.word	0x08004690

080037e8 <__retarget_lock_init_recursive>:
 80037e8:	4770      	bx	lr

080037ea <__retarget_lock_acquire_recursive>:
 80037ea:	4770      	bx	lr

080037ec <__retarget_lock_release_recursive>:
 80037ec:	4770      	bx	lr
	...

080037f0 <__assert_func>:
 80037f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037f2:	4614      	mov	r4, r2
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <__assert_func+0x2c>)
 80037f8:	4605      	mov	r5, r0
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68d8      	ldr	r0, [r3, #12]
 80037fe:	b14c      	cbz	r4, 8003814 <__assert_func+0x24>
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <__assert_func+0x30>)
 8003802:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003806:	9100      	str	r1, [sp, #0]
 8003808:	462b      	mov	r3, r5
 800380a:	4906      	ldr	r1, [pc, #24]	; (8003824 <__assert_func+0x34>)
 800380c:	f000 f9b0 	bl	8003b70 <fiprintf>
 8003810:	f000 fa16 	bl	8003c40 <abort>
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <__assert_func+0x38>)
 8003816:	461c      	mov	r4, r3
 8003818:	e7f3      	b.n	8003802 <__assert_func+0x12>
 800381a:	bf00      	nop
 800381c:	200000b8 	.word	0x200000b8
 8003820:	08004613 	.word	0x08004613
 8003824:	08004620 	.word	0x08004620
 8003828:	0800464e 	.word	0x0800464e

0800382c <malloc>:
 800382c:	4b02      	ldr	r3, [pc, #8]	; (8003838 <malloc+0xc>)
 800382e:	4601      	mov	r1, r0
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	f000 b823 	b.w	800387c <_malloc_r>
 8003836:	bf00      	nop
 8003838:	200000b8 	.word	0x200000b8

0800383c <sbrk_aligned>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4e0e      	ldr	r6, [pc, #56]	; (8003878 <sbrk_aligned+0x3c>)
 8003840:	460c      	mov	r4, r1
 8003842:	6831      	ldr	r1, [r6, #0]
 8003844:	4605      	mov	r5, r0
 8003846:	b911      	cbnz	r1, 800384e <sbrk_aligned+0x12>
 8003848:	f000 f9d8 	bl	8003bfc <_sbrk_r>
 800384c:	6030      	str	r0, [r6, #0]
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 f9d3 	bl	8003bfc <_sbrk_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	d00a      	beq.n	8003870 <sbrk_aligned+0x34>
 800385a:	1cc4      	adds	r4, r0, #3
 800385c:	f024 0403 	bic.w	r4, r4, #3
 8003860:	42a0      	cmp	r0, r4
 8003862:	d007      	beq.n	8003874 <sbrk_aligned+0x38>
 8003864:	1a21      	subs	r1, r4, r0
 8003866:	4628      	mov	r0, r5
 8003868:	f000 f9c8 	bl	8003bfc <_sbrk_r>
 800386c:	3001      	adds	r0, #1
 800386e:	d101      	bne.n	8003874 <sbrk_aligned+0x38>
 8003870:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003874:	4620      	mov	r0, r4
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	200002d0 	.word	0x200002d0

0800387c <_malloc_r>:
 800387c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003880:	1ccd      	adds	r5, r1, #3
 8003882:	f025 0503 	bic.w	r5, r5, #3
 8003886:	3508      	adds	r5, #8
 8003888:	2d0c      	cmp	r5, #12
 800388a:	bf38      	it	cc
 800388c:	250c      	movcc	r5, #12
 800388e:	2d00      	cmp	r5, #0
 8003890:	4607      	mov	r7, r0
 8003892:	db01      	blt.n	8003898 <_malloc_r+0x1c>
 8003894:	42a9      	cmp	r1, r5
 8003896:	d905      	bls.n	80038a4 <_malloc_r+0x28>
 8003898:	230c      	movs	r3, #12
 800389a:	2600      	movs	r6, #0
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4630      	mov	r0, r6
 80038a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003978 <_malloc_r+0xfc>
 80038a8:	f000 f912 	bl	8003ad0 <__malloc_lock>
 80038ac:	f8d8 3000 	ldr.w	r3, [r8]
 80038b0:	461c      	mov	r4, r3
 80038b2:	bb5c      	cbnz	r4, 800390c <_malloc_r+0x90>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	f7ff ffc0 	bl	800383c <sbrk_aligned>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	4604      	mov	r4, r0
 80038c0:	d155      	bne.n	800396e <_malloc_r+0xf2>
 80038c2:	f8d8 4000 	ldr.w	r4, [r8]
 80038c6:	4626      	mov	r6, r4
 80038c8:	2e00      	cmp	r6, #0
 80038ca:	d145      	bne.n	8003958 <_malloc_r+0xdc>
 80038cc:	2c00      	cmp	r4, #0
 80038ce:	d048      	beq.n	8003962 <_malloc_r+0xe6>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	4631      	mov	r1, r6
 80038d4:	4638      	mov	r0, r7
 80038d6:	eb04 0903 	add.w	r9, r4, r3
 80038da:	f000 f98f 	bl	8003bfc <_sbrk_r>
 80038de:	4581      	cmp	r9, r0
 80038e0:	d13f      	bne.n	8003962 <_malloc_r+0xe6>
 80038e2:	6821      	ldr	r1, [r4, #0]
 80038e4:	4638      	mov	r0, r7
 80038e6:	1a6d      	subs	r5, r5, r1
 80038e8:	4629      	mov	r1, r5
 80038ea:	f7ff ffa7 	bl	800383c <sbrk_aligned>
 80038ee:	3001      	adds	r0, #1
 80038f0:	d037      	beq.n	8003962 <_malloc_r+0xe6>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	442b      	add	r3, r5
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	f8d8 3000 	ldr.w	r3, [r8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d038      	beq.n	8003972 <_malloc_r+0xf6>
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	42a2      	cmp	r2, r4
 8003904:	d12b      	bne.n	800395e <_malloc_r+0xe2>
 8003906:	2200      	movs	r2, #0
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	e00f      	b.n	800392c <_malloc_r+0xb0>
 800390c:	6822      	ldr	r2, [r4, #0]
 800390e:	1b52      	subs	r2, r2, r5
 8003910:	d41f      	bmi.n	8003952 <_malloc_r+0xd6>
 8003912:	2a0b      	cmp	r2, #11
 8003914:	d917      	bls.n	8003946 <_malloc_r+0xca>
 8003916:	1961      	adds	r1, r4, r5
 8003918:	42a3      	cmp	r3, r4
 800391a:	6025      	str	r5, [r4, #0]
 800391c:	bf18      	it	ne
 800391e:	6059      	strne	r1, [r3, #4]
 8003920:	6863      	ldr	r3, [r4, #4]
 8003922:	bf08      	it	eq
 8003924:	f8c8 1000 	streq.w	r1, [r8]
 8003928:	5162      	str	r2, [r4, r5]
 800392a:	604b      	str	r3, [r1, #4]
 800392c:	4638      	mov	r0, r7
 800392e:	f104 060b 	add.w	r6, r4, #11
 8003932:	f000 f8d3 	bl	8003adc <__malloc_unlock>
 8003936:	f026 0607 	bic.w	r6, r6, #7
 800393a:	1d23      	adds	r3, r4, #4
 800393c:	1af2      	subs	r2, r6, r3
 800393e:	d0ae      	beq.n	800389e <_malloc_r+0x22>
 8003940:	1b9b      	subs	r3, r3, r6
 8003942:	50a3      	str	r3, [r4, r2]
 8003944:	e7ab      	b.n	800389e <_malloc_r+0x22>
 8003946:	42a3      	cmp	r3, r4
 8003948:	6862      	ldr	r2, [r4, #4]
 800394a:	d1dd      	bne.n	8003908 <_malloc_r+0x8c>
 800394c:	f8c8 2000 	str.w	r2, [r8]
 8003950:	e7ec      	b.n	800392c <_malloc_r+0xb0>
 8003952:	4623      	mov	r3, r4
 8003954:	6864      	ldr	r4, [r4, #4]
 8003956:	e7ac      	b.n	80038b2 <_malloc_r+0x36>
 8003958:	4634      	mov	r4, r6
 800395a:	6876      	ldr	r6, [r6, #4]
 800395c:	e7b4      	b.n	80038c8 <_malloc_r+0x4c>
 800395e:	4613      	mov	r3, r2
 8003960:	e7cc      	b.n	80038fc <_malloc_r+0x80>
 8003962:	230c      	movs	r3, #12
 8003964:	4638      	mov	r0, r7
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	f000 f8b8 	bl	8003adc <__malloc_unlock>
 800396c:	e797      	b.n	800389e <_malloc_r+0x22>
 800396e:	6025      	str	r5, [r4, #0]
 8003970:	e7dc      	b.n	800392c <_malloc_r+0xb0>
 8003972:	605b      	str	r3, [r3, #4]
 8003974:	deff      	udf	#255	; 0xff
 8003976:	bf00      	nop
 8003978:	200002cc 	.word	0x200002cc

0800397c <__sflush_r>:
 800397c:	898a      	ldrh	r2, [r1, #12]
 800397e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003980:	4605      	mov	r5, r0
 8003982:	0710      	lsls	r0, r2, #28
 8003984:	460c      	mov	r4, r1
 8003986:	d457      	bmi.n	8003a38 <__sflush_r+0xbc>
 8003988:	684b      	ldr	r3, [r1, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	dc04      	bgt.n	8003998 <__sflush_r+0x1c>
 800398e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	dc01      	bgt.n	8003998 <__sflush_r+0x1c>
 8003994:	2000      	movs	r0, #0
 8003996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800399a:	2e00      	cmp	r6, #0
 800399c:	d0fa      	beq.n	8003994 <__sflush_r+0x18>
 800399e:	2300      	movs	r3, #0
 80039a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039a4:	682f      	ldr	r7, [r5, #0]
 80039a6:	6a21      	ldr	r1, [r4, #32]
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	d032      	beq.n	8003a12 <__sflush_r+0x96>
 80039ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	075a      	lsls	r2, r3, #29
 80039b2:	d505      	bpl.n	80039c0 <__sflush_r+0x44>
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	1ac0      	subs	r0, r0, r3
 80039b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ba:	b10b      	cbz	r3, 80039c0 <__sflush_r+0x44>
 80039bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039be:	1ac0      	subs	r0, r0, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	4602      	mov	r2, r0
 80039c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039c6:	4628      	mov	r0, r5
 80039c8:	6a21      	ldr	r1, [r4, #32]
 80039ca:	47b0      	blx	r6
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	d106      	bne.n	80039e0 <__sflush_r+0x64>
 80039d2:	6829      	ldr	r1, [r5, #0]
 80039d4:	291d      	cmp	r1, #29
 80039d6:	d82b      	bhi.n	8003a30 <__sflush_r+0xb4>
 80039d8:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <__sflush_r+0x100>)
 80039da:	410a      	asrs	r2, r1
 80039dc:	07d6      	lsls	r6, r2, #31
 80039de:	d427      	bmi.n	8003a30 <__sflush_r+0xb4>
 80039e0:	2200      	movs	r2, #0
 80039e2:	6062      	str	r2, [r4, #4]
 80039e4:	6922      	ldr	r2, [r4, #16]
 80039e6:	04d9      	lsls	r1, r3, #19
 80039e8:	6022      	str	r2, [r4, #0]
 80039ea:	d504      	bpl.n	80039f6 <__sflush_r+0x7a>
 80039ec:	1c42      	adds	r2, r0, #1
 80039ee:	d101      	bne.n	80039f4 <__sflush_r+0x78>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b903      	cbnz	r3, 80039f6 <__sflush_r+0x7a>
 80039f4:	6560      	str	r0, [r4, #84]	; 0x54
 80039f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039f8:	602f      	str	r7, [r5, #0]
 80039fa:	2900      	cmp	r1, #0
 80039fc:	d0ca      	beq.n	8003994 <__sflush_r+0x18>
 80039fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a02:	4299      	cmp	r1, r3
 8003a04:	d002      	beq.n	8003a0c <__sflush_r+0x90>
 8003a06:	4628      	mov	r0, r5
 8003a08:	f000 f922 	bl	8003c50 <_free_r>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	6360      	str	r0, [r4, #52]	; 0x34
 8003a10:	e7c1      	b.n	8003996 <__sflush_r+0x1a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b0      	blx	r6
 8003a18:	1c41      	adds	r1, r0, #1
 8003a1a:	d1c8      	bne.n	80039ae <__sflush_r+0x32>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0c5      	beq.n	80039ae <__sflush_r+0x32>
 8003a22:	2b1d      	cmp	r3, #29
 8003a24:	d001      	beq.n	8003a2a <__sflush_r+0xae>
 8003a26:	2b16      	cmp	r3, #22
 8003a28:	d101      	bne.n	8003a2e <__sflush_r+0xb2>
 8003a2a:	602f      	str	r7, [r5, #0]
 8003a2c:	e7b2      	b.n	8003994 <__sflush_r+0x18>
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	e7ae      	b.n	8003996 <__sflush_r+0x1a>
 8003a38:	690f      	ldr	r7, [r1, #16]
 8003a3a:	2f00      	cmp	r7, #0
 8003a3c:	d0aa      	beq.n	8003994 <__sflush_r+0x18>
 8003a3e:	0793      	lsls	r3, r2, #30
 8003a40:	bf18      	it	ne
 8003a42:	2300      	movne	r3, #0
 8003a44:	680e      	ldr	r6, [r1, #0]
 8003a46:	bf08      	it	eq
 8003a48:	694b      	ldreq	r3, [r1, #20]
 8003a4a:	1bf6      	subs	r6, r6, r7
 8003a4c:	600f      	str	r7, [r1, #0]
 8003a4e:	608b      	str	r3, [r1, #8]
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	dd9f      	ble.n	8003994 <__sflush_r+0x18>
 8003a54:	4633      	mov	r3, r6
 8003a56:	463a      	mov	r2, r7
 8003a58:	4628      	mov	r0, r5
 8003a5a:	6a21      	ldr	r1, [r4, #32]
 8003a5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a60:	47e0      	blx	ip
 8003a62:	2800      	cmp	r0, #0
 8003a64:	dc06      	bgt.n	8003a74 <__sflush_r+0xf8>
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	e790      	b.n	8003996 <__sflush_r+0x1a>
 8003a74:	4407      	add	r7, r0
 8003a76:	1a36      	subs	r6, r6, r0
 8003a78:	e7ea      	b.n	8003a50 <__sflush_r+0xd4>
 8003a7a:	bf00      	nop
 8003a7c:	dfbffffe 	.word	0xdfbffffe

08003a80 <_fflush_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	690b      	ldr	r3, [r1, #16]
 8003a84:	4605      	mov	r5, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	b913      	cbnz	r3, 8003a90 <_fflush_r+0x10>
 8003a8a:	2500      	movs	r5, #0
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	b118      	cbz	r0, 8003a9a <_fflush_r+0x1a>
 8003a92:	6a03      	ldr	r3, [r0, #32]
 8003a94:	b90b      	cbnz	r3, 8003a9a <_fflush_r+0x1a>
 8003a96:	f7ff fe3f 	bl	8003718 <__sinit>
 8003a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f3      	beq.n	8003a8a <_fflush_r+0xa>
 8003aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003aa4:	07d0      	lsls	r0, r2, #31
 8003aa6:	d404      	bmi.n	8003ab2 <_fflush_r+0x32>
 8003aa8:	0599      	lsls	r1, r3, #22
 8003aaa:	d402      	bmi.n	8003ab2 <_fflush_r+0x32>
 8003aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aae:	f7ff fe9c 	bl	80037ea <__retarget_lock_acquire_recursive>
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	f7ff ff61 	bl	800397c <__sflush_r>
 8003aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003abc:	4605      	mov	r5, r0
 8003abe:	07da      	lsls	r2, r3, #31
 8003ac0:	d4e4      	bmi.n	8003a8c <_fflush_r+0xc>
 8003ac2:	89a3      	ldrh	r3, [r4, #12]
 8003ac4:	059b      	lsls	r3, r3, #22
 8003ac6:	d4e1      	bmi.n	8003a8c <_fflush_r+0xc>
 8003ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aca:	f7ff fe8f 	bl	80037ec <__retarget_lock_release_recursive>
 8003ace:	e7dd      	b.n	8003a8c <_fflush_r+0xc>

08003ad0 <__malloc_lock>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__malloc_lock+0x8>)
 8003ad2:	f7ff be8a 	b.w	80037ea <__retarget_lock_acquire_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	200002c8 	.word	0x200002c8

08003adc <__malloc_unlock>:
 8003adc:	4801      	ldr	r0, [pc, #4]	; (8003ae4 <__malloc_unlock+0x8>)
 8003ade:	f7ff be85 	b.w	80037ec <__retarget_lock_release_recursive>
 8003ae2:	bf00      	nop
 8003ae4:	200002c8 	.word	0x200002c8

08003ae8 <__sread>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	460c      	mov	r4, r1
 8003aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af0:	f000 f872 	bl	8003bd8 <_read_r>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	bfab      	itete	ge
 8003af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003afa:	89a3      	ldrhlt	r3, [r4, #12]
 8003afc:	181b      	addge	r3, r3, r0
 8003afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b02:	bfac      	ite	ge
 8003b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b06:	81a3      	strhlt	r3, [r4, #12]
 8003b08:	bd10      	pop	{r4, pc}

08003b0a <__swrite>:
 8003b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0e:	461f      	mov	r7, r3
 8003b10:	898b      	ldrh	r3, [r1, #12]
 8003b12:	4605      	mov	r5, r0
 8003b14:	05db      	lsls	r3, r3, #23
 8003b16:	460c      	mov	r4, r1
 8003b18:	4616      	mov	r6, r2
 8003b1a:	d505      	bpl.n	8003b28 <__swrite+0x1e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b24:	f000 f846 	bl	8003bb4 <_lseek_r>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	4632      	mov	r2, r6
 8003b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	4628      	mov	r0, r5
 8003b34:	463b      	mov	r3, r7
 8003b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3e:	f000 b86d 	b.w	8003c1c <_write_r>

08003b42 <__sseek>:
 8003b42:	b510      	push	{r4, lr}
 8003b44:	460c      	mov	r4, r1
 8003b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4a:	f000 f833 	bl	8003bb4 <_lseek_r>
 8003b4e:	1c43      	adds	r3, r0, #1
 8003b50:	89a3      	ldrh	r3, [r4, #12]
 8003b52:	bf15      	itete	ne
 8003b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b5e:	81a3      	strheq	r3, [r4, #12]
 8003b60:	bf18      	it	ne
 8003b62:	81a3      	strhne	r3, [r4, #12]
 8003b64:	bd10      	pop	{r4, pc}

08003b66 <__sclose>:
 8003b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b6a:	f000 b813 	b.w	8003b94 <_close_r>
	...

08003b70 <fiprintf>:
 8003b70:	b40e      	push	{r1, r2, r3}
 8003b72:	b503      	push	{r0, r1, lr}
 8003b74:	4601      	mov	r1, r0
 8003b76:	ab03      	add	r3, sp, #12
 8003b78:	4805      	ldr	r0, [pc, #20]	; (8003b90 <fiprintf+0x20>)
 8003b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	f000 f8d5 	bl	8003d30 <_vfiprintf_r>
 8003b86:	b002      	add	sp, #8
 8003b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b8c:	b003      	add	sp, #12
 8003b8e:	4770      	bx	lr
 8003b90:	200000b8 	.word	0x200000b8

08003b94 <_close_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	2300      	movs	r3, #0
 8003b98:	4d05      	ldr	r5, [pc, #20]	; (8003bb0 <_close_r+0x1c>)
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	602b      	str	r3, [r5, #0]
 8003ba0:	f7fd fbe4 	bl	800136c <_close>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d102      	bne.n	8003bae <_close_r+0x1a>
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	b103      	cbz	r3, 8003bae <_close_r+0x1a>
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	200002d4 	.word	0x200002d4

08003bb4 <_lseek_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4d05      	ldr	r5, [pc, #20]	; (8003bd4 <_lseek_r+0x20>)
 8003bc0:	602a      	str	r2, [r5, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7fd fbf6 	bl	80013b4 <_lseek>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_lseek_r+0x1e>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_lseek_r+0x1e>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	200002d4 	.word	0x200002d4

08003bd8 <_read_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	2200      	movs	r2, #0
 8003be2:	4d05      	ldr	r5, [pc, #20]	; (8003bf8 <_read_r+0x20>)
 8003be4:	602a      	str	r2, [r5, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7fd fb87 	bl	80012fa <_read>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_read_r+0x1e>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_read_r+0x1e>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	200002d4 	.word	0x200002d4

08003bfc <_sbrk_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4d05      	ldr	r5, [pc, #20]	; (8003c18 <_sbrk_r+0x1c>)
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	602b      	str	r3, [r5, #0]
 8003c08:	f7fd fbe0 	bl	80013cc <_sbrk>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d102      	bne.n	8003c16 <_sbrk_r+0x1a>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b103      	cbz	r3, 8003c16 <_sbrk_r+0x1a>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	200002d4 	.word	0x200002d4

08003c1c <_write_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	2200      	movs	r2, #0
 8003c26:	4d05      	ldr	r5, [pc, #20]	; (8003c3c <_write_r+0x20>)
 8003c28:	602a      	str	r2, [r5, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7fd fb82 	bl	8001334 <_write>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_write_r+0x1e>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_write_r+0x1e>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	200002d4 	.word	0x200002d4

08003c40 <abort>:
 8003c40:	2006      	movs	r0, #6
 8003c42:	b508      	push	{r3, lr}
 8003c44:	f000 fc64 	bl	8004510 <raise>
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7fd fb4c 	bl	80012e6 <_exit>
	...

08003c50 <_free_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4605      	mov	r5, r0
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d040      	beq.n	8003cda <_free_r+0x8a>
 8003c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c5c:	1f0c      	subs	r4, r1, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bfb8      	it	lt
 8003c62:	18e4      	addlt	r4, r4, r3
 8003c64:	f7ff ff34 	bl	8003ad0 <__malloc_lock>
 8003c68:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <_free_r+0x8c>)
 8003c6a:	6813      	ldr	r3, [r2, #0]
 8003c6c:	b933      	cbnz	r3, 8003c7c <_free_r+0x2c>
 8003c6e:	6063      	str	r3, [r4, #4]
 8003c70:	6014      	str	r4, [r2, #0]
 8003c72:	4628      	mov	r0, r5
 8003c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c78:	f7ff bf30 	b.w	8003adc <__malloc_unlock>
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d908      	bls.n	8003c92 <_free_r+0x42>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	1821      	adds	r1, r4, r0
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf01      	itttt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	1809      	addeq	r1, r1, r0
 8003c8e:	6021      	streq	r1, [r4, #0]
 8003c90:	e7ed      	b.n	8003c6e <_free_r+0x1e>
 8003c92:	461a      	mov	r2, r3
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	b10b      	cbz	r3, 8003c9c <_free_r+0x4c>
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	d9fa      	bls.n	8003c92 <_free_r+0x42>
 8003c9c:	6811      	ldr	r1, [r2, #0]
 8003c9e:	1850      	adds	r0, r2, r1
 8003ca0:	42a0      	cmp	r0, r4
 8003ca2:	d10b      	bne.n	8003cbc <_free_r+0x6c>
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	4401      	add	r1, r0
 8003ca8:	1850      	adds	r0, r2, r1
 8003caa:	4283      	cmp	r3, r0
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	d1e0      	bne.n	8003c72 <_free_r+0x22>
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4408      	add	r0, r1
 8003cb6:	6010      	str	r0, [r2, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e7da      	b.n	8003c72 <_free_r+0x22>
 8003cbc:	d902      	bls.n	8003cc4 <_free_r+0x74>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	e7d6      	b.n	8003c72 <_free_r+0x22>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	1821      	adds	r1, r4, r0
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	bf01      	itttt	eq
 8003ccc:	6819      	ldreq	r1, [r3, #0]
 8003cce:	685b      	ldreq	r3, [r3, #4]
 8003cd0:	1809      	addeq	r1, r1, r0
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	6063      	str	r3, [r4, #4]
 8003cd6:	6054      	str	r4, [r2, #4]
 8003cd8:	e7cb      	b.n	8003c72 <_free_r+0x22>
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	200002cc 	.word	0x200002cc

08003ce0 <__sfputc_r>:
 8003ce0:	6893      	ldr	r3, [r2, #8]
 8003ce2:	b410      	push	{r4}
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	da07      	bge.n	8003cfc <__sfputc_r+0x1c>
 8003cec:	6994      	ldr	r4, [r2, #24]
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	db01      	blt.n	8003cf6 <__sfputc_r+0x16>
 8003cf2:	290a      	cmp	r1, #10
 8003cf4:	d102      	bne.n	8003cfc <__sfputc_r+0x1c>
 8003cf6:	bc10      	pop	{r4}
 8003cf8:	f000 bac8 	b.w	800428c <__swbuf_r>
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	1c58      	adds	r0, r3, #1
 8003d00:	6010      	str	r0, [r2, #0]
 8003d02:	7019      	strb	r1, [r3, #0]
 8003d04:	4608      	mov	r0, r1
 8003d06:	bc10      	pop	{r4}
 8003d08:	4770      	bx	lr

08003d0a <__sfputs_r>:
 8003d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	460f      	mov	r7, r1
 8003d10:	4614      	mov	r4, r2
 8003d12:	18d5      	adds	r5, r2, r3
 8003d14:	42ac      	cmp	r4, r5
 8003d16:	d101      	bne.n	8003d1c <__sfputs_r+0x12>
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e007      	b.n	8003d2c <__sfputs_r+0x22>
 8003d1c:	463a      	mov	r2, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d24:	f7ff ffdc 	bl	8003ce0 <__sfputc_r>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d1f3      	bne.n	8003d14 <__sfputs_r+0xa>
 8003d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d30 <_vfiprintf_r>:
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	460d      	mov	r5, r1
 8003d36:	4614      	mov	r4, r2
 8003d38:	4698      	mov	r8, r3
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	b09d      	sub	sp, #116	; 0x74
 8003d3e:	b118      	cbz	r0, 8003d48 <_vfiprintf_r+0x18>
 8003d40:	6a03      	ldr	r3, [r0, #32]
 8003d42:	b90b      	cbnz	r3, 8003d48 <_vfiprintf_r+0x18>
 8003d44:	f7ff fce8 	bl	8003718 <__sinit>
 8003d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d4a:	07d9      	lsls	r1, r3, #31
 8003d4c:	d405      	bmi.n	8003d5a <_vfiprintf_r+0x2a>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	059a      	lsls	r2, r3, #22
 8003d52:	d402      	bmi.n	8003d5a <_vfiprintf_r+0x2a>
 8003d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d56:	f7ff fd48 	bl	80037ea <__retarget_lock_acquire_recursive>
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	071b      	lsls	r3, r3, #28
 8003d5e:	d501      	bpl.n	8003d64 <_vfiprintf_r+0x34>
 8003d60:	692b      	ldr	r3, [r5, #16]
 8003d62:	b99b      	cbnz	r3, 8003d8c <_vfiprintf_r+0x5c>
 8003d64:	4629      	mov	r1, r5
 8003d66:	4630      	mov	r0, r6
 8003d68:	f000 face 	bl	8004308 <__swsetup_r>
 8003d6c:	b170      	cbz	r0, 8003d8c <_vfiprintf_r+0x5c>
 8003d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d70:	07dc      	lsls	r4, r3, #31
 8003d72:	d504      	bpl.n	8003d7e <_vfiprintf_r+0x4e>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d78:	b01d      	add	sp, #116	; 0x74
 8003d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7e:	89ab      	ldrh	r3, [r5, #12]
 8003d80:	0598      	lsls	r0, r3, #22
 8003d82:	d4f7      	bmi.n	8003d74 <_vfiprintf_r+0x44>
 8003d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d86:	f7ff fd31 	bl	80037ec <__retarget_lock_release_recursive>
 8003d8a:	e7f3      	b.n	8003d74 <_vfiprintf_r+0x44>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d90:	2320      	movs	r3, #32
 8003d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d96:	2330      	movs	r3, #48	; 0x30
 8003d98:	f04f 0901 	mov.w	r9, #1
 8003d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003f50 <_vfiprintf_r+0x220>
 8003da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003da8:	4623      	mov	r3, r4
 8003daa:	469a      	mov	sl, r3
 8003dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db0:	b10a      	cbz	r2, 8003db6 <_vfiprintf_r+0x86>
 8003db2:	2a25      	cmp	r2, #37	; 0x25
 8003db4:	d1f9      	bne.n	8003daa <_vfiprintf_r+0x7a>
 8003db6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dba:	d00b      	beq.n	8003dd4 <_vfiprintf_r+0xa4>
 8003dbc:	465b      	mov	r3, fp
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f7ff ffa1 	bl	8003d0a <__sfputs_r>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f000 80a9 	beq.w	8003f20 <_vfiprintf_r+0x1f0>
 8003dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dd0:	445a      	add	r2, fp
 8003dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8003dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a1 	beq.w	8003f20 <_vfiprintf_r+0x1f0>
 8003dde:	2300      	movs	r3, #0
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003de8:	f10a 0a01 	add.w	sl, sl, #1
 8003dec:	9304      	str	r3, [sp, #16]
 8003dee:	9307      	str	r3, [sp, #28]
 8003df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003df4:	931a      	str	r3, [sp, #104]	; 0x68
 8003df6:	4654      	mov	r4, sl
 8003df8:	2205      	movs	r2, #5
 8003dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfe:	4854      	ldr	r0, [pc, #336]	; (8003f50 <_vfiprintf_r+0x220>)
 8003e00:	f000 fba2 	bl	8004548 <memchr>
 8003e04:	9a04      	ldr	r2, [sp, #16]
 8003e06:	b9d8      	cbnz	r0, 8003e40 <_vfiprintf_r+0x110>
 8003e08:	06d1      	lsls	r1, r2, #27
 8003e0a:	bf44      	itt	mi
 8003e0c:	2320      	movmi	r3, #32
 8003e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e12:	0713      	lsls	r3, r2, #28
 8003e14:	bf44      	itt	mi
 8003e16:	232b      	movmi	r3, #43	; 0x2b
 8003e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e20:	2b2a      	cmp	r3, #42	; 0x2a
 8003e22:	d015      	beq.n	8003e50 <_vfiprintf_r+0x120>
 8003e24:	4654      	mov	r4, sl
 8003e26:	2000      	movs	r0, #0
 8003e28:	f04f 0c0a 	mov.w	ip, #10
 8003e2c:	9a07      	ldr	r2, [sp, #28]
 8003e2e:	4621      	mov	r1, r4
 8003e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e34:	3b30      	subs	r3, #48	; 0x30
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d94d      	bls.n	8003ed6 <_vfiprintf_r+0x1a6>
 8003e3a:	b1b0      	cbz	r0, 8003e6a <_vfiprintf_r+0x13a>
 8003e3c:	9207      	str	r2, [sp, #28]
 8003e3e:	e014      	b.n	8003e6a <_vfiprintf_r+0x13a>
 8003e40:	eba0 0308 	sub.w	r3, r0, r8
 8003e44:	fa09 f303 	lsl.w	r3, r9, r3
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	46a2      	mov	sl, r4
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	e7d2      	b.n	8003df6 <_vfiprintf_r+0xc6>
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	1d19      	adds	r1, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	9103      	str	r1, [sp, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bfbb      	ittet	lt
 8003e5c:	425b      	neglt	r3, r3
 8003e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e62:	9307      	strge	r3, [sp, #28]
 8003e64:	9307      	strlt	r3, [sp, #28]
 8003e66:	bfb8      	it	lt
 8003e68:	9204      	strlt	r2, [sp, #16]
 8003e6a:	7823      	ldrb	r3, [r4, #0]
 8003e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e6e:	d10c      	bne.n	8003e8a <_vfiprintf_r+0x15a>
 8003e70:	7863      	ldrb	r3, [r4, #1]
 8003e72:	2b2a      	cmp	r3, #42	; 0x2a
 8003e74:	d134      	bne.n	8003ee0 <_vfiprintf_r+0x1b0>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	3402      	adds	r4, #2
 8003e7a:	1d1a      	adds	r2, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	9203      	str	r2, [sp, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bfb8      	it	lt
 8003e84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e88:	9305      	str	r3, [sp, #20]
 8003e8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f54 <_vfiprintf_r+0x224>
 8003e8e:	2203      	movs	r2, #3
 8003e90:	4650      	mov	r0, sl
 8003e92:	7821      	ldrb	r1, [r4, #0]
 8003e94:	f000 fb58 	bl	8004548 <memchr>
 8003e98:	b138      	cbz	r0, 8003eaa <_vfiprintf_r+0x17a>
 8003e9a:	2240      	movs	r2, #64	; 0x40
 8003e9c:	9b04      	ldr	r3, [sp, #16]
 8003e9e:	eba0 000a 	sub.w	r0, r0, sl
 8003ea2:	4082      	lsls	r2, r0
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	3401      	adds	r4, #1
 8003ea8:	9304      	str	r3, [sp, #16]
 8003eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eae:	2206      	movs	r2, #6
 8003eb0:	4829      	ldr	r0, [pc, #164]	; (8003f58 <_vfiprintf_r+0x228>)
 8003eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eb6:	f000 fb47 	bl	8004548 <memchr>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d03f      	beq.n	8003f3e <_vfiprintf_r+0x20e>
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <_vfiprintf_r+0x22c>)
 8003ec0:	bb1b      	cbnz	r3, 8003f0a <_vfiprintf_r+0x1da>
 8003ec2:	9b03      	ldr	r3, [sp, #12]
 8003ec4:	3307      	adds	r3, #7
 8003ec6:	f023 0307 	bic.w	r3, r3, #7
 8003eca:	3308      	adds	r3, #8
 8003ecc:	9303      	str	r3, [sp, #12]
 8003ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed0:	443b      	add	r3, r7
 8003ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed4:	e768      	b.n	8003da8 <_vfiprintf_r+0x78>
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	2001      	movs	r0, #1
 8003eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ede:	e7a6      	b.n	8003e2e <_vfiprintf_r+0xfe>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f04f 0c0a 	mov.w	ip, #10
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	3401      	adds	r4, #1
 8003eea:	9305      	str	r3, [sp, #20]
 8003eec:	4620      	mov	r0, r4
 8003eee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ef2:	3a30      	subs	r2, #48	; 0x30
 8003ef4:	2a09      	cmp	r2, #9
 8003ef6:	d903      	bls.n	8003f00 <_vfiprintf_r+0x1d0>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0c6      	beq.n	8003e8a <_vfiprintf_r+0x15a>
 8003efc:	9105      	str	r1, [sp, #20]
 8003efe:	e7c4      	b.n	8003e8a <_vfiprintf_r+0x15a>
 8003f00:	4604      	mov	r4, r0
 8003f02:	2301      	movs	r3, #1
 8003f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f08:	e7f0      	b.n	8003eec <_vfiprintf_r+0x1bc>
 8003f0a:	ab03      	add	r3, sp, #12
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	462a      	mov	r2, r5
 8003f10:	4630      	mov	r0, r6
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <_vfiprintf_r+0x230>)
 8003f14:	a904      	add	r1, sp, #16
 8003f16:	f3af 8000 	nop.w
 8003f1a:	4607      	mov	r7, r0
 8003f1c:	1c78      	adds	r0, r7, #1
 8003f1e:	d1d6      	bne.n	8003ece <_vfiprintf_r+0x19e>
 8003f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f22:	07d9      	lsls	r1, r3, #31
 8003f24:	d405      	bmi.n	8003f32 <_vfiprintf_r+0x202>
 8003f26:	89ab      	ldrh	r3, [r5, #12]
 8003f28:	059a      	lsls	r2, r3, #22
 8003f2a:	d402      	bmi.n	8003f32 <_vfiprintf_r+0x202>
 8003f2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f2e:	f7ff fc5d 	bl	80037ec <__retarget_lock_release_recursive>
 8003f32:	89ab      	ldrh	r3, [r5, #12]
 8003f34:	065b      	lsls	r3, r3, #25
 8003f36:	f53f af1d 	bmi.w	8003d74 <_vfiprintf_r+0x44>
 8003f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3c:	e71c      	b.n	8003d78 <_vfiprintf_r+0x48>
 8003f3e:	ab03      	add	r3, sp, #12
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	462a      	mov	r2, r5
 8003f44:	4630      	mov	r0, r6
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <_vfiprintf_r+0x230>)
 8003f48:	a904      	add	r1, sp, #16
 8003f4a:	f000 f87d 	bl	8004048 <_printf_i>
 8003f4e:	e7e4      	b.n	8003f1a <_vfiprintf_r+0x1ea>
 8003f50:	0800464f 	.word	0x0800464f
 8003f54:	08004655 	.word	0x08004655
 8003f58:	08004659 	.word	0x08004659
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	08003d0b 	.word	0x08003d0b

08003f64 <_printf_common>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	4616      	mov	r6, r2
 8003f6a:	4699      	mov	r9, r3
 8003f6c:	688a      	ldr	r2, [r1, #8]
 8003f6e:	690b      	ldr	r3, [r1, #16]
 8003f70:	4607      	mov	r7, r0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	bfb8      	it	lt
 8003f76:	4613      	movlt	r3, r2
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f7e:	460c      	mov	r4, r1
 8003f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f84:	b10a      	cbz	r2, 8003f8a <_printf_common+0x26>
 8003f86:	3301      	adds	r3, #1
 8003f88:	6033      	str	r3, [r6, #0]
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	0699      	lsls	r1, r3, #26
 8003f8e:	bf42      	ittt	mi
 8003f90:	6833      	ldrmi	r3, [r6, #0]
 8003f92:	3302      	addmi	r3, #2
 8003f94:	6033      	strmi	r3, [r6, #0]
 8003f96:	6825      	ldr	r5, [r4, #0]
 8003f98:	f015 0506 	ands.w	r5, r5, #6
 8003f9c:	d106      	bne.n	8003fac <_printf_common+0x48>
 8003f9e:	f104 0a19 	add.w	sl, r4, #25
 8003fa2:	68e3      	ldr	r3, [r4, #12]
 8003fa4:	6832      	ldr	r2, [r6, #0]
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	42ab      	cmp	r3, r5
 8003faa:	dc2b      	bgt.n	8004004 <_printf_common+0xa0>
 8003fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb0:	1e13      	subs	r3, r2, #0
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	bf18      	it	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	0692      	lsls	r2, r2, #26
 8003fba:	d430      	bmi.n	800401e <_printf_common+0xba>
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d023      	beq.n	8004012 <_printf_common+0xae>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	6922      	ldr	r2, [r4, #16]
 8003fce:	f003 0306 	and.w	r3, r3, #6
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	bf14      	ite	ne
 8003fd6:	2500      	movne	r5, #0
 8003fd8:	6833      	ldreq	r3, [r6, #0]
 8003fda:	f04f 0600 	mov.w	r6, #0
 8003fde:	bf08      	it	eq
 8003fe0:	68e5      	ldreq	r5, [r4, #12]
 8003fe2:	f104 041a 	add.w	r4, r4, #26
 8003fe6:	bf08      	it	eq
 8003fe8:	1aed      	subeq	r5, r5, r3
 8003fea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fee:	bf08      	it	eq
 8003ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bfc4      	itt	gt
 8003ff8:	1a9b      	subgt	r3, r3, r2
 8003ffa:	18ed      	addgt	r5, r5, r3
 8003ffc:	42b5      	cmp	r5, r6
 8003ffe:	d11a      	bne.n	8004036 <_printf_common+0xd2>
 8004000:	2000      	movs	r0, #0
 8004002:	e008      	b.n	8004016 <_printf_common+0xb2>
 8004004:	2301      	movs	r3, #1
 8004006:	4652      	mov	r2, sl
 8004008:	4649      	mov	r1, r9
 800400a:	4638      	mov	r0, r7
 800400c:	47c0      	blx	r8
 800400e:	3001      	adds	r0, #1
 8004010:	d103      	bne.n	800401a <_printf_common+0xb6>
 8004012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401a:	3501      	adds	r5, #1
 800401c:	e7c1      	b.n	8003fa2 <_printf_common+0x3e>
 800401e:	2030      	movs	r0, #48	; 0x30
 8004020:	18e1      	adds	r1, r4, r3
 8004022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800402c:	4422      	add	r2, r4
 800402e:	3302      	adds	r3, #2
 8004030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004034:	e7c2      	b.n	8003fbc <_printf_common+0x58>
 8004036:	2301      	movs	r3, #1
 8004038:	4622      	mov	r2, r4
 800403a:	4649      	mov	r1, r9
 800403c:	4638      	mov	r0, r7
 800403e:	47c0      	blx	r8
 8004040:	3001      	adds	r0, #1
 8004042:	d0e6      	beq.n	8004012 <_printf_common+0xae>
 8004044:	3601      	adds	r6, #1
 8004046:	e7d9      	b.n	8003ffc <_printf_common+0x98>

08004048 <_printf_i>:
 8004048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	7e0f      	ldrb	r7, [r1, #24]
 800404e:	4691      	mov	r9, r2
 8004050:	2f78      	cmp	r7, #120	; 0x78
 8004052:	4680      	mov	r8, r0
 8004054:	460c      	mov	r4, r1
 8004056:	469a      	mov	sl, r3
 8004058:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800405a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800405e:	d807      	bhi.n	8004070 <_printf_i+0x28>
 8004060:	2f62      	cmp	r7, #98	; 0x62
 8004062:	d80a      	bhi.n	800407a <_printf_i+0x32>
 8004064:	2f00      	cmp	r7, #0
 8004066:	f000 80d5 	beq.w	8004214 <_printf_i+0x1cc>
 800406a:	2f58      	cmp	r7, #88	; 0x58
 800406c:	f000 80c1 	beq.w	80041f2 <_printf_i+0x1aa>
 8004070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004078:	e03a      	b.n	80040f0 <_printf_i+0xa8>
 800407a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800407e:	2b15      	cmp	r3, #21
 8004080:	d8f6      	bhi.n	8004070 <_printf_i+0x28>
 8004082:	a101      	add	r1, pc, #4	; (adr r1, 8004088 <_printf_i+0x40>)
 8004084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004088:	080040e1 	.word	0x080040e1
 800408c:	080040f5 	.word	0x080040f5
 8004090:	08004071 	.word	0x08004071
 8004094:	08004071 	.word	0x08004071
 8004098:	08004071 	.word	0x08004071
 800409c:	08004071 	.word	0x08004071
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004071 	.word	0x08004071
 80040a8:	08004071 	.word	0x08004071
 80040ac:	08004071 	.word	0x08004071
 80040b0:	08004071 	.word	0x08004071
 80040b4:	080041fb 	.word	0x080041fb
 80040b8:	08004121 	.word	0x08004121
 80040bc:	080041b5 	.word	0x080041b5
 80040c0:	08004071 	.word	0x08004071
 80040c4:	08004071 	.word	0x08004071
 80040c8:	0800421d 	.word	0x0800421d
 80040cc:	08004071 	.word	0x08004071
 80040d0:	08004121 	.word	0x08004121
 80040d4:	08004071 	.word	0x08004071
 80040d8:	08004071 	.word	0x08004071
 80040dc:	080041bd 	.word	0x080041bd
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	602a      	str	r2, [r5, #0]
 80040e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0a0      	b.n	8004236 <_printf_i+0x1ee>
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	682b      	ldr	r3, [r5, #0]
 80040f8:	0607      	lsls	r7, r0, #24
 80040fa:	f103 0104 	add.w	r1, r3, #4
 80040fe:	6029      	str	r1, [r5, #0]
 8004100:	d501      	bpl.n	8004106 <_printf_i+0xbe>
 8004102:	681e      	ldr	r6, [r3, #0]
 8004104:	e003      	b.n	800410e <_printf_i+0xc6>
 8004106:	0646      	lsls	r6, r0, #25
 8004108:	d5fb      	bpl.n	8004102 <_printf_i+0xba>
 800410a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800410e:	2e00      	cmp	r6, #0
 8004110:	da03      	bge.n	800411a <_printf_i+0xd2>
 8004112:	232d      	movs	r3, #45	; 0x2d
 8004114:	4276      	negs	r6, r6
 8004116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411a:	230a      	movs	r3, #10
 800411c:	4859      	ldr	r0, [pc, #356]	; (8004284 <_printf_i+0x23c>)
 800411e:	e012      	b.n	8004146 <_printf_i+0xfe>
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	6820      	ldr	r0, [r4, #0]
 8004124:	1d19      	adds	r1, r3, #4
 8004126:	6029      	str	r1, [r5, #0]
 8004128:	0605      	lsls	r5, r0, #24
 800412a:	d501      	bpl.n	8004130 <_printf_i+0xe8>
 800412c:	681e      	ldr	r6, [r3, #0]
 800412e:	e002      	b.n	8004136 <_printf_i+0xee>
 8004130:	0641      	lsls	r1, r0, #25
 8004132:	d5fb      	bpl.n	800412c <_printf_i+0xe4>
 8004134:	881e      	ldrh	r6, [r3, #0]
 8004136:	2f6f      	cmp	r7, #111	; 0x6f
 8004138:	bf0c      	ite	eq
 800413a:	2308      	moveq	r3, #8
 800413c:	230a      	movne	r3, #10
 800413e:	4851      	ldr	r0, [pc, #324]	; (8004284 <_printf_i+0x23c>)
 8004140:	2100      	movs	r1, #0
 8004142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004146:	6865      	ldr	r5, [r4, #4]
 8004148:	2d00      	cmp	r5, #0
 800414a:	bfa8      	it	ge
 800414c:	6821      	ldrge	r1, [r4, #0]
 800414e:	60a5      	str	r5, [r4, #8]
 8004150:	bfa4      	itt	ge
 8004152:	f021 0104 	bicge.w	r1, r1, #4
 8004156:	6021      	strge	r1, [r4, #0]
 8004158:	b90e      	cbnz	r6, 800415e <_printf_i+0x116>
 800415a:	2d00      	cmp	r5, #0
 800415c:	d04b      	beq.n	80041f6 <_printf_i+0x1ae>
 800415e:	4615      	mov	r5, r2
 8004160:	fbb6 f1f3 	udiv	r1, r6, r3
 8004164:	fb03 6711 	mls	r7, r3, r1, r6
 8004168:	5dc7      	ldrb	r7, [r0, r7]
 800416a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800416e:	4637      	mov	r7, r6
 8004170:	42bb      	cmp	r3, r7
 8004172:	460e      	mov	r6, r1
 8004174:	d9f4      	bls.n	8004160 <_printf_i+0x118>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d10b      	bne.n	8004192 <_printf_i+0x14a>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	07de      	lsls	r6, r3, #31
 800417e:	d508      	bpl.n	8004192 <_printf_i+0x14a>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	6861      	ldr	r1, [r4, #4]
 8004184:	4299      	cmp	r1, r3
 8004186:	bfde      	ittt	le
 8004188:	2330      	movle	r3, #48	; 0x30
 800418a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800418e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004192:	1b52      	subs	r2, r2, r5
 8004194:	6122      	str	r2, [r4, #16]
 8004196:	464b      	mov	r3, r9
 8004198:	4621      	mov	r1, r4
 800419a:	4640      	mov	r0, r8
 800419c:	f8cd a000 	str.w	sl, [sp]
 80041a0:	aa03      	add	r2, sp, #12
 80041a2:	f7ff fedf 	bl	8003f64 <_printf_common>
 80041a6:	3001      	adds	r0, #1
 80041a8:	d14a      	bne.n	8004240 <_printf_i+0x1f8>
 80041aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ae:	b004      	add	sp, #16
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	f043 0320 	orr.w	r3, r3, #32
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	2778      	movs	r7, #120	; 0x78
 80041be:	4832      	ldr	r0, [pc, #200]	; (8004288 <_printf_i+0x240>)
 80041c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	6829      	ldr	r1, [r5, #0]
 80041c8:	061f      	lsls	r7, r3, #24
 80041ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80041ce:	d402      	bmi.n	80041d6 <_printf_i+0x18e>
 80041d0:	065f      	lsls	r7, r3, #25
 80041d2:	bf48      	it	mi
 80041d4:	b2b6      	uxthmi	r6, r6
 80041d6:	07df      	lsls	r7, r3, #31
 80041d8:	bf48      	it	mi
 80041da:	f043 0320 	orrmi.w	r3, r3, #32
 80041de:	6029      	str	r1, [r5, #0]
 80041e0:	bf48      	it	mi
 80041e2:	6023      	strmi	r3, [r4, #0]
 80041e4:	b91e      	cbnz	r6, 80041ee <_printf_i+0x1a6>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	f023 0320 	bic.w	r3, r3, #32
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	2310      	movs	r3, #16
 80041f0:	e7a6      	b.n	8004140 <_printf_i+0xf8>
 80041f2:	4824      	ldr	r0, [pc, #144]	; (8004284 <_printf_i+0x23c>)
 80041f4:	e7e4      	b.n	80041c0 <_printf_i+0x178>
 80041f6:	4615      	mov	r5, r2
 80041f8:	e7bd      	b.n	8004176 <_printf_i+0x12e>
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	6826      	ldr	r6, [r4, #0]
 80041fe:	1d18      	adds	r0, r3, #4
 8004200:	6961      	ldr	r1, [r4, #20]
 8004202:	6028      	str	r0, [r5, #0]
 8004204:	0635      	lsls	r5, r6, #24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	d501      	bpl.n	800420e <_printf_i+0x1c6>
 800420a:	6019      	str	r1, [r3, #0]
 800420c:	e002      	b.n	8004214 <_printf_i+0x1cc>
 800420e:	0670      	lsls	r0, r6, #25
 8004210:	d5fb      	bpl.n	800420a <_printf_i+0x1c2>
 8004212:	8019      	strh	r1, [r3, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	4615      	mov	r5, r2
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	e7bc      	b.n	8004196 <_printf_i+0x14e>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	2100      	movs	r1, #0
 8004220:	1d1a      	adds	r2, r3, #4
 8004222:	602a      	str	r2, [r5, #0]
 8004224:	681d      	ldr	r5, [r3, #0]
 8004226:	6862      	ldr	r2, [r4, #4]
 8004228:	4628      	mov	r0, r5
 800422a:	f000 f98d 	bl	8004548 <memchr>
 800422e:	b108      	cbz	r0, 8004234 <_printf_i+0x1ec>
 8004230:	1b40      	subs	r0, r0, r5
 8004232:	6060      	str	r0, [r4, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	6123      	str	r3, [r4, #16]
 8004238:	2300      	movs	r3, #0
 800423a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423e:	e7aa      	b.n	8004196 <_printf_i+0x14e>
 8004240:	462a      	mov	r2, r5
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	47d0      	blx	sl
 800424a:	3001      	adds	r0, #1
 800424c:	d0ad      	beq.n	80041aa <_printf_i+0x162>
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	079b      	lsls	r3, r3, #30
 8004252:	d413      	bmi.n	800427c <_printf_i+0x234>
 8004254:	68e0      	ldr	r0, [r4, #12]
 8004256:	9b03      	ldr	r3, [sp, #12]
 8004258:	4298      	cmp	r0, r3
 800425a:	bfb8      	it	lt
 800425c:	4618      	movlt	r0, r3
 800425e:	e7a6      	b.n	80041ae <_printf_i+0x166>
 8004260:	2301      	movs	r3, #1
 8004262:	4632      	mov	r2, r6
 8004264:	4649      	mov	r1, r9
 8004266:	4640      	mov	r0, r8
 8004268:	47d0      	blx	sl
 800426a:	3001      	adds	r0, #1
 800426c:	d09d      	beq.n	80041aa <_printf_i+0x162>
 800426e:	3501      	adds	r5, #1
 8004270:	68e3      	ldr	r3, [r4, #12]
 8004272:	9903      	ldr	r1, [sp, #12]
 8004274:	1a5b      	subs	r3, r3, r1
 8004276:	42ab      	cmp	r3, r5
 8004278:	dcf2      	bgt.n	8004260 <_printf_i+0x218>
 800427a:	e7eb      	b.n	8004254 <_printf_i+0x20c>
 800427c:	2500      	movs	r5, #0
 800427e:	f104 0619 	add.w	r6, r4, #25
 8004282:	e7f5      	b.n	8004270 <_printf_i+0x228>
 8004284:	08004660 	.word	0x08004660
 8004288:	08004671 	.word	0x08004671

0800428c <__swbuf_r>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	460e      	mov	r6, r1
 8004290:	4614      	mov	r4, r2
 8004292:	4605      	mov	r5, r0
 8004294:	b118      	cbz	r0, 800429e <__swbuf_r+0x12>
 8004296:	6a03      	ldr	r3, [r0, #32]
 8004298:	b90b      	cbnz	r3, 800429e <__swbuf_r+0x12>
 800429a:	f7ff fa3d 	bl	8003718 <__sinit>
 800429e:	69a3      	ldr	r3, [r4, #24]
 80042a0:	60a3      	str	r3, [r4, #8]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	071a      	lsls	r2, r3, #28
 80042a6:	d525      	bpl.n	80042f4 <__swbuf_r+0x68>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	b31b      	cbz	r3, 80042f4 <__swbuf_r+0x68>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	6922      	ldr	r2, [r4, #16]
 80042b0:	b2f6      	uxtb	r6, r6
 80042b2:	1a98      	subs	r0, r3, r2
 80042b4:	6963      	ldr	r3, [r4, #20]
 80042b6:	4637      	mov	r7, r6
 80042b8:	4283      	cmp	r3, r0
 80042ba:	dc04      	bgt.n	80042c6 <__swbuf_r+0x3a>
 80042bc:	4621      	mov	r1, r4
 80042be:	4628      	mov	r0, r5
 80042c0:	f7ff fbde 	bl	8003a80 <_fflush_r>
 80042c4:	b9e0      	cbnz	r0, 8004300 <__swbuf_r+0x74>
 80042c6:	68a3      	ldr	r3, [r4, #8]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	60a3      	str	r3, [r4, #8]
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	6022      	str	r2, [r4, #0]
 80042d2:	701e      	strb	r6, [r3, #0]
 80042d4:	6962      	ldr	r2, [r4, #20]
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d004      	beq.n	80042e6 <__swbuf_r+0x5a>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	07db      	lsls	r3, r3, #31
 80042e0:	d506      	bpl.n	80042f0 <__swbuf_r+0x64>
 80042e2:	2e0a      	cmp	r6, #10
 80042e4:	d104      	bne.n	80042f0 <__swbuf_r+0x64>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f7ff fbc9 	bl	8003a80 <_fflush_r>
 80042ee:	b938      	cbnz	r0, 8004300 <__swbuf_r+0x74>
 80042f0:	4638      	mov	r0, r7
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f4:	4621      	mov	r1, r4
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 f806 	bl	8004308 <__swsetup_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d0d5      	beq.n	80042ac <__swbuf_r+0x20>
 8004300:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004304:	e7f4      	b.n	80042f0 <__swbuf_r+0x64>
	...

08004308 <__swsetup_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <__swsetup_r+0xac>)
 800430c:	4605      	mov	r5, r0
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	460c      	mov	r4, r1
 8004312:	b118      	cbz	r0, 800431c <__swsetup_r+0x14>
 8004314:	6a03      	ldr	r3, [r0, #32]
 8004316:	b90b      	cbnz	r3, 800431c <__swsetup_r+0x14>
 8004318:	f7ff f9fe 	bl	8003718 <__sinit>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004322:	0718      	lsls	r0, r3, #28
 8004324:	d422      	bmi.n	800436c <__swsetup_r+0x64>
 8004326:	06d9      	lsls	r1, r3, #27
 8004328:	d407      	bmi.n	800433a <__swsetup_r+0x32>
 800432a:	2309      	movs	r3, #9
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	e034      	b.n	80043a4 <__swsetup_r+0x9c>
 800433a:	0758      	lsls	r0, r3, #29
 800433c:	d512      	bpl.n	8004364 <__swsetup_r+0x5c>
 800433e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004340:	b141      	cbz	r1, 8004354 <__swsetup_r+0x4c>
 8004342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004346:	4299      	cmp	r1, r3
 8004348:	d002      	beq.n	8004350 <__swsetup_r+0x48>
 800434a:	4628      	mov	r0, r5
 800434c:	f7ff fc80 	bl	8003c50 <_free_r>
 8004350:	2300      	movs	r3, #0
 8004352:	6363      	str	r3, [r4, #52]	; 0x34
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800435a:	81a3      	strh	r3, [r4, #12]
 800435c:	2300      	movs	r3, #0
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	f043 0308 	orr.w	r3, r3, #8
 800436a:	81a3      	strh	r3, [r4, #12]
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	b94b      	cbnz	r3, 8004384 <__swsetup_r+0x7c>
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d003      	beq.n	8004384 <__swsetup_r+0x7c>
 800437c:	4621      	mov	r1, r4
 800437e:	4628      	mov	r0, r5
 8004380:	f000 f83f 	bl	8004402 <__smakebuf_r>
 8004384:	89a0      	ldrh	r0, [r4, #12]
 8004386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800438a:	f010 0301 	ands.w	r3, r0, #1
 800438e:	d00a      	beq.n	80043a6 <__swsetup_r+0x9e>
 8004390:	2300      	movs	r3, #0
 8004392:	60a3      	str	r3, [r4, #8]
 8004394:	6963      	ldr	r3, [r4, #20]
 8004396:	425b      	negs	r3, r3
 8004398:	61a3      	str	r3, [r4, #24]
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	b943      	cbnz	r3, 80043b0 <__swsetup_r+0xa8>
 800439e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a2:	d1c4      	bne.n	800432e <__swsetup_r+0x26>
 80043a4:	bd38      	pop	{r3, r4, r5, pc}
 80043a6:	0781      	lsls	r1, r0, #30
 80043a8:	bf58      	it	pl
 80043aa:	6963      	ldrpl	r3, [r4, #20]
 80043ac:	60a3      	str	r3, [r4, #8]
 80043ae:	e7f4      	b.n	800439a <__swsetup_r+0x92>
 80043b0:	2000      	movs	r0, #0
 80043b2:	e7f7      	b.n	80043a4 <__swsetup_r+0x9c>
 80043b4:	200000b8 	.word	0x200000b8

080043b8 <__swhatbuf_r>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	460c      	mov	r4, r1
 80043bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c0:	4615      	mov	r5, r2
 80043c2:	2900      	cmp	r1, #0
 80043c4:	461e      	mov	r6, r3
 80043c6:	b096      	sub	sp, #88	; 0x58
 80043c8:	da0c      	bge.n	80043e4 <__swhatbuf_r+0x2c>
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	2100      	movs	r1, #0
 80043ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043d2:	bf0c      	ite	eq
 80043d4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80043d8:	2340      	movne	r3, #64	; 0x40
 80043da:	2000      	movs	r0, #0
 80043dc:	6031      	str	r1, [r6, #0]
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	b016      	add	sp, #88	; 0x58
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	466a      	mov	r2, sp
 80043e6:	f000 f849 	bl	800447c <_fstat_r>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	dbed      	blt.n	80043ca <__swhatbuf_r+0x12>
 80043ee:	9901      	ldr	r1, [sp, #4]
 80043f0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80043f4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80043f8:	4259      	negs	r1, r3
 80043fa:	4159      	adcs	r1, r3
 80043fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004400:	e7eb      	b.n	80043da <__swhatbuf_r+0x22>

08004402 <__smakebuf_r>:
 8004402:	898b      	ldrh	r3, [r1, #12]
 8004404:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004406:	079d      	lsls	r5, r3, #30
 8004408:	4606      	mov	r6, r0
 800440a:	460c      	mov	r4, r1
 800440c:	d507      	bpl.n	800441e <__smakebuf_r+0x1c>
 800440e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	6123      	str	r3, [r4, #16]
 8004416:	2301      	movs	r3, #1
 8004418:	6163      	str	r3, [r4, #20]
 800441a:	b002      	add	sp, #8
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	466a      	mov	r2, sp
 8004420:	ab01      	add	r3, sp, #4
 8004422:	f7ff ffc9 	bl	80043b8 <__swhatbuf_r>
 8004426:	9900      	ldr	r1, [sp, #0]
 8004428:	4605      	mov	r5, r0
 800442a:	4630      	mov	r0, r6
 800442c:	f7ff fa26 	bl	800387c <_malloc_r>
 8004430:	b948      	cbnz	r0, 8004446 <__smakebuf_r+0x44>
 8004432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004436:	059a      	lsls	r2, r3, #22
 8004438:	d4ef      	bmi.n	800441a <__smakebuf_r+0x18>
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	f043 0302 	orr.w	r3, r3, #2
 8004442:	81a3      	strh	r3, [r4, #12]
 8004444:	e7e3      	b.n	800440e <__smakebuf_r+0xc>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	6020      	str	r0, [r4, #0]
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	81a3      	strh	r3, [r4, #12]
 8004450:	9b00      	ldr	r3, [sp, #0]
 8004452:	6120      	str	r0, [r4, #16]
 8004454:	6163      	str	r3, [r4, #20]
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	b15b      	cbz	r3, 8004472 <__smakebuf_r+0x70>
 800445a:	4630      	mov	r0, r6
 800445c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004460:	f000 f81e 	bl	80044a0 <_isatty_r>
 8004464:	b128      	cbz	r0, 8004472 <__smakebuf_r+0x70>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f023 0303 	bic.w	r3, r3, #3
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	81a3      	strh	r3, [r4, #12]
 8004472:	89a3      	ldrh	r3, [r4, #12]
 8004474:	431d      	orrs	r5, r3
 8004476:	81a5      	strh	r5, [r4, #12]
 8004478:	e7cf      	b.n	800441a <__smakebuf_r+0x18>
	...

0800447c <_fstat_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	2300      	movs	r3, #0
 8004480:	4d06      	ldr	r5, [pc, #24]	; (800449c <_fstat_r+0x20>)
 8004482:	4604      	mov	r4, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	f7fc ff7a 	bl	8001382 <_fstat>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d102      	bne.n	8004498 <_fstat_r+0x1c>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	b103      	cbz	r3, 8004498 <_fstat_r+0x1c>
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	200002d4 	.word	0x200002d4

080044a0 <_isatty_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	2300      	movs	r3, #0
 80044a4:	4d05      	ldr	r5, [pc, #20]	; (80044bc <_isatty_r+0x1c>)
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc ff78 	bl	80013a0 <_isatty>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_isatty_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_isatty_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	200002d4 	.word	0x200002d4

080044c0 <_raise_r>:
 80044c0:	291f      	cmp	r1, #31
 80044c2:	b538      	push	{r3, r4, r5, lr}
 80044c4:	4604      	mov	r4, r0
 80044c6:	460d      	mov	r5, r1
 80044c8:	d904      	bls.n	80044d4 <_raise_r+0x14>
 80044ca:	2316      	movs	r3, #22
 80044cc:	6003      	str	r3, [r0, #0]
 80044ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80044d6:	b112      	cbz	r2, 80044de <_raise_r+0x1e>
 80044d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044dc:	b94b      	cbnz	r3, 80044f2 <_raise_r+0x32>
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 f830 	bl	8004544 <_getpid_r>
 80044e4:	462a      	mov	r2, r5
 80044e6:	4601      	mov	r1, r0
 80044e8:	4620      	mov	r0, r4
 80044ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ee:	f000 b817 	b.w	8004520 <_kill_r>
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d00a      	beq.n	800450c <_raise_r+0x4c>
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	d103      	bne.n	8004502 <_raise_r+0x42>
 80044fa:	2316      	movs	r3, #22
 80044fc:	6003      	str	r3, [r0, #0]
 80044fe:	2001      	movs	r0, #1
 8004500:	e7e7      	b.n	80044d2 <_raise_r+0x12>
 8004502:	2400      	movs	r4, #0
 8004504:	4628      	mov	r0, r5
 8004506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800450a:	4798      	blx	r3
 800450c:	2000      	movs	r0, #0
 800450e:	e7e0      	b.n	80044d2 <_raise_r+0x12>

08004510 <raise>:
 8004510:	4b02      	ldr	r3, [pc, #8]	; (800451c <raise+0xc>)
 8004512:	4601      	mov	r1, r0
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	f7ff bfd3 	b.w	80044c0 <_raise_r>
 800451a:	bf00      	nop
 800451c:	200000b8 	.word	0x200000b8

08004520 <_kill_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	2300      	movs	r3, #0
 8004524:	4d06      	ldr	r5, [pc, #24]	; (8004540 <_kill_r+0x20>)
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	f7fc feca 	bl	80012c6 <_kill>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	d102      	bne.n	800453c <_kill_r+0x1c>
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	b103      	cbz	r3, 800453c <_kill_r+0x1c>
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	bf00      	nop
 8004540:	200002d4 	.word	0x200002d4

08004544 <_getpid_r>:
 8004544:	f7fc beb8 	b.w	80012b8 <_getpid>

08004548 <memchr>:
 8004548:	4603      	mov	r3, r0
 800454a:	b510      	push	{r4, lr}
 800454c:	b2c9      	uxtb	r1, r1
 800454e:	4402      	add	r2, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	d101      	bne.n	800455a <memchr+0x12>
 8004556:	2000      	movs	r0, #0
 8004558:	e003      	b.n	8004562 <memchr+0x1a>
 800455a:	7804      	ldrb	r4, [r0, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	428c      	cmp	r4, r1
 8004560:	d1f6      	bne.n	8004550 <memchr+0x8>
 8004562:	bd10      	pop	{r4, pc}

08004564 <_init>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr

08004570 <_fini>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr
