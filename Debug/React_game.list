
React_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a84  08002a84  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000044  08002ad0  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002ad0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a28c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8c  00000000  00000000  0002a33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000816  00000000  00000000  0002c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016277  00000000  00000000  0002d18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b567  00000000  00000000  00043405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b1fe  00000000  00000000  0004e96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002be0  00000000  00000000  000d9b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dc74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000044 	.word	0x20000044
 8000158:	00000000 	.word	0x00000000
 800015c:	08002a3c 	.word	0x08002a3c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000048 	.word	0x20000048
 8000178:	08002a3c 	.word	0x08002a3c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <set_new_state>:
		             {0,1,0,0},
					 {0,0,1,0},
					 {0,0,0,1},
					 {1,1,1,1}};

static void set_new_state(FSM_State_Enum _new_state){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz)){
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <set_new_state+0x38>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d20b      	bcs.n	80004aa <set_new_state+0x2e>
		fsm_handle->state = fsm_handle->states_list[_new_state];
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <set_new_state+0x38>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	441a      	add	r2, r3
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <set_new_state+0x38>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}
	}
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	20000064 	.word	0x20000064

080004b8 <init_game>:

HAL_StatusTypeDef init_game(Game_Handle_TypeDef *_game_handle, FSM_Handle_TypeDef *_fsm_handle){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef led_array_status = HAL_OK;

	game_handle = _game_handle;
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <init_game+0x54>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <init_game+0x58>)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	6013      	str	r3, [r2, #0]

	max7219_status = max7219_init(&game_handle->max7219_handle);
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <init_game+0x54>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 fb20 	bl	8000b1c <max7219_init>
 80004dc:	4603      	mov	r3, r0
 80004de:	73fb      	strb	r3, [r7, #15]

	if (max7219_status != HAL_OK)
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <init_game+0x32>
		return max7219_status;
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	e00b      	b.n	8000502 <init_game+0x4a>

	fsm_handle->states_list = states_list;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <init_game+0x58>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a09      	ldr	r2, [pc, #36]	; (8000514 <init_game+0x5c>)
 80004f0:	609a      	str	r2, [r3, #8]
	fsm_handle->states_list_sz = sizeof(states_list) / sizeof(FSM_State_TypeDef);
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <init_game+0x58>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2206      	movs	r2, #6
 80004f8:	60da      	str	r2, [r3, #12]

	set_new_state(STATE_START);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f7ff ffbe 	bl	800047c <set_new_state>

	return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000060 	.word	0x20000060
 8000510:	20000064 	.word	0x20000064
 8000514:	20000000 	.word	0x20000000

08000518 <run_game>:


HAL_StatusTypeDef run_game(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	fsm_handle->state.state_callback();
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <run_game+0x3c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	4798      	blx	r3

	switch (fsm_handle->state.state){
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <run_game+0x3c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b05      	cmp	r3, #5
 800052c:	d80e      	bhi.n	800054c <run_game+0x34>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <run_game+0x1c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	0800054d 	.word	0x0800054d
 8000538:	0800054d 	.word	0x0800054d
 800053c:	0800054d 	.word	0x0800054d
 8000540:	0800054d 	.word	0x0800054d
 8000544:	0800054d 	.word	0x0800054d
 8000548:	0800054d 	.word	0x0800054d
		break;
	case STATE_STOP:
		break;
	}

	return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000064 	.word	0x20000064

08000558 <state_start>:

void state_start(void){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <state_wp>:
void state_wp(void){
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <state_gp>:
void state_gp(void){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <state_wait>:
void state_wait(void){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <state_disp>:
void state_disp(void){
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <state_stop>:
void state_stop(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <HAL_GPIO_EXTI_Callback>:
	max7219_status = max7219_display_no_decode(pos, LETTERS[letter - 'A']);
}
return max7219_status;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]

}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fb4b 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f82b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8f5 	bl	80007b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005c6:	f000 f86f 	bl	80006a8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005ca:	f000 f8a3 	bl	8000714 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Handle_TypeDef max7219_handle ={
 80005ce:	4a11      	ldr	r2, [pc, #68]	; (8000614 <main+0x60>)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            &hspi1,
            NCS_GPIO_Port,
            NCS_Pin,
            4
    };
  HAL_StatusTypeDef game_status = HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    Game_Handle_TypeDef game_handler = {
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	f107 0220 	add.w	r2, r7, #32
 80005e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            max7219_handle,
    };

    FSM_Handle_TypeDef fsm_handler;

    init_game(&game_handler, &fsm_handler);
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff5e 	bl	80004b8 <init_game>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  game_status=run_game();
 80005fc:	f7ff ff8c 	bl	8000518 <run_game>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if(game_status != HAL_OK)Error_Handler();
 8000606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f6      	beq.n	80005fc <main+0x48>
 800060e:	f000 f93d 	bl	800088c <Error_Handler>
	  game_status=run_game();
 8000612:	e7f3      	b.n	80005fc <main+0x48>
 8000614:	08002a54 	.word	0x08002a54

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b092      	sub	sp, #72	; 0x48
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f9dc 	bl	80029e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <SystemClock_Config+0x8c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <SystemClock_Config+0x8c>)
 8000644:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000648:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064a:	2310      	movs	r3, #16
 800064c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000656:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fe31 	bl	80012cc <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000670:	f000 f90c 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f94d 	bl	800192c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000698:	f000 f8f8 	bl	800088c <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3748      	adds	r7, #72	; 0x48
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f001 fb69 	bl	8001dd0 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f8c2 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000068 	.word	0x20000068
 8000710:	40013000 	.word	0x40013000

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_TIM2_Init+0x98>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_TIM2_Init+0x98>)
 800073a:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800073e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_TIM2_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_TIM2_Init+0x98>)
 8000748:	f240 12f3 	movw	r2, #499	; 0x1f3
 800074c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_TIM2_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_TIM2_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <MX_TIM2_Init+0x98>)
 800075c:	f001 fdce 	bl	80022fc <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000766:	f000 f891 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_TIM2_Init+0x98>)
 8000778:	f001 fedb 	bl	8002532 <HAL_TIM_ConfigClockSource>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000782:	f000 f883 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_TIM2_Init+0x98>)
 8000794:	f002 f8c8 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800079e:	f000 f875 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000c0 	.word	0x200000c0

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b28      	ldr	r3, [pc, #160]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a27      	ldr	r2, [pc, #156]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_GPIO_Init+0xd0>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fc:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_GPIO_Init+0xd4>)
 80007fe:	f000 fd35 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 8000802:	2360      	movs	r3, #96	; 0x60
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	481c      	ldr	r0, [pc, #112]	; (8000888 <MX_GPIO_Init+0xd8>)
 8000818:	f000 fb98 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 800081c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000836:	f000 fb89 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800083a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0xd4>)
 8000852:	f000 fb7b 	bl	8000f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	2017      	movs	r0, #23
 800085c:	f000 fb3f 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000860:	2017      	movs	r0, #23
 8000862:	f000 fb58 	bl	8000f16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2028      	movs	r0, #40	; 0x28
 800086c:	f000 fb37 	bl	8000ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000870:	2028      	movs	r0, #40	; 0x28
 8000872:	f000 fb50 	bl	8000f16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40020800 	.word	0x40020800

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_MspInit+0x58>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <HAL_MspInit+0x58>)
 80008a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a8:	6253      	str	r3, [r2, #36]	; 0x24
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_MspInit+0x58>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_MspInit+0x58>)
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <HAL_MspInit+0x58>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6213      	str	r3, [r2, #32]
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <HAL_MspInit+0x58>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_MspInit+0x58>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d2:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_MspInit+0x58>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6253      	str	r3, [r2, #36]	; 0x24
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_MspInit+0x58>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_SPI_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d127      	bne.n	8000966 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000918:	6a1b      	ldr	r3, [r3, #32]
 800091a:	4a16      	ldr	r2, [pc, #88]	; (8000974 <HAL_SPI_MspInit+0x80>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000920:	6213      	str	r3, [r2, #32]
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_SPI_MspInit+0x80>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_SPI_MspInit+0x80>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000956:	2305      	movs	r3, #5
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_SPI_MspInit+0x84>)
 8000962:	f000 faf3 	bl	8000f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40013000 	.word	0x40013000
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800098c:	d113      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_TIM_Base_MspInit+0x44>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_TIM_Base_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6253      	str	r3, [r2, #36]	; 0x24
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_TIM_Base_MspInit+0x44>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	201c      	movs	r0, #28
 80009ac:	f000 fa97 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009b0:	201c      	movs	r0, #28
 80009b2:	f000 fab0 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f975 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000a16:	2020      	movs	r0, #32
 8000a18:	f000 fc40 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000a1c:	2040      	movs	r0, #64	; 0x40
 8000a1e:	f000 fc3d 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f001 fca4 	bl	800237a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000c0 	.word	0x200000c0

08000a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000a40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a44:	f000 fc2a 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000a48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a4c:	f000 fc26 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff fff8 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a66:	490c      	ldr	r1, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a7c:	4c09      	ldr	r4, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f001 ffb3 	bl	80029f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fd91 	bl	80005b4 <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000a9c:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 8000aa0:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000aa4:	20000108 	.word	0x20000108

08000aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_IRQHandler>
	...

08000aac <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	723b      	strb	r3, [r7, #8]
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 8000ac8:	2300      	movs	r3, #0
 8000aca:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <max7219_transmit+0x6c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6858      	ldr	r0, [r3, #4]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <max7219_transmit+0x6c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	891b      	ldrh	r3, [r3, #8]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	f000 fbc6 	bl	800126c <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <max7219_transmit+0x6c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f107 0108 	add.w	r1, r7, #8
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	f001 f9f7 	bl	8001ee2 <HAL_SPI_Transmit>
 8000af4:	4603      	mov	r3, r0
 8000af6:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <max7219_transmit+0x6c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6858      	ldr	r0, [r3, #4]
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <max7219_transmit+0x6c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	891b      	ldrh	r3, [r3, #8]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f000 fbb0 	bl	800126c <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 8000b0c:	7afb      	ldrb	r3, [r7, #11]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000100 	.word	0x20000100

08000b1c <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 8000b24:	4a2b      	ldr	r2, [pc, #172]	; (8000bd4 <max7219_init+0xb8>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <max7219_init+0xb8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <max7219_init+0x20>
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <max7219_init+0xb8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e047      	b.n	8000bcc <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8000b40:	2100      	movs	r1, #0
 8000b42:	200c      	movs	r0, #12
 8000b44:	f7ff ffb2 	bl	8000aac <max7219_transmit>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <max7219_init+0x3a>
		return max7219_status;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	e03a      	b.n	8000bcc <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 8000b56:	2101      	movs	r1, #1
 8000b58:	200c      	movs	r0, #12
 8000b5a:	f7ff ffa7 	bl	8000aac <max7219_transmit>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <max7219_init+0x50>
		return max7219_status;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	e02f      	b.n	8000bcc <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <max7219_init+0xb8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	7a9b      	ldrb	r3, [r3, #10]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	200b      	movs	r0, #11
 8000b7a:	f7ff ff97 	bl	8000aac <max7219_transmit>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <max7219_init+0x70>
		return max7219_status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	e01f      	b.n	8000bcc <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2009      	movs	r0, #9
 8000b90:	f7ff ff8c 	bl	8000aac <max7219_transmit>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <max7219_init+0x86>
		return max7219_status;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	e014      	b.n	8000bcc <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f7ff ff81 	bl	8000aac <max7219_transmit>
 8000baa:	4603      	mov	r3, r0
 8000bac:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <max7219_init+0x9c>
		return max7219_status;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	e009      	b.n	8000bcc <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 8000bb8:	f000 f80e 	bl	8000bd8 <max7219_erase_no_decode>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <max7219_init+0xae>
		return max7219_status;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	e000      	b.n	8000bcc <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000100 	.word	0x20000100

08000bd8 <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <max7219_erase_no_decode+0x74>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d104      	bne.n	8000bf4 <max7219_erase_no_decode+0x1c>
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <max7219_erase_no_decode+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e027      	b.n	8000c44 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2009      	movs	r0, #9
 8000bf8:	f7ff ff58 	bl	8000aac <max7219_transmit>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <max7219_erase_no_decode+0x32>
		return max7219_status;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	e01c      	b.n	8000c44 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	e011      	b.n	8000c34 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 8000c10:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <max7219_erase_no_decode+0x78>)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff46 	bl	8000aac <max7219_transmit>
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <max7219_erase_no_decode+0x56>
			return max7219_status;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	e00a      	b.n	8000c44 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <max7219_erase_no_decode+0x74>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	7a9b      	ldrb	r3, [r3, #10]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	dbe6      	blt.n	8000c10 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000100 	.word	0x20000100
 8000c50:	20000034 	.word	0x20000034

08000c54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5e:	2003      	movs	r0, #3
 8000c60:	f000 f932 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c64:	200f      	movs	r0, #15
 8000c66:	f000 f80d 	bl	8000c84 <HAL_InitTick>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	e001      	b.n	8000c7a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c76:	f7ff fe0f 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_InitTick+0x68>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d022      	beq.n	8000cde <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_InitTick+0x6c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_InitTick+0x68>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f940 	bl	8000f32 <HAL_SYSTICK_Config>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10f      	bne.n	8000cd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d809      	bhi.n	8000cd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc6:	f000 f90a 	bl	8000ede <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_InitTick+0x70>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e007      	b.n	8000ce2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e004      	b.n	8000ce2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e001      	b.n	8000ce2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000040 	.word	0x20000040
 8000cf0:	20000030 	.word	0x20000030
 8000cf4:	2000003c 	.word	0x2000003c

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <HAL_IncTick+0x1c>)
 8000d08:	6013      	str	r3, [r2, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000104 	.word	0x20000104
 8000d18:	20000040 	.word	0x20000040

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000104 	.word	0x20000104

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <__NVIC_EnableIRQ+0x34>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f7ff ff90 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff2d 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff42 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff90 	bl	8000e20 <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5f 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff35 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa2 	bl	8000e84 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f62:	e160      	b.n	8001226 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8152 	beq.w	8001220 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f003 0201 	and.w	r2, r3, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d017      	beq.n	8001032 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0203 	and.w	r2, r3, #3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80ac 	beq.w	8001220 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <HAL_GPIO_Init+0x2f8>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a5d      	ldr	r2, [pc, #372]	; (8001244 <HAL_GPIO_Init+0x2f8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <HAL_GPIO_Init+0x2f8>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e0:	4a59      	ldr	r2, [pc, #356]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_GPIO_Init+0x300>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d025      	beq.n	8001158 <HAL_GPIO_Init+0x20c>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_GPIO_Init+0x304>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d01f      	beq.n	8001154 <HAL_GPIO_Init+0x208>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a4f      	ldr	r2, [pc, #316]	; (8001254 <HAL_GPIO_Init+0x308>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d019      	beq.n	8001150 <HAL_GPIO_Init+0x204>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <HAL_GPIO_Init+0x30c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_GPIO_Init+0x200>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4d      	ldr	r2, [pc, #308]	; (800125c <HAL_GPIO_Init+0x310>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00d      	beq.n	8001148 <HAL_GPIO_Init+0x1fc>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_GPIO_Init+0x314>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1f8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_GPIO_Init+0x318>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_Init+0x1f4>
 800113c:	2306      	movs	r3, #6
 800113e:	e00c      	b.n	800115a <HAL_GPIO_Init+0x20e>
 8001140:	2307      	movs	r3, #7
 8001142:	e00a      	b.n	800115a <HAL_GPIO_Init+0x20e>
 8001144:	2305      	movs	r3, #5
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0x20e>
 8001148:	2304      	movs	r3, #4
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x20e>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x20e>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x20e>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x20e>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800116a:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001178:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <HAL_GPIO_Init+0x31c>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800119c:	4a32      	ldr	r2, [pc, #200]	; (8001268 <HAL_GPIO_Init+0x31c>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x31c>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011c6:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_GPIO_Init+0x31c>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x31c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x31c>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x31c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <HAL_GPIO_Init+0x31c>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f ae97 	bne.w	8000f64 <HAL_GPIO_Init+0x18>
  }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40010000 	.word	0x40010000
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f970 	bl	80005a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e31d      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012de:	4b94      	ldr	r3, [pc, #592]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e8:	4b91      	ldr	r3, [pc, #580]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d07b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d006      	beq.n	8001312 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b0c      	cmp	r3, #12
 8001308:	d10f      	bne.n	800132a <HAL_RCC_OscConfig+0x5e>
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d10b      	bne.n	800132a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001312:	4b87      	ldr	r3, [pc, #540]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d06a      	beq.n	80013f4 <HAL_RCC_OscConfig+0x128>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d166      	bne.n	80013f4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e2f7      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a7e      	ldr	r2, [pc, #504]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e02d      	b.n	800139c <HAL_RCC_OscConfig+0xd0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x96>
 8001348:	4b79      	ldr	r3, [pc, #484]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a78      	ldr	r2, [pc, #480]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a75      	ldr	r2, [pc, #468]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e01c      	b.n	800139c <HAL_RCC_OscConfig+0xd0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0xb8>
 800136a:	4b71      	ldr	r3, [pc, #452]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a70      	ldr	r2, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xd0>
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a69      	ldr	r2, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a66      	ldr	r2, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcba 	bl	8000d1c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fcb6 	bl	8000d1c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e2ad      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fca6 	bl	8000d1c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fca2 	bl	8000d1c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e299      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013e6:	4b52      	ldr	r3, [pc, #328]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d05a      	beq.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b04      	cmp	r3, #4
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d119      	bne.n	8001442 <HAL_RCC_OscConfig+0x176>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d116      	bne.n	8001442 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_OscConfig+0x160>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d001      	beq.n	800142c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e276      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b40      	ldr	r3, [pc, #256]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	493d      	ldr	r1, [pc, #244]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001440:	e03a      	b.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d020      	beq.n	800148c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <HAL_RCC_OscConfig+0x268>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc64 	bl	8000d1c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc60 	bl	8000d1c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e257      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	492a      	ldr	r1, [pc, #168]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e015      	b.n	80014b8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_RCC_OscConfig+0x268>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fc43 	bl	8000d1c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fc3f 	bl	8000d1c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e236      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80b8 	beq.w	8001636 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d170      	bne.n	80015ae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x218>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e21a      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d921      	bls.n	8001538 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fc09 	bl	8001d10 <RCC_SetFlashLatencyFromMSIRange>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e208      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4906      	ldr	r1, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	4901      	ldr	r1, [pc, #4]	; (8001530 <HAL_RCC_OscConfig+0x264>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
 800152e:	e020      	b.n	8001572 <HAL_RCC_OscConfig+0x2a6>
 8001530:	40023800 	.word	0x40023800
 8001534:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001538:	4b99      	ldr	r3, [pc, #612]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4996      	ldr	r1, [pc, #600]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154a:	4b95      	ldr	r3, [pc, #596]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	4991      	ldr	r1, [pc, #580]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fbd4 	bl	8001d10 <RCC_SetFlashLatencyFromMSIRange>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1d3      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	0b5b      	lsrs	r3, r3, #13
 8001578:	3301      	adds	r3, #1
 800157a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001582:	4a87      	ldr	r2, [pc, #540]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001584:	6892      	ldr	r2, [r2, #8]
 8001586:	0912      	lsrs	r2, r2, #4
 8001588:	f002 020f 	and.w	r2, r2, #15
 800158c:	4985      	ldr	r1, [pc, #532]	; (80017a4 <HAL_RCC_OscConfig+0x4d8>)
 800158e:	5c8a      	ldrb	r2, [r1, r2]
 8001590:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001592:	4a85      	ldr	r2, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x4dc>)
 8001594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001596:	4b85      	ldr	r3, [pc, #532]	; (80017ac <HAL_RCC_OscConfig+0x4e0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb72 	bl	8000c84 <HAL_InitTick>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d045      	beq.n	8001636 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	e1b5      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d029      	beq.n	800160a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015b6:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x4e4>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fbae 	bl	8000d1c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c4:	f7ff fbaa 	bl	8000d1c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1a1      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d6:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e2:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	496c      	ldr	r1, [pc, #432]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	4967      	ldr	r1, [pc, #412]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e015      	b.n	8001636 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800160a:	4b69      	ldr	r3, [pc, #420]	; (80017b0 <HAL_RCC_OscConfig+0x4e4>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fb84 	bl	8000d1c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001618:	f7ff fb80 	bl	8000d1c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e177      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d030      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d016      	beq.n	8001678 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fb64 	bl	8000d1c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff fb60 	bl	8000d1c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e157      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x38c>
 8001676:	e015      	b.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001678:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb4d 	bl	8000d1c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fb49 	bl	8000d1c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e140      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80b5 	beq.w	800181c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10d      	bne.n	80016de <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	4a36      	ldr	r2, [pc, #216]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6253      	str	r3, [r2, #36]	; 0x24
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016da:	2301      	movs	r3, #1
 80016dc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d118      	bne.n	800171c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb11 	bl	8000d1c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fe:	f7ff fb0d 	bl	8000d1c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b64      	cmp	r3, #100	; 0x64
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e104      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x466>
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800172a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172e:	6353      	str	r3, [r2, #52]	; 0x34
 8001730:	e02d      	b.n	800178e <HAL_RCC_OscConfig+0x4c2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0x488>
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001744:	6353      	str	r3, [r2, #52]	; 0x34
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800174c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001750:	6353      	str	r3, [r2, #52]	; 0x34
 8001752:	e01c      	b.n	800178e <HAL_RCC_OscConfig+0x4c2>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0x4aa>
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001766:	6353      	str	r3, [r2, #52]	; 0x34
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6353      	str	r3, [r2, #52]	; 0x34
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0x4c2>
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 800177c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001780:	6353      	str	r3, [r2, #52]	; 0x34
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800178c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d024      	beq.n	80017e0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fac1 	bl	8000d1c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800179c:	e019      	b.n	80017d2 <HAL_RCC_OscConfig+0x506>
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	08002a6c 	.word	0x08002a6c
 80017a8:	20000030 	.word	0x20000030
 80017ac:	2000003c 	.word	0x2000003c
 80017b0:	42470020 	.word	0x42470020
 80017b4:	42470680 	.word	0x42470680
 80017b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff faae 	bl	8000d1c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0a3      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d2:	4b54      	ldr	r3, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ee      	beq.n	80017bc <HAL_RCC_OscConfig+0x4f0>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fa9c 	bl	8000d1c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fa98 	bl	8000d1c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e08d      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ee      	bne.n	80017e8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	4a43      	ldr	r2, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d079      	beq.n	8001918 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d056      	beq.n	80018d8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2b02      	cmp	r3, #2
 8001830:	d13b      	bne.n	80018aa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_OscConfig+0x65c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fa70 	bl	8000d1c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa6c 	bl	8000d1c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e063      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	4319      	orrs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	430b      	orrs	r3, r1
 8001876:	492b      	ldr	r1, [pc, #172]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x65c>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fa4b 	bl	8000d1c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fa47 	bl	8000d1c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e03e      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x5be>
 80018a8:	e036      	b.n	8001918 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_RCC_OscConfig+0x65c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fa34 	bl	8000d1c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fa30 	bl	8000d1c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e027      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x5ec>
 80018d6:	e01f      	b.n	8001918 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e01a      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_OscConfig+0x658>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d10d      	bne.n	8001914 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	42470060 	.word	0x42470060

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e11a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d919      	bls.n	8001982 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_ClockConfig+0x34>
 8001954:	4b8a      	ldr	r3, [pc, #552]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a89      	ldr	r2, [pc, #548]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b87      	ldr	r3, [pc, #540]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 0201 	bic.w	r2, r3, #1
 8001968:	4985      	ldr	r1, [pc, #532]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4313      	orrs	r3, r2
 800196e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001970:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d001      	beq.n	8001982 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0f9      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198e:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	497a      	ldr	r1, [pc, #488]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 808e 	beq.w	8001aca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d121      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0d7      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019ce:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d115      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0cb      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0bf      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0b7      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0203 	bic.w	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	495c      	ldr	r1, [pc, #368]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a18:	f7ff f980 	bl	8000d1c <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f978 	bl	8000d1c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e09b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a3e:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d1ee      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
 8001a4a:	e03e      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d112      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7ff f961 	bl	8000d1c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e084      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b0c      	cmp	r3, #12
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
 8001a78:	e027      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d11d      	bne.n	8001abe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f94a 	bl	8000d1c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e06d      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x158>
 8001aa6:	e010      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff f938 	bl	8000d1c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e05b      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ee      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d219      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d105      	bne.n	8001aea <HAL_RCC_ClockConfig+0x1be>
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a27      	ldr	r2, [pc, #156]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0201 	bic.w	r2, r3, #1
 8001af2:	4923      	ldr	r1, [pc, #140]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_RCC_ClockConfig+0x254>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e034      	b.n	8001b76 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4917      	ldr	r1, [pc, #92]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490f      	ldr	r1, [pc, #60]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4a:	f000 f823 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_ClockConfig+0x258>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490b      	ldr	r1, [pc, #44]	; (8001b88 <HAL_RCC_ClockConfig+0x25c>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f88a 	bl	8000c84 <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08002a6c 	.word	0x08002a6c
 8001b8c:	20000030 	.word	0x20000030
 8001b90:	2000003c 	.word	0x2000003c

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b98:	b08e      	sub	sp, #56	; 0x38
 8001b9a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d00d      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f200 8092 	bhi.w	8001cd6 <HAL_RCC_GetSysClockFreq+0x142>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x28>
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x2e>
 8001bba:	e08c      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x170>)
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc0:	e097      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x174>)
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bc6:	e094      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	f003 020f 	and.w	r2, r3, #15
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x178>)
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	0d9b      	lsrs	r3, r3, #22
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	3301      	adds	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d021      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	61fa      	str	r2, [r7, #28]
 8001bf6:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x174>)
 8001bf8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001bfc:	464a      	mov	r2, r9
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	2300      	movs	r3, #0
 8001c04:	4644      	mov	r4, r8
 8001c06:	fb04 f303 	mul.w	r3, r4, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x174>)
 8001c0e:	4644      	mov	r4, r8
 8001c10:	fba4 0102 	umull	r0, r1, r4, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	4619      	mov	r1, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	617a      	str	r2, [r7, #20]
 8001c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c24:	f7fe faaa 	bl	800017c <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c30:	e04e      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c34:	2200      	movs	r2, #0
 8001c36:	469a      	mov	sl, r3
 8001c38:	4693      	mov	fp, r2
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	465b      	mov	r3, fp
 8001c3e:	f04f 0000 	mov.w	r0, #0
 8001c42:	f04f 0100 	mov.w	r1, #0
 8001c46:	0159      	lsls	r1, r3, #5
 8001c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4c:	0150      	lsls	r0, r2, #5
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	ebb2 080a 	subs.w	r8, r2, sl
 8001c56:	eb63 090b 	sbc.w	r9, r3, fp
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c72:	eb63 0509 	sbc.w	r5, r3, r9
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	00eb      	lsls	r3, r5, #3
 8001c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c84:	00e2      	lsls	r2, r4, #3
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	eb14 030a 	adds.w	r3, r4, sl
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	eb45 030b 	adc.w	r3, r5, fp
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4604      	mov	r4, r0
 8001cac:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	028a      	lsls	r2, r1, #10
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	60fa      	str	r2, [r7, #12]
 8001cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc4:	f7fe fa5a 	bl	800017c <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cd4:	e00d      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	016e3600 	.word	0x016e3600
 8001d0c:	08002a60 	.word	0x08002a60

08001d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d12c      	bne.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e016      	b.n	8001d6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6253      	str	r3, [r2, #36]	; 0x24
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d60:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d74:	d105      	bne.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d7c:	d101      	bne.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 0201 	bic.w	r2, r3, #1
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	40023c00 	.word	0x40023c00

08001dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07b      	b.n	8001eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001df2:	d009      	beq.n	8001e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
 8001dfa:	e005      	b.n	8001e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7fe fd66 	bl	80008f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	ea42 0103 	orr.w	r1, r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0104 	and.w	r1, r3, #4
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f003 0210 	and.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b088      	sub	sp, #32
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_SPI_Transmit+0x22>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e12d      	b.n	8002160 <HAL_SPI_Transmit+0x27e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f0c:	f7fe ff06 	bl	8000d1c <HAL_GetTick>
 8001f10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d002      	beq.n	8001f28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f26:	e116      	b.n	8002156 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_SPI_Transmit+0x52>
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f38:	e10d      	b.n	8002156 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f80:	d10f      	bne.n	8001fa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d007      	beq.n	8001fc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fc8:	d14f      	bne.n	800206a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_SPI_Transmit+0xf6>
 8001fd2:	8afb      	ldrh	r3, [r7, #22]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d142      	bne.n	800205e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	1c9a      	adds	r2, r3, #2
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ffc:	e02f      	b.n	800205e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b02      	cmp	r3, #2
 800200a:	d112      	bne.n	8002032 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	1c9a      	adds	r2, r3, #2
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002030:	e015      	b.n	800205e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002032:	f7fe fe73 	bl	8000d1c <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d803      	bhi.n	800204a <HAL_SPI_Transmit+0x168>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002048:	d102      	bne.n	8002050 <HAL_SPI_Transmit+0x16e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800205c:	e07b      	b.n	8002156 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ca      	bne.n	8001ffe <HAL_SPI_Transmit+0x11c>
 8002068:	e050      	b.n	800210c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_SPI_Transmit+0x196>
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d144      	bne.n	8002102 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800209e:	e030      	b.n	8002102 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d113      	bne.n	80020d6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80020d4:	e015      	b.n	8002102 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d6:	f7fe fe21 	bl	8000d1c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d803      	bhi.n	80020ee <HAL_SPI_Transmit+0x20c>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ec:	d102      	bne.n	80020f4 <HAL_SPI_Transmit+0x212>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002100:	e029      	b.n	8002156 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1c9      	bne.n	80020a0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f8b1 	bl	8002278 <SPI_EndRxTxTransaction>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
 800214c:	e003      	b.n	8002156 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800215e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002178:	f7fe fdd0 	bl	8000d1c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	4413      	add	r3, r2
 8002186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002188:	f7fe fdc8 	bl	8000d1c <HAL_GetTick>
 800218c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800218e:	4b39      	ldr	r3, [pc, #228]	; (8002274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	0d1b      	lsrs	r3, r3, #20
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800219e:	e054      	b.n	800224a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a6:	d050      	beq.n	800224a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021a8:	f7fe fdb8 	bl	8000d1c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d902      	bls.n	80021be <SPI_WaitFlagStateUntilTimeout+0x56>
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d13d      	bne.n	800223a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d6:	d111      	bne.n	80021fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e0:	d004      	beq.n	80021ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ea:	d107      	bne.n	80021fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002204:	d10f      	bne.n	8002226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e017      	b.n	800226a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3b01      	subs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4013      	ands	r3, r2
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	429a      	cmp	r2, r3
 8002266:	d19b      	bne.n	80021a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000030 	.word	0x20000030

08002278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002284:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <SPI_EndRxTxTransaction+0x7c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <SPI_EndRxTxTransaction+0x80>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0d5b      	lsrs	r3, r3, #21
 8002290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a2:	d112      	bne.n	80022ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff ff5a 	bl	8002168 <SPI_WaitFlagStateUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00f      	b.n	80022ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d0f2      	beq.n	80022ca <SPI_EndRxTxTransaction+0x52>
 80022e4:	e000      	b.n	80022e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80022e6:	bf00      	nop
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000030 	.word	0x20000030
 80022f8:	165e9f81 	.word	0x165e9f81

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e031      	b.n	8002372 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fb2a 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 f9ee 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d122      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d11b      	bne.n	80023d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0202 	mvn.w	r2, #2
 80023a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f991 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 80023c2:	e005      	b.n	80023d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f984 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f993 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d122      	bne.n	800242a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d11b      	bne.n	800242a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f06f 0204 	mvn.w	r2, #4
 80023fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f967 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 8002416:	e005      	b.n	8002424 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f95a 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f969 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d122      	bne.n	800247e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11b      	bne.n	800247e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0208 	mvn.w	r2, #8
 800244e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2204      	movs	r2, #4
 8002454:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f93d 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 800246a:	e005      	b.n	8002478 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f930 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f93f 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b10      	cmp	r3, #16
 800248a:	d122      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b10      	cmp	r3, #16
 8002498:	d11b      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0210 	mvn.w	r2, #16
 80024a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2208      	movs	r2, #8
 80024a8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f913 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 80024be:	e005      	b.n	80024cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f906 	bl	80026d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f915 	bl	80026f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10e      	bne.n	80024fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f06f 0201 	mvn.w	r2, #1
 80024f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8e1 	bl	80026c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d10e      	bne.n	800252a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d107      	bne.n	800252a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8ef 	bl	8002708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_TIM_ConfigClockSource+0x1c>
 800254a:	2302      	movs	r3, #2
 800254c:	e0b4      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x186>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800256c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002574:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	d03e      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0xd4>
 8002588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258c:	f200 8087 	bhi.w	800269e <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002594:	f000 8086 	beq.w	80026a4 <HAL_TIM_ConfigClockSource+0x172>
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259c:	d87f      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 800259e:	2b70      	cmp	r3, #112	; 0x70
 80025a0:	d01a      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0xa6>
 80025a2:	2b70      	cmp	r3, #112	; 0x70
 80025a4:	d87b      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 80025a6:	2b60      	cmp	r3, #96	; 0x60
 80025a8:	d050      	beq.n	800264c <HAL_TIM_ConfigClockSource+0x11a>
 80025aa:	2b60      	cmp	r3, #96	; 0x60
 80025ac:	d877      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	2b50      	cmp	r3, #80	; 0x50
 80025b0:	d03c      	beq.n	800262c <HAL_TIM_ConfigClockSource+0xfa>
 80025b2:	2b50      	cmp	r3, #80	; 0x50
 80025b4:	d873      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d058      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x13a>
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d86f      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 80025be:	2b30      	cmp	r3, #48	; 0x30
 80025c0:	d064      	beq.n	800268c <HAL_TIM_ConfigClockSource+0x15a>
 80025c2:	2b30      	cmp	r3, #48	; 0x30
 80025c4:	d86b      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d060      	beq.n	800268c <HAL_TIM_ConfigClockSource+0x15a>
 80025ca:	2b20      	cmp	r3, #32
 80025cc:	d867      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d05c      	beq.n	800268c <HAL_TIM_ConfigClockSource+0x15a>
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d05a      	beq.n	800268c <HAL_TIM_ConfigClockSource+0x15a>
 80025d6:	e062      	b.n	800269e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025e8:	f000 f97f 	bl	80028ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	609a      	str	r2, [r3, #8]
      break;
 8002604:	e04f      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002616:	f000 f968 	bl	80028ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002628:	609a      	str	r2, [r3, #8]
      break;
 800262a:	e03c      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002638:	461a      	mov	r2, r3
 800263a:	f000 f8df 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2150      	movs	r1, #80	; 0x50
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f936 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 800264a:	e02c      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002658:	461a      	mov	r2, r3
 800265a:	f000 f8fd 	bl	8002858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2160      	movs	r1, #96	; 0x60
 8002664:	4618      	mov	r0, r3
 8002666:	f000 f926 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 800266a:	e01c      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002678:	461a      	mov	r2, r3
 800267a:	f000 f8bf 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f916 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 800268a:	e00c      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f000 f90d 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 800269c:	e003      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
      break;
 80026a2:	e000      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
	...

0800271c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002732:	d00f      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <TIM_Base_SetConfig+0xc8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00b      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <TIM_Base_SetConfig+0xcc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <TIM_Base_SetConfig+0xd0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0x38>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <TIM_Base_SetConfig+0xd4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d017      	beq.n	800279e <TIM_Base_SetConfig+0x82>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <TIM_Base_SetConfig+0xc8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <TIM_Base_SetConfig+0x82>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <TIM_Base_SetConfig+0xcc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00f      	beq.n	800279e <TIM_Base_SetConfig+0x82>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <TIM_Base_SetConfig+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00b      	beq.n	800279e <TIM_Base_SetConfig+0x82>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <TIM_Base_SetConfig+0xd4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0x82>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <TIM_Base_SetConfig+0xd8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0x82>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <TIM_Base_SetConfig+0xdc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	615a      	str	r2, [r3, #20]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	40011000 	.word	0x40011000

080027fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 030a 	bic.w	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002894:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f043 0307 	orr.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	021a      	lsls	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	609a      	str	r2, [r3, #8]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800293c:	2302      	movs	r3, #2
 800293e:	e046      	b.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d00e      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10c      	bne.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	40010800 	.word	0x40010800

080029e4 <memset>:
 80029e4:	4603      	mov	r3, r0
 80029e6:	4402      	add	r2, r0
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	f803 1b01 	strb.w	r1, [r3], #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2600      	movs	r6, #0
 80029f8:	4d0c      	ldr	r5, [pc, #48]	; (8002a2c <__libc_init_array+0x38>)
 80029fa:	4c0d      	ldr	r4, [pc, #52]	; (8002a30 <__libc_init_array+0x3c>)
 80029fc:	1b64      	subs	r4, r4, r5
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	f000 f81a 	bl	8002a3c <_init>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	4d0a      	ldr	r5, [pc, #40]	; (8002a34 <__libc_init_array+0x40>)
 8002a0c:	4c0a      	ldr	r4, [pc, #40]	; (8002a38 <__libc_init_array+0x44>)
 8002a0e:	1b64      	subs	r4, r4, r5
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08002a84 	.word	0x08002a84
 8002a30:	08002a84 	.word	0x08002a84
 8002a34:	08002a84 	.word	0x08002a84
 8002a38:	08002a88 	.word	0x08002a88

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
