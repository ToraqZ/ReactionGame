
React_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004454  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004698  08004698  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046a0  080046a0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080046a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000bc  08004764  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08004764  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4f9  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f7  00000000  00000000  0002b621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002d718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091d  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174b6  00000000  00000000  0002ec4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d213  00000000  00000000  00046103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d63a  00000000  00000000  00053316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad8  00000000  00000000  000e0950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000e4428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000bc 	.word	0x200000bc
 8000158:	00000000 	.word	0x00000000
 800015c:	08004578 	.word	0x08004578

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000c0 	.word	0x200000c0
 8000178:	08004578 	.word	0x08004578

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <set_new_state>:
		};

int tab_case[5][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0,
		0, 1 }, { 1, 1, 1, 1 } };

static void set_new_state(FSM_State_Enum _new_state) {
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz)) {
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b31      	ldr	r3, [pc, #196]	; (8000550 <set_new_state+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d257      	bcs.n	8000542 <set_new_state+0xc6>
		fsm_handle->state = fsm_handle->states_list[_new_state];
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <set_new_state+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	441a      	add	r2, r3
 800049e:	4b2c      	ldr	r3, [pc, #176]	; (8000550 <set_new_state+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}

		fsm_handle->controllers.state_execution_count = 0;
 80004aa:	4b29      	ldr	r3, [pc, #164]	; (8000550 <set_new_state+0xd4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
		fsm_handle->controllers.animation_state = ANIMATION_RUNNING;
 80004b2:	4b27      	ldr	r3, [pc, #156]	; (8000550 <set_new_state+0xd4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
		fsm_handle->controllers.state_base_time = HAL_GetTick();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <set_new_state+0xd4>)
 80004bc:	681c      	ldr	r4, [r3, #0]
 80004be:	f001 f9a5 	bl	800180c <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	61a3      	str	r3, [r4, #24]

		actualBTN1 = fsm_handle->inputs.nb_press_btn1;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <set_new_state+0xd4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	7c1a      	ldrb	r2, [r3, #16]
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <set_new_state+0xd8>)
 80004ce:	701a      	strb	r2, [r3, #0]
		actualBTN2 = fsm_handle->inputs.nb_press_btn2;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <set_new_state+0xd4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7c5a      	ldrb	r2, [r3, #17]
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <set_new_state+0xdc>)
 80004d8:	701a      	strb	r2, [r3, #0]
		actualBTN3 = fsm_handle->inputs.nb_press_btn3;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <set_new_state+0xd4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	7c9a      	ldrb	r2, [r3, #18]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <set_new_state+0xe0>)
 80004e2:	701a      	strb	r2, [r3, #0]
		actualBTN4 = fsm_handle->inputs.nb_press_btn4;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <set_new_state+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	7cda      	ldrb	r2, [r3, #19]
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <set_new_state+0xe4>)
 80004ec:	701a      	strb	r2, [r3, #0]

		srand(HAL_GetTick());
 80004ee:	f001 f98d 	bl	800180c <HAL_GetTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 f821 	bl	800353c <srand>

		fsm_handle->controllers.randomTime = (rand() % 4501) + 500;
 80004fa:	f003 f84d 	bl	8003598 <rand>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <set_new_state+0xe8>)
 8000502:	fb83 1302 	smull	r1, r3, r3, r2
 8000506:	1259      	asrs	r1, r3, #9
 8000508:	17d3      	asrs	r3, r2, #31
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	f241 1195 	movw	r1, #4501	; 0x1195
 8000510:	fb01 f303 	mul.w	r3, r1, r3
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <set_new_state+0xd4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	621a      	str	r2, [r3, #32]
		fsm_handle->controllers.randomCase = rand() % 5;
 8000520:	f003 f83a 	bl	8003598 <rand>
 8000524:	4602      	mov	r2, r0
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <set_new_state+0xec>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1059      	asrs	r1, r3, #1
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	1ad1      	subs	r1, r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <set_new_state+0xd4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	460a      	mov	r2, r1
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
	}
	max7219_erase_no_decode();
 8000542:	f001 f8c1 	bl	80016c8 <max7219_erase_no_decode>
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	200000dc 	.word	0x200000dc
 8000554:	200000e4 	.word	0x200000e4
 8000558:	200000e5 	.word	0x200000e5
 800055c:	200000e6 	.word	0x200000e6
 8000560:	200000e7 	.word	0x200000e7
 8000564:	1d1ee241 	.word	0x1d1ee241
 8000568:	66666667 	.word	0x66666667

0800056c <init_game>:

HAL_StatusTypeDef init_game(Game_Handle_TypeDef *_game_handle,
		FSM_Handle_TypeDef *_fsm_handle) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef led_array_status = HAL_OK;

	game_handle = _game_handle;
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <init_game+0x64>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 8000580:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <init_game+0x68>)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]

	max7219_status = max7219_init(&game_handle->max7219_handle);
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <init_game+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ffc2 	bl	8001514 <max7219_init>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]

	if (max7219_status != HAL_OK)
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <init_game+0x32>
		return max7219_status;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	e013      	b.n	80005c6 <init_game+0x5a>

	fsm_handle->states_list = states_list;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <init_game+0x68>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <init_game+0x6c>)
 80005a4:	609a      	str	r2, [r3, #8]
	fsm_handle->states_list_sz = sizeof(states_list)
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <init_game+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2206      	movs	r2, #6
 80005ac:	60da      	str	r2, [r3, #12]
			/ sizeof(FSM_State_TypeDef);

	fsm_handle->controllers.randomTime = 0;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <init_game+0x68>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	621a      	str	r2, [r3, #32]
	fsm_handle->controllers.randomCase = 0;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <init_game+0x68>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24

	set_new_state(STATE_START);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5c 	bl	800047c <set_new_state>

	return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	200000dc 	.word	0x200000dc
 80005d8:	20000000 	.word	0x20000000

080005dc <run_game>:

HAL_StatusTypeDef run_game(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	fsm_handle->state.state_callback();
 80005e0:	4b82      	ldr	r3, [pc, #520]	; (80007ec <run_game+0x210>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4798      	blx	r3
	fsm_handle->controllers.state_execution_count += 1;
 80005e8:	4b80      	ldr	r3, [pc, #512]	; (80007ec <run_game+0x210>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b7f      	ldr	r3, [pc, #508]	; (80007ec <run_game+0x210>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3201      	adds	r2, #1
 80005f4:	615a      	str	r2, [r3, #20]

	switch (fsm_handle->state.state) {
 80005f6:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <run_game+0x210>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	f200 817d 	bhi.w	80008fc <run_game+0x320>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <run_game+0x2c>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000621 	.word	0x08000621
 800060c:	08000635 	.word	0x08000635
 8000610:	080006cd 	.word	0x080006cd
 8000614:	080008c3 	.word	0x080008c3
 8000618:	080008b1 	.word	0x080008b1
 800061c:	080008d5 	.word	0x080008d5
	case STATE_START:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 8000620:	4b72      	ldr	r3, [pc, #456]	; (80007ec <run_game+0x210>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7f1b      	ldrb	r3, [r3, #28]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 815d 	bne.w	80008e6 <run_game+0x30a>
			set_new_state(STATE_WP);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff25 	bl	800047c <set_new_state>
		}
		break;
 8000632:	e158      	b.n	80008e6 <run_game+0x30a>
	case STATE_WP:
		checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000634:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <run_game+0x210>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	7c1a      	ldrb	r2, [r3, #16]
 800063a:	4b6d      	ldr	r3, [pc, #436]	; (80007f0 <run_game+0x214>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <run_game+0x218>)
 8000644:	701a      	strb	r2, [r3, #0]
		checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000646:	4b69      	ldr	r3, [pc, #420]	; (80007ec <run_game+0x210>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	7c5a      	ldrb	r2, [r3, #17]
 800064c:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <run_game+0x21c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b69      	ldr	r3, [pc, #420]	; (80007fc <run_game+0x220>)
 8000656:	701a      	strb	r2, [r3, #0]
		checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000658:	4b64      	ldr	r3, [pc, #400]	; (80007ec <run_game+0x210>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	7c9a      	ldrb	r2, [r3, #18]
 800065e:	4b68      	ldr	r3, [pc, #416]	; (8000800 <run_game+0x224>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b67      	ldr	r3, [pc, #412]	; (8000804 <run_game+0x228>)
 8000668:	701a      	strb	r2, [r3, #0]
		checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 800066a:	4b60      	ldr	r3, [pc, #384]	; (80007ec <run_game+0x210>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	7cda      	ldrb	r2, [r3, #19]
 8000670:	4b65      	ldr	r3, [pc, #404]	; (8000808 <run_game+0x22c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b64      	ldr	r3, [pc, #400]	; (800080c <run_game+0x230>)
 800067a:	701a      	strb	r2, [r3, #0]
		if (checkP1 != 0 || checkP2 != 0 || checkP3 != 0 || checkP4 != 0) {
 800067c:	4b5d      	ldr	r3, [pc, #372]	; (80007f4 <run_game+0x218>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10b      	bne.n	800069c <run_game+0xc0>
 8000684:	4b5d      	ldr	r3, [pc, #372]	; (80007fc <run_game+0x220>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d107      	bne.n	800069c <run_game+0xc0>
 800068c:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <run_game+0x228>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <run_game+0xc0>
 8000694:	4b5d      	ldr	r3, [pc, #372]	; (800080c <run_game+0x230>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <run_game+0xc6>
			set_new_state(STATE_WAIT);
 800069c:	2003      	movs	r0, #3
 800069e:	f7ff feed 	bl	800047c <set_new_state>
		}
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 10000){
 80006a2:	f001 f8b3 	bl	800180c <HAL_GetTick>
 80006a6:	4602      	mov	r2, r0
 80006a8:	4b50      	ldr	r3, [pc, #320]	; (80007ec <run_game+0x210>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b4:	4293      	cmp	r3, r2
 80006b6:	f240 8118 	bls.w	80008ea <run_game+0x30e>
			HAL_SuspendTick();
 80006ba:	f001 f8b1 	bl	8001820 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80006be:	2101      	movs	r1, #1
 80006c0:	2000      	movs	r0, #0
 80006c2:	f001 fb89 	bl	8001dd8 <HAL_PWR_EnterSLEEPMode>
			SystemClock_Config();
 80006c6:	f000 fbdd 	bl	8000e84 <SystemClock_Config>
		}

		break;
 80006ca:	e10e      	b.n	80008ea <run_game+0x30e>
	case STATE_GP:
		if (HAL_GetTick() - fsm_handle->controllers.state_base_time <= 10000) {
 80006cc:	f001 f89e 	bl	800180c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <run_game+0x210>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	f242 7210 	movw	r2, #10000	; 0x2710
 80006de:	4293      	cmp	r3, r2
 80006e0:	f200 80d8 	bhi.w	8000894 <run_game+0x2b8>
			switch (fsm_handle->controllers.randomCase) {
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <run_game+0x210>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	f200 80ff 	bhi.w	80008ee <run_game+0x312>
 80006f0:	a201      	add	r2, pc, #4	; (adr r2, 80006f8 <run_game+0x11c>)
 80006f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f6:	bf00      	nop
 80006f8:	0800070d 	.word	0x0800070d
 80006fc:	08000745 	.word	0x08000745
 8000700:	0800077d 	.word	0x0800077d
 8000704:	080007b5 	.word	0x080007b5
 8000708:	08000811 	.word	0x08000811
			case 0:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <run_game+0x210>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	7c1a      	ldrb	r2, [r3, #16]
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <run_game+0x214>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <run_game+0x218>)
 800071c:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0) {
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <run_game+0x218>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 80ba 	beq.w	800089c <run_game+0x2c0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000728:	f001 f870 	bl	800180c <HAL_GetTick>
 800072c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <run_game+0x210>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <run_game+0x210>)
 8000736:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000738:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800073c:	2004      	movs	r0, #4
 800073e:	f7ff fe9d 	bl	800047c <set_new_state>
				}
				break;
 8000742:	e0ab      	b.n	800089c <run_game+0x2c0>
			case 1:
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <run_game+0x210>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7c5a      	ldrb	r2, [r3, #17]
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <run_game+0x21c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <run_game+0x220>)
 8000754:	701a      	strb	r2, [r3, #0]
				if (checkP2 != 0) {
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <run_game+0x220>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	f000 80a0 	beq.w	80008a0 <run_game+0x2c4>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000760:	f001 f854 	bl	800180c <HAL_GetTick>
 8000764:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <run_game+0x210>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <run_game+0x210>)
 800076e:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000770:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff fe81 	bl	800047c <set_new_state>
				}
				break;
 800077a:	e091      	b.n	80008a0 <run_game+0x2c4>
			case 2:
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <run_game+0x210>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	7c9a      	ldrb	r2, [r3, #18]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <run_game+0x224>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <run_game+0x228>)
 800078c:	701a      	strb	r2, [r3, #0]
				if (checkP3 != 0) {
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <run_game+0x228>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8086 	beq.w	80008a4 <run_game+0x2c8>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000798:	f001 f838 	bl	800180c <HAL_GetTick>
 800079c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <run_game+0x210>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <run_game+0x210>)
 80007a6:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007a8:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007ac:	2004      	movs	r0, #4
 80007ae:	f7ff fe65 	bl	800047c <set_new_state>
				}
				break;
 80007b2:	e077      	b.n	80008a4 <run_game+0x2c8>
			case 3:
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <run_game+0x210>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	7cda      	ldrb	r2, [r3, #19]
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <run_game+0x22c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <run_game+0x230>)
 80007c4:	701a      	strb	r2, [r3, #0]
				if (checkP4 != 0) {
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <run_game+0x230>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d06c      	beq.n	80008a8 <run_game+0x2cc>
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007ce:	f001 f81d 	bl	800180c <HAL_GetTick>
 80007d2:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <run_game+0x210>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <run_game+0x210>)
 80007dc:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 80007de:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f7ff fe4a 	bl	800047c <set_new_state>
				}
				break;
 80007e8:	e05e      	b.n	80008a8 <run_game+0x2cc>
 80007ea:	bf00      	nop
 80007ec:	200000dc 	.word	0x200000dc
 80007f0:	200000e4 	.word	0x200000e4
 80007f4:	200000e0 	.word	0x200000e0
 80007f8:	200000e5 	.word	0x200000e5
 80007fc:	200000e1 	.word	0x200000e1
 8000800:	200000e6 	.word	0x200000e6
 8000804:	200000e2 	.word	0x200000e2
 8000808:	200000e7 	.word	0x200000e7
 800080c:	200000e3 	.word	0x200000e3

			case 4:
				checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 8000810:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <run_game+0x328>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	7c1a      	ldrb	r2, [r3, #16]
 8000816:	4b3c      	ldr	r3, [pc, #240]	; (8000908 <run_game+0x32c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <run_game+0x330>)
 8000820:	701a      	strb	r2, [r3, #0]
				checkP2 = fsm_handle->inputs.nb_press_btn2 - actualBTN2;
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <run_game+0x328>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	7c5a      	ldrb	r2, [r3, #17]
 8000828:	4b39      	ldr	r3, [pc, #228]	; (8000910 <run_game+0x334>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <run_game+0x338>)
 8000832:	701a      	strb	r2, [r3, #0]
				checkP3 = fsm_handle->inputs.nb_press_btn3 - actualBTN3;
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <run_game+0x328>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7c9a      	ldrb	r2, [r3, #18]
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <run_game+0x33c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <run_game+0x340>)
 8000844:	701a      	strb	r2, [r3, #0]
				checkP4 = fsm_handle->inputs.nb_press_btn4 - actualBTN4;
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <run_game+0x328>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	7cda      	ldrb	r2, [r3, #19]
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <run_game+0x344>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <run_game+0x348>)
 8000856:	701a      	strb	r2, [r3, #0]
				if (checkP1 != 0 && checkP2 != 0 && checkP3 != 0
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <run_game+0x330>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d025      	beq.n	80008ac <run_game+0x2d0>
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <run_game+0x338>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d021      	beq.n	80008ac <run_game+0x2d0>
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <run_game+0x340>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d01d      	beq.n	80008ac <run_game+0x2d0>
						&& checkP4 != 0) {
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <run_game+0x348>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d019      	beq.n	80008ac <run_game+0x2d0>
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000878:	f000 ffc8 	bl	800180c <HAL_GetTick>
 800087c:	4601      	mov	r1, r0
							- fsm_handle->controllers.state_base_time);
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <run_game+0x328>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	699a      	ldr	r2, [r3, #24]
					fsm_handle->controllers.timing = (HAL_GetTick()
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <run_game+0x328>)
 8000886:	681b      	ldr	r3, [r3, #0]
							- fsm_handle->controllers.state_base_time);
 8000888:	1a8a      	subs	r2, r1, r2
					fsm_handle->controllers.timing = (HAL_GetTick()
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
					set_new_state(STATE_DISP);
 800088c:	2004      	movs	r0, #4
 800088e:	f7ff fdf5 	bl	800047c <set_new_state>
				}
				break;
 8000892:	e00b      	b.n	80008ac <run_game+0x2d0>
			}
		} else {
			set_new_state(STATE_LOOSE);
 8000894:	2005      	movs	r0, #5
 8000896:	f7ff fdf1 	bl	800047c <set_new_state>
		}
		break;
 800089a:	e028      	b.n	80008ee <run_game+0x312>
				break;
 800089c:	bf00      	nop
 800089e:	e026      	b.n	80008ee <run_game+0x312>
				break;
 80008a0:	bf00      	nop
 80008a2:	e024      	b.n	80008ee <run_game+0x312>
				break;
 80008a4:	bf00      	nop
 80008a6:	e022      	b.n	80008ee <run_game+0x312>
				break;
 80008a8:	bf00      	nop
 80008aa:	e020      	b.n	80008ee <run_game+0x312>
				break;
 80008ac:	bf00      	nop
		break;
 80008ae:	e01e      	b.n	80008ee <run_game+0x312>
	case STATE_DISP:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <run_game+0x328>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7f1b      	ldrb	r3, [r3, #28]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d11b      	bne.n	80008f2 <run_game+0x316>
			set_new_state(STATE_WP);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fdde 	bl	800047c <set_new_state>
		}
		break;
 80008c0:	e017      	b.n	80008f2 <run_game+0x316>
	case STATE_WAIT:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <run_game+0x328>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d114      	bne.n	80008f6 <run_game+0x31a>
			set_new_state(STATE_GP);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f7ff fdd5 	bl	800047c <set_new_state>
		}
		break;
 80008d2:	e010      	b.n	80008f6 <run_game+0x31a>
	case STATE_LOOSE:
		if (fsm_handle->controllers.animation_state == ANIMATION_ENDED) {
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <run_game+0x328>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7f1b      	ldrb	r3, [r3, #28]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10d      	bne.n	80008fa <run_game+0x31e>
			set_new_state(STATE_WP);
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fdcc 	bl	800047c <set_new_state>
		}
		break;
 80008e4:	e009      	b.n	80008fa <run_game+0x31e>
		break;
 80008e6:	bf00      	nop
 80008e8:	e008      	b.n	80008fc <run_game+0x320>
		break;
 80008ea:	bf00      	nop
 80008ec:	e006      	b.n	80008fc <run_game+0x320>
		break;
 80008ee:	bf00      	nop
 80008f0:	e004      	b.n	80008fc <run_game+0x320>
		break;
 80008f2:	bf00      	nop
 80008f4:	e002      	b.n	80008fc <run_game+0x320>
		break;
 80008f6:	bf00      	nop
 80008f8:	e000      	b.n	80008fc <run_game+0x320>
		break;
 80008fa:	bf00      	nop
	}

	return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000dc 	.word	0x200000dc
 8000908:	200000e4 	.word	0x200000e4
 800090c:	200000e0 	.word	0x200000e0
 8000910:	200000e5 	.word	0x200000e5
 8000914:	200000e1 	.word	0x200000e1
 8000918:	200000e6 	.word	0x200000e6
 800091c:	200000e2 	.word	0x200000e2
 8000920:	200000e7 	.word	0x200000e7
 8000924:	200000e3 	.word	0x200000e3

08000928 <state_start>:

void state_start(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	//Affichage
	max7219_status = display_letter(game_handle->max7219_handle, 'G', 0);
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <state_start+0xa4>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2347      	movs	r3, #71	; 0x47
 8000938:	ca07      	ldmia	r2, {r0, r1, r2}
 800093a:	f000 fa17 	bl	8000d6c <display_letter>
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <state_start+0x24>
		Error_Handler();
 8000948:	f000 fbdc 	bl	8001104 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'A', 1);
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <state_start+0xa4>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2341      	movs	r3, #65	; 0x41
 8000956:	ca07      	ldmia	r2, {r0, r1, r2}
 8000958:	f000 fa08 	bl	8000d6c <display_letter>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <state_start+0x42>
		Error_Handler();
 8000966:	f000 fbcd 	bl	8001104 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'M', 2);
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <state_start+0xa4>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	2302      	movs	r3, #2
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	234d      	movs	r3, #77	; 0x4d
 8000974:	ca07      	ldmia	r2, {r0, r1, r2}
 8000976:	f000 f9f9 	bl	8000d6c <display_letter>
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <state_start+0x60>
		Error_Handler();
 8000984:	f000 fbbe 	bl	8001104 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 3);
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <state_start+0xa4>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	2303      	movs	r3, #3
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2345      	movs	r3, #69	; 0x45
 8000992:	ca07      	ldmia	r2, {r0, r1, r2}
 8000994:	f000 f9ea 	bl	8000d6c <display_letter>
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <state_start+0x7e>
		Error_Handler();
 80009a2:	f000 fbaf 	bl	8001104 <Error_Handler>

	//Ellapsed time
	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 80009a6:	f000 ff31 	bl	800180c <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <state_start+0xa8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d903      	bls.n	80009c4 <state_start+0x9c>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <state_start+0xa8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2201      	movs	r2, #1
 80009c2:	771a      	strb	r2, [r3, #28]
	}

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	200000dc 	.word	0x200000dc

080009d4 <state_wp>:
void state_wp(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	max7219_status = display_letter(game_handle->max7219_handle, 'P', 0);
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <state_wp+0x88>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	2350      	movs	r3, #80	; 0x50
 80009e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e6:	f000 f9c1 	bl	8000d6c <display_letter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <state_wp+0x24>
		Error_Handler();
 80009f4:	f000 fb86 	bl	8001104 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'R', 1);
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <state_wp+0x88>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2352      	movs	r3, #82	; 0x52
 8000a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a04:	f000 f9b2 	bl	8000d6c <display_letter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <state_wp+0x42>
		Error_Handler();
 8000a12:	f000 fb77 	bl	8001104 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'E', 2);
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <state_wp+0x88>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2345      	movs	r3, #69	; 0x45
 8000a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a22:	f000 f9a3 	bl	8000d6c <display_letter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <state_wp+0x60>
		Error_Handler();
 8000a30:	f000 fb68 	bl	8001104 <Error_Handler>
	max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <state_wp+0x88>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2303      	movs	r3, #3
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	2353      	movs	r3, #83	; 0x53
 8000a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a40:	f000 f994 	bl	8000d6c <display_letter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <state_wp+0x7e>
		Error_Handler();
 8000a4e:	f000 fb59 	bl	8001104 <Error_Handler>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d8 	.word	0x200000d8

08000a60 <state_gp>:
void state_gp(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef max7219_status;
	switch (fsm_handle->controllers.randomCase) {
 8000a66:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <state_gp+0x100>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d873      	bhi.n	8000b58 <state_gp+0xf8>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <state_gp+0x18>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a8d 	.word	0x08000a8d
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000abd 	.word	0x08000abd
 8000a84:	08000ad5 	.word	0x08000ad5
 8000a88:	08000aed 	.word	0x08000aed
	case 0:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000a8c:	2130      	movs	r1, #48	; 0x30
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fd9e 	bl	80015d0 <max7219_display_no_decode>
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d053      	beq.n	8000b46 <state_gp+0xe6>
			Error_Handler();
 8000a9e:	f000 fb31 	bl	8001104 <Error_Handler>
		break;
 8000aa2:	e050      	b.n	8000b46 <state_gp+0xe6>
	case 1:
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000aa4:	216d      	movs	r1, #109	; 0x6d
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fd92 	bl	80015d0 <max7219_display_no_decode>
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d049      	beq.n	8000b4a <state_gp+0xea>
			Error_Handler();
 8000ab6:	f000 fb25 	bl	8001104 <Error_Handler>
		break;
 8000aba:	e046      	b.n	8000b4a <state_gp+0xea>
	case 2:
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000abc:	2179      	movs	r1, #121	; 0x79
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f000 fd86 	bl	80015d0 <max7219_display_no_decode>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d03f      	beq.n	8000b4e <state_gp+0xee>
			Error_Handler();
 8000ace:	f000 fb19 	bl	8001104 <Error_Handler>
		break;
 8000ad2:	e03c      	b.n	8000b4e <state_gp+0xee>
	case 3:
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000ad4:	2133      	movs	r1, #51	; 0x33
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 fd7a 	bl	80015d0 <max7219_display_no_decode>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d035      	beq.n	8000b52 <state_gp+0xf2>
			Error_Handler();
 8000ae6:	f000 fb0d 	bl	8001104 <Error_Handler>
		break;
 8000aea:	e032      	b.n	8000b52 <state_gp+0xf2>

	case 4:
		max7219_status = max7219_display_no_decode(0, 0b00110000);
 8000aec:	2130      	movs	r1, #48	; 0x30
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fd6e 	bl	80015d0 <max7219_display_no_decode>
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <state_gp+0xa2>
			Error_Handler();
 8000afe:	f000 fb01 	bl	8001104 <Error_Handler>
		max7219_status = max7219_display_no_decode(1, 0b01101101);
 8000b02:	216d      	movs	r1, #109	; 0x6d
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 fd63 	bl	80015d0 <max7219_display_no_decode>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <state_gp+0xb8>
			Error_Handler();
 8000b14:	f000 faf6 	bl	8001104 <Error_Handler>
		max7219_status = max7219_display_no_decode(2, 0b01111001);
 8000b18:	2179      	movs	r1, #121	; 0x79
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fd58 	bl	80015d0 <max7219_display_no_decode>
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <state_gp+0xce>
			Error_Handler();
 8000b2a:	f000 faeb 	bl	8001104 <Error_Handler>
		max7219_status = max7219_display_no_decode(3, 0b00110011);
 8000b2e:	2133      	movs	r1, #51	; 0x33
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fd4d 	bl	80015d0 <max7219_display_no_decode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00a      	beq.n	8000b56 <state_gp+0xf6>
			Error_Handler();
 8000b40:	f000 fae0 	bl	8001104 <Error_Handler>
		break;
 8000b44:	e007      	b.n	8000b56 <state_gp+0xf6>
		break;
 8000b46:	bf00      	nop
 8000b48:	e006      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b4a:	bf00      	nop
 8000b4c:	e004      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b4e:	bf00      	nop
 8000b50:	e002      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b52:	bf00      	nop
 8000b54:	e000      	b.n	8000b58 <state_gp+0xf8>
		break;
 8000b56:	bf00      	nop
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <state_disp>:

void state_disp(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status;
	int mil, cent, diz, ent;

	mil = fsm_handle->controllers.timing / 1000;
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <state_disp+0x118>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	4a43      	ldr	r2, [pc, #268]	; (8000c80 <state_disp+0x11c>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	099b      	lsrs	r3, r3, #6
 8000b78:	617b      	str	r3, [r7, #20]
	cent = (fsm_handle->controllers.timing / 100) % 10;
 8000b7a:	4b40      	ldr	r3, [pc, #256]	; (8000c7c <state_disp+0x118>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <state_disp+0x120>)
 8000b82:	fba2 2303 	umull	r2, r3, r2, r3
 8000b86:	0959      	lsrs	r1, r3, #5
 8000b88:	4b3f      	ldr	r3, [pc, #252]	; (8000c88 <state_disp+0x124>)
 8000b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b8e:	08da      	lsrs	r2, r3, #3
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	1aca      	subs	r2, r1, r3
 8000b9a:	613a      	str	r2, [r7, #16]
	diz = (fsm_handle->controllers.timing / 10) % 10;
 8000b9c:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <state_disp+0x118>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	4a39      	ldr	r2, [pc, #228]	; (8000c88 <state_disp+0x124>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	08d9      	lsrs	r1, r3, #3
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <state_disp+0x124>)
 8000bac:	fba3 2301 	umull	r2, r3, r3, r1
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	1aca      	subs	r2, r1, r3
 8000bbc:	60fa      	str	r2, [r7, #12]
	ent = fsm_handle->controllers.timing % 10;
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <state_disp+0x118>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <state_disp+0x124>)
 8000bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	1aca      	subs	r2, r1, r3
 8000bd6:	60ba      	str	r2, [r7, #8]

	max7219_status = max7219_display_decode(0, mil);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 fd34 	bl	800164c <max7219_display_decode>
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <state_disp+0x8e>
		Error_Handler();
 8000bee:	f000 fa89 	bl	8001104 <Error_Handler>
	max7219_status = max7219_display_decode(0, 0b10000000);
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 fd29 	bl	800164c <max7219_display_decode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <state_disp+0xa4>
			Error_Handler();
 8000c04:	f000 fa7e 	bl	8001104 <Error_Handler>
	max7219_status = max7219_display_decode(1, cent);
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f000 fd1c 	bl	800164c <max7219_display_decode>
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <state_disp+0xbe>
		Error_Handler();
 8000c1e:	f000 fa71 	bl	8001104 <Error_Handler>
	max7219_status = max7219_display_decode(2, diz);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 fd0f 	bl	800164c <max7219_display_decode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <state_disp+0xd8>
		Error_Handler();
 8000c38:	f000 fa64 	bl	8001104 <Error_Handler>
	max7219_status = max7219_display_decode(3, ent);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 fd02 	bl	800164c <max7219_display_decode>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <state_disp+0xf2>
		Error_Handler();
 8000c52:	f000 fa57 	bl	8001104 <Error_Handler>

	if (HAL_GetTick() - fsm_handle->controllers.state_base_time >= 3000) {
 8000c56:	f000 fdd9 	bl	800180c <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <state_disp+0x118>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d903      	bls.n	8000c74 <state_disp+0x110>
		fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <state_disp+0x118>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	771a      	strb	r2, [r3, #28]
	}
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000dc 	.word	0x200000dc
 8000c80:	10624dd3 	.word	0x10624dd3
 8000c84:	51eb851f 	.word	0x51eb851f
 8000c88:	cccccccd 	.word	0xcccccccd

08000c8c <state_wait>:

void state_wait(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time)
 8000c90:	bf00      	nop
 8000c92:	f000 fdbb 	bl	800180c <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <state_wait+0x2c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	1ad2      	subs	r2, r2, r3
			< fsm_handle->controllers.randomTime)
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <state_wait+0x2c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3f3      	bcc.n	8000c92 <state_wait+0x6>
		;
	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <state_wait+0x2c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	771a      	strb	r2, [r3, #28]
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000dc 	.word	0x200000dc

08000cbc <state_loose>:

void state_loose(void) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000cc2:	e03b      	b.n	8000d3c <state_loose+0x80>
		max7219_status = display_letter(game_handle->max7219_handle, 'L', 0);
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <state_loose+0xa8>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	234c      	movs	r3, #76	; 0x4c
 8000cce:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd0:	f000 f84c 	bl	8000d6c <display_letter>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <state_loose+0x26>
			Error_Handler();
 8000cde:	f000 fa11 	bl	8001104 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 1);
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <state_loose+0xa8>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	234f      	movs	r3, #79	; 0x4f
 8000cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cee:	f000 f83d 	bl	8000d6c <display_letter>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <state_loose+0x44>
			Error_Handler();
 8000cfc:	f000 fa02 	bl	8001104 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'O', 2);
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <state_loose+0xa8>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	234f      	movs	r3, #79	; 0x4f
 8000d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0c:	f000 f82e 	bl	8000d6c <display_letter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <state_loose+0x62>
			Error_Handler();
 8000d1a:	f000 f9f3 	bl	8001104 <Error_Handler>
		max7219_status = display_letter(game_handle->max7219_handle, 'S', 3);
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <state_loose+0xa8>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	2303      	movs	r3, #3
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2353      	movs	r3, #83	; 0x53
 8000d28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d2a:	f000 f81f 	bl	8000d6c <display_letter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <state_loose+0x80>
			Error_Handler();
 8000d38:	f000 f9e4 	bl	8001104 <Error_Handler>
	while ((HAL_GetTick() - fsm_handle->controllers.state_base_time) < 3000) {
 8000d3c:	f000 fd66 	bl	800180c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <state_loose+0xac>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d9b8      	bls.n	8000cc4 <state_loose+0x8>
	}

	fsm_handle->controllers.animation_state = ANIMATION_ENDED;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <state_loose+0xac>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2201      	movs	r2, #1
 8000d58:	771a      	strb	r2, [r3, #28]
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000d8 	.word	0x200000d8
 8000d68:	200000dc 	.word	0x200000dc

08000d6c <display_letter>:

HAL_StatusTypeDef display_letter(MAX7219_Handle_TypeDef max7219_handle,char letter, int pos) {
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	1d3c      	adds	r4, r7, #4
 8000d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d78:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef max7219_status;

	if (letter >= 'A' && letter <= 'Z') {
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	2b40      	cmp	r3, #64	; 0x40
 8000d7e:	d90e      	bls.n	8000d9e <display_letter+0x32>
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b5a      	cmp	r3, #90	; 0x5a
 8000d84:	d80b      	bhi.n	8000d9e <display_letter+0x32>
		max7219_status = max7219_display_no_decode(pos, LETTERS[letter - 'A']);
 8000d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	3b41      	subs	r3, #65	; 0x41
 8000d8e:	4906      	ldr	r1, [pc, #24]	; (8000da8 <display_letter+0x3c>)
 8000d90:	5ccb      	ldrb	r3, [r1, r3]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f000 fc1b 	bl	80015d0 <max7219_display_no_decode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	75fb      	strb	r3, [r7, #23]
	}
	return max7219_status;
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000030 	.word	0x20000030

08000dac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin) {
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dbc:	d014      	beq.n	8000de8 <HAL_GPIO_EXTI_Callback+0x3c>
 8000dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dc2:	dc26      	bgt.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
 8000dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_EXTI_Callback+0x2e>
 8000dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000dce:	dc20      	bgt.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d017      	beq.n	8000e04 <HAL_GPIO_EXTI_Callback+0x58>
 8000dd4:	2b40      	cmp	r3, #64	; 0x40
 8000dd6:	d00e      	beq.n	8000df6 <HAL_GPIO_EXTI_Callback+0x4a>
	case BTN4_Pin:
		fsm_handle->inputs.nb_press_btn4++;
		break;
	}

}
 8000dd8:	e01b      	b.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn1++;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x70>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	7c1a      	ldrb	r2, [r3, #16]
 8000de0:	3201      	adds	r2, #1
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	741a      	strb	r2, [r3, #16]
		break;
 8000de6:	e014      	b.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn2++;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x70>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	7c5a      	ldrb	r2, [r3, #17]
 8000dee:	3201      	adds	r2, #1
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	745a      	strb	r2, [r3, #17]
		break;
 8000df4:	e00d      	b.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn3++;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x70>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	7c9a      	ldrb	r2, [r3, #18]
 8000dfc:	3201      	adds	r2, #1
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	749a      	strb	r2, [r3, #18]
		break;
 8000e02:	e006      	b.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
		fsm_handle->inputs.nb_press_btn4++;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_GPIO_EXTI_Callback+0x70>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	7cda      	ldrb	r2, [r3, #19]
 8000e0a:	3201      	adds	r2, #1
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	74da      	strb	r2, [r3, #19]
		break;
 8000e10:	bf00      	nop
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	200000dc 	.word	0x200000dc

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b092      	sub	sp, #72	; 0x48
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fc8d 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f82b 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f8fb 	bl	8001028 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e32:	f000 f875 	bl	8000f20 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000e36:	f000 f8a9 	bl	8000f8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Handle_TypeDef max7219_handle ={
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <main+0x60>)
 8000e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            &hspi1,
            NCS_GPIO_Port,
            NCS_Pin,
            4
    };
  HAL_StatusTypeDef game_status = HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    Game_Handle_TypeDef game_handler = {
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            max7219_handle,
    };

    FSM_Handle_TypeDef fsm_handler;

    init_game(&game_handler, &fsm_handler);
 8000e5a:	463a      	mov	r2, r7
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb82 	bl	800056c <init_game>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  game_status=run_game();
 8000e68:	f7ff fbb8 	bl	80005dc <run_game>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	  if(game_status != HAL_OK)Error_Handler();
 8000e72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f6      	beq.n	8000e68 <main+0x48>
 8000e7a:	f000 f943 	bl	8001104 <Error_Handler>
	  game_status=run_game();
 8000e7e:	e7f3      	b.n	8000e68 <main+0x48>
 8000e80:	08004590 	.word	0x08004590

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b092      	sub	sp, #72	; 0x48
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2234      	movs	r2, #52	; 0x34
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fc80 	bl	8003798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <SystemClock_Config+0x98>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000eae:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <SystemClock_Config+0x98>)
 8000eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000eca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000ed0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 ffa2 	bl	8001e24 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ee6:	f000 f90d 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
 8000eec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fabe 	bl	8002484 <HAL_RCC_ClockConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f0e:	f000 f8f9 	bl	8001104 <Error_Handler>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3748      	adds	r7, #72	; 0x48
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <MX_SPI1_Init+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f6c:	220a      	movs	r2, #10
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_SPI1_Init+0x64>)
 8000f72:	f001 fcd9 	bl	8002928 <HAL_SPI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f7c:	f000 f8c2 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200000e8 	.word	0x200000e8
 8000f88:	40013000 	.word	0x40013000

08000f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_TIM2_Init+0x98>)
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_TIM2_Init+0x98>)
 8000fb2:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000fb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_TIM2_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_TIM2_Init+0x98>)
 8000fc0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000fc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_TIM2_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_TIM2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <MX_TIM2_Init+0x98>)
 8000fd4:	f001 ff3e 	bl	8002e54 <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fde:	f000 f891 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_TIM2_Init+0x98>)
 8000ff0:	f002 f84b 	bl	800308a <HAL_TIM_ConfigClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ffa:	f000 f883 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_TIM2_Init+0x98>)
 800100c:	f002 fa38 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001016:	f000 f875 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000140 	.word	0x20000140

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <MX_GPIO_Init+0xd0>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <MX_GPIO_Init+0xd0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <MX_GPIO_Init+0xd0>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <MX_GPIO_Init+0xd0>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <MX_GPIO_Init+0xd0>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <MX_GPIO_Init+0xd0>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <MX_GPIO_Init+0xd4>)
 8001076:	f000 fe7f 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 800107a:	2360      	movs	r3, #96	; 0x60
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <MX_GPIO_Init+0xd8>)
 8001090:	f000 fce2 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 8001094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <MX_GPIO_Init+0xd4>)
 80010ae:	f000 fcd3 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80010b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_GPIO_Init+0xd4>)
 80010ca:	f000 fcc5 	bl	8001a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2017      	movs	r0, #23
 80010d4:	f000 fc89 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010d8:	2017      	movs	r0, #23
 80010da:	f000 fca2 	bl	8001a22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2028      	movs	r0, #40	; 0x28
 80010e4:	f000 fc81 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f000 fc9a 	bl	8001a22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020800 	.word	0x40020800

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_MspInit+0x58>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_MspInit+0x58>)
 800111c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001120:	6253      	str	r3, [r2, #36]	; 0x24
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_MspInit+0x58>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_MspInit+0x58>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_MspInit+0x58>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_MspInit+0x58>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x58>)
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_MspInit+0x58>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6253      	str	r3, [r2, #36]	; 0x24
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_MspInit+0x58>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_SPI_MspInit+0x7c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d127      	bne.n	80011de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_SPI_MspInit+0x80>)
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <HAL_SPI_MspInit+0x80>)
 8001194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001198:	6213      	str	r3, [r2, #32]
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_SPI_MspInit+0x80>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_SPI_MspInit+0x80>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_SPI_MspInit+0x80>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_SPI_MspInit+0x80>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011be:	23a0      	movs	r3, #160	; 0xa0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_SPI_MspInit+0x84>)
 80011da:	f000 fc3d 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	; 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40013000 	.word	0x40013000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d113      	bne.n	800122e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_TIM_Base_MspInit+0x44>)
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_TIM_Base_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6253      	str	r3, [r2, #36]	; 0x24
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_TIM_Base_MspInit+0x44>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	201c      	movs	r0, #28
 8001224:	f000 fbe1 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001228:	201c      	movs	r0, #28
 800122a:	f000 fbfa 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 fab1 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 800128e:	2020      	movs	r0, #32
 8001290:	f000 fd8a 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	f000 fd87 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM2_IRQHandler+0x10>)
 80012a6:	f001 fe14 	bl	8002ed2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000140 	.word	0x20000140

080012b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80012b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012bc:	f000 fd74 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80012c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012c4:	f000 fd70 	bl	8001da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_kill>:

int _kill(int pid, int sig)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012e4:	f002 fa60 	bl	80037a8 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2216      	movs	r2, #22
 80012ec:	601a      	str	r2, [r3, #0]
  return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_exit>:

void _exit (int status)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffe7 	bl	80012da <_kill>
  while (1) {}    /* Make sure we hang here */
 800130c:	e7fe      	b.n	800130c <_exit+0x12>

0800130e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e00a      	b.n	8001336 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001320:	f3af 8000 	nop.w
 8001324:	4601      	mov	r1, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	60ba      	str	r2, [r7, #8]
 800132c:	b2ca      	uxtb	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	dbf0      	blt.n	8001320 <_read+0x12>
  }

  return len;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e009      	b.n	800136e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	dbf1      	blt.n	800135a <_write+0x12>
  }
  return len;
 8001376:	687b      	ldr	r3, [r7, #4]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_close>:

int _close(int file)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a6:	605a      	str	r2, [r3, #4]
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_isatty>:

int _isatty(int file)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013bc:	2301      	movs	r3, #1
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f002 f9ca 	bl	80037a8 <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20014000 	.word	0x20014000
 8001440:	00000400 	.word	0x00000400
 8001444:	20000180 	.word	0x20000180
 8001448:	200002d8 	.word	0x200002d8

0800144c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff fff8 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145e:	490c      	ldr	r1, [pc, #48]	; (8001490 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001460:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001474:	4c09      	ldr	r4, [pc, #36]	; (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f002 f997 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001486:	f7ff fccb 	bl	8000e20 <main>
  bx lr
 800148a:	4770      	bx	lr
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001494:	080046a8 	.word	0x080046a8
  ldr r2, =_sbss
 8001498:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800149c:	200002d8 	.word	0x200002d8

080014a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_IRQHandler>
	...

080014a4 <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	460a      	mov	r2, r1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	4613      	mov	r3, r2
 80014b2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	723b      	strb	r3, [r7, #8]
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 80014bc:	2302      	movs	r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 80014c0:	2300      	movs	r3, #0
 80014c2:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <max7219_transmit+0x6c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6858      	ldr	r0, [r3, #4]
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <max7219_transmit+0x6c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	891b      	ldrh	r3, [r3, #8]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f000 fc50 	bl	8001d78 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <max7219_transmit+0x6c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f107 0108 	add.w	r1, r7, #8
 80014e6:	2364      	movs	r3, #100	; 0x64
 80014e8:	f001 faa7 	bl	8002a3a <HAL_SPI_Transmit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <max7219_transmit+0x6c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6858      	ldr	r0, [r3, #4]
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <max7219_transmit+0x6c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	891b      	ldrh	r3, [r3, #8]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f000 fc3a 	bl	8001d78 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 8001504:	7afb      	ldrb	r3, [r7, #11]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000184 	.word	0x20000184

08001514 <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <max7219_init+0xb8>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <max7219_init+0xb8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d104      	bne.n	8001534 <max7219_init+0x20>
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <max7219_init+0xb8>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	e047      	b.n	80015c4 <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8001538:	2100      	movs	r1, #0
 800153a:	200c      	movs	r0, #12
 800153c:	f7ff ffb2 	bl	80014a4 <max7219_transmit>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <max7219_init+0x3a>
		return max7219_status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	e03a      	b.n	80015c4 <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 800154e:	2101      	movs	r1, #1
 8001550:	200c      	movs	r0, #12
 8001552:	f7ff ffa7 	bl	80014a4 <max7219_transmit>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <max7219_init+0x50>
		return max7219_status;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	e02f      	b.n	80015c4 <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <max7219_init+0xb8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	7a9b      	ldrb	r3, [r3, #10]
 800156a:	3b01      	subs	r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4619      	mov	r1, r3
 8001570:	200b      	movs	r0, #11
 8001572:	f7ff ff97 	bl	80014a4 <max7219_transmit>
 8001576:	4603      	mov	r3, r0
 8001578:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <max7219_init+0x70>
		return max7219_status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	e01f      	b.n	80015c4 <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8001584:	2100      	movs	r1, #0
 8001586:	2009      	movs	r0, #9
 8001588:	f7ff ff8c 	bl	80014a4 <max7219_transmit>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <max7219_init+0x86>
		return max7219_status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	e014      	b.n	80015c4 <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 800159a:	2108      	movs	r1, #8
 800159c:	200a      	movs	r0, #10
 800159e:	f7ff ff81 	bl	80014a4 <max7219_transmit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <max7219_init+0x9c>
		return max7219_status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	e009      	b.n	80015c4 <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 80015b0:	f000 f88a 	bl	80016c8 <max7219_erase_no_decode>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <max7219_init+0xae>
		return max7219_status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	e000      	b.n	80015c4 <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000184 	.word	0x20000184

080015d0 <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	4613      	mov	r3, r2
 80015de:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <max7219_display_no_decode+0x74>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d104      	bne.n	80015f6 <max7219_display_no_decode+0x26>
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <max7219_display_no_decode+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	e022      	b.n	800163c <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 80015f6:	2100      	movs	r1, #0
 80015f8:	2009      	movs	r0, #9
 80015fa:	f7ff ff53 	bl	80014a4 <max7219_transmit>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <max7219_display_no_decode+0x3c>
		return max7219_status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	e017      	b.n	800163c <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <max7219_display_no_decode+0x74>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	7a9b      	ldrb	r3, [r3, #10]
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	429a      	cmp	r2, r3
 8001616:	d901      	bls.n	800161c <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e00f      	b.n	800163c <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <max7219_display_no_decode+0x78>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	79ba      	ldrb	r2, [r7, #6]
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff3c 	bl	80014a4 <max7219_transmit>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <max7219_display_no_decode+0x6a>
		return max7219_status;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	e000      	b.n	800163c <max7219_display_no_decode+0x6c>

	return max7219_status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000184 	.word	0x20000184
 8001648:	20000050 	.word	0x20000050

0800164c <max7219_display_decode>:
 * @brief Display value with code B decoding.
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_decode(uint8_t _digit_index, uint8_t _digit_value){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <max7219_display_decode+0x74>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d104      	bne.n	8001672 <max7219_display_decode+0x26>
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <max7219_display_decode+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	e022      	b.n	80016b8 <max7219_display_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <max7219_display_decode+0x74>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	7a9b      	ldrb	r3, [r3, #10]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	429a      	cmp	r2, r3
 800167c:	d901      	bls.n	8001682 <max7219_display_decode+0x36>
		return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e01a      	b.n	80016b8 <max7219_display_decode+0x6c>

	// Set decode mode to 'decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0xFF);
 8001682:	21ff      	movs	r1, #255	; 0xff
 8001684:	2009      	movs	r0, #9
 8001686:	f7ff ff0d 	bl	80014a4 <max7219_transmit>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <max7219_display_decode+0x4c>
		return max7219_status;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	e00f      	b.n	80016b8 <max7219_display_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <max7219_display_decode+0x78>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	79ba      	ldrb	r2, [r7, #6]
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fefe 	bl	80014a4 <max7219_transmit>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <max7219_display_decode+0x6a>
		return max7219_status;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	e000      	b.n	80016b8 <max7219_display_decode+0x6c>

	return max7219_status;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000184 	.word	0x20000184
 80016c4:	20000050 	.word	0x20000050

080016c8 <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <max7219_erase_no_decode+0x74>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d104      	bne.n	80016e4 <max7219_erase_no_decode+0x1c>
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <max7219_erase_no_decode+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	e027      	b.n	8001734 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 80016e4:	2100      	movs	r1, #0
 80016e6:	2009      	movs	r0, #9
 80016e8:	f7ff fedc 	bl	80014a4 <max7219_transmit>
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <max7219_erase_no_decode+0x32>
		return max7219_status;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	e01c      	b.n	8001734 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
 80016fe:	e011      	b.n	8001724 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <max7219_erase_no_decode+0x78>)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff feca 	bl	80014a4 <max7219_transmit>
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <max7219_erase_no_decode+0x56>
			return max7219_status;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	e00a      	b.n	8001734 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <max7219_erase_no_decode+0x74>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	7a9b      	ldrb	r3, [r3, #10]
 800172a:	461a      	mov	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4293      	cmp	r3, r2
 8001730:	dbe6      	blt.n	8001700 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 8001732:	79fb      	ldrb	r3, [r7, #7]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000184 	.word	0x20000184
 8001740:	20000050 	.word	0x20000050

08001744 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174e:	2003      	movs	r0, #3
 8001750:	f000 f940 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001754:	200f      	movs	r0, #15
 8001756:	f000 f80d 	bl	8001774 <HAL_InitTick>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	e001      	b.n	800176a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001766:	f7ff fcd3 	bl	8001110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176a:	79fb      	ldrb	r3, [r7, #7]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_InitTick+0x68>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d022      	beq.n	80017ce <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_InitTick+0x6c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_InitTick+0x68>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f94e 	bl	8001a3e <HAL_SYSTICK_Config>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10f      	bne.n	80017c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	d809      	bhi.n	80017c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ae:	2200      	movs	r2, #0
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b6:	f000 f918 	bl	80019ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0x70>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e004      	b.n	80017d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000005c 	.word	0x2000005c
 80017e0:	2000004c 	.word	0x2000004c
 80017e4:	20000058 	.word	0x20000058

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <HAL_IncTick+0x1c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_IncTick+0x20>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	4a03      	ldr	r2, [pc, #12]	; (8001804 <HAL_IncTick+0x1c>)
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000188 	.word	0x20000188
 8001808:	2000005c 	.word	0x2000005c

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b02      	ldr	r3, [pc, #8]	; (800181c <HAL_GetTick+0x10>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000188 	.word	0x20000188

08001820 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_SuspendTick+0x18>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_SuspendTick+0x18>)
 800182a:	f023 0302 	bic.w	r3, r3, #2
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	e000e010 	.word	0xe000e010

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <__NVIC_EnableIRQ+0x34>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b4:	f7ff ff90 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff2d 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff42 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff90 	bl	800192c <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5f 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff35 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a6e:	e160      	b.n	8001d32 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8152 	beq.w	8001d2c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d130      	bne.n	8001b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 0201 	and.w	r2, r3, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d017      	beq.n	8001b3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d123      	bne.n	8001b92 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	6939      	ldr	r1, [r7, #16]
 8001b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80ac 	beq.w	8001d2c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd4:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <HAL_GPIO_Init+0x2f8>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	; (8001d50 <HAL_GPIO_Init+0x2f8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <HAL_GPIO_Init+0x2f8>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bec:	4a59      	ldr	r2, [pc, #356]	; (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d025      	beq.n	8001c64 <HAL_GPIO_Init+0x20c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_GPIO_Init+0x304>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d01f      	beq.n	8001c60 <HAL_GPIO_Init+0x208>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4f      	ldr	r2, [pc, #316]	; (8001d60 <HAL_GPIO_Init+0x308>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d019      	beq.n	8001c5c <HAL_GPIO_Init+0x204>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <HAL_GPIO_Init+0x30c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_GPIO_Init+0x200>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_GPIO_Init+0x310>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1fc>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <HAL_GPIO_Init+0x314>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1f8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4b      	ldr	r2, [pc, #300]	; (8001d70 <HAL_GPIO_Init+0x318>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1f4>
 8001c48:	2306      	movs	r3, #6
 8001c4a:	e00c      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	e00a      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c50:	2305      	movs	r3, #5
 8001c52:	e008      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e006      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e004      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_GPIO_Init+0x20e>
 8001c64:	2300      	movs	r3, #0
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c76:	4937      	ldr	r1, [pc, #220]	; (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ca8:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cd2:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_GPIO_Init+0x31c>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f ae97 	bne.w	8001a70 <HAL_GPIO_Init+0x18>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40010400 	.word	0x40010400

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fff0 	bl	8000dac <HAL_GPIO_EXTI_Callback>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_PWR_EnterSLEEPMode+0x44>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 0203 	bic.w	r2, r3, #3
 8001dec:	490b      	ldr	r1, [pc, #44]	; (8001e1c <HAL_PWR_EnterSLEEPMode+0x44>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001dfa:	f023 0304 	bic.w	r3, r3, #4
 8001dfe:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001e06:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001e08:	e002      	b.n	8001e10 <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 8001e0a:	bf40      	sev
    __WFE();
 8001e0c:	bf20      	wfe
    __WFE();
 8001e0e:	bf20      	wfe
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e31d      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e36:	4b94      	ldr	r3, [pc, #592]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e40:	4b91      	ldr	r3, [pc, #580]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d07b      	beq.n	8001f4e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d006      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d10f      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5e>
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6a:	4b87      	ldr	r3, [pc, #540]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d06a      	beq.n	8001f4c <HAL_RCC_OscConfig+0x128>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d166      	bne.n	8001f4c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e2f7      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x74>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e02d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x96>
 8001ea0:	4b79      	ldr	r3, [pc, #484]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a78      	ldr	r2, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a75      	ldr	r2, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd0>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xb8>
 8001ec2:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a70      	ldr	r2, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6e      	ldr	r3, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6d      	ldr	r2, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd0>
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a66      	ldr	r2, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fc86 	bl	800180c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fc82 	bl	800180c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e2ad      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f16:	4b5c      	ldr	r3, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe0>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fc72 	bl	800180c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fc6e 	bl	800180c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e299      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f3e:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x108>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d05a      	beq.n	8002010 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d119      	bne.n	8001f9a <HAL_RCC_OscConfig+0x176>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d116      	bne.n	8001f9a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_OscConfig+0x160>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e276      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	493d      	ldr	r1, [pc, #244]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f98:	e03a      	b.n	8002010 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d020      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_RCC_OscConfig+0x268>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fc30 	bl	800180c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fc2c 	bl	800180c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e257      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	492a      	ldr	r1, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_OscConfig+0x268>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fc0f 	bl	800180c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc0b 	bl	800180c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e236      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80b8 	beq.w	800218e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d170      	bne.n	8002106 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_OscConfig+0x218>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e21a      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002048:	429a      	cmp	r2, r3
 800204a:	d921      	bls.n	8002090 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fc09 	bl	8002868 <RCC_SetFlashLatencyFromMSIRange>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e208      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4906      	ldr	r1, [pc, #24]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	061b      	lsls	r3, r3, #24
 8002080:	4901      	ldr	r1, [pc, #4]	; (8002088 <HAL_RCC_OscConfig+0x264>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
 8002086:	e020      	b.n	80020ca <HAL_RCC_OscConfig+0x2a6>
 8002088:	40023800 	.word	0x40023800
 800208c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4b99      	ldr	r3, [pc, #612]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4996      	ldr	r1, [pc, #600]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a2:	4b95      	ldr	r3, [pc, #596]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	061b      	lsls	r3, r3, #24
 80020b0:	4991      	ldr	r1, [pc, #580]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fbd4 	bl	8002868 <RCC_SetFlashLatencyFromMSIRange>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e1d3      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	3301      	adds	r3, #1
 80020d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020da:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80020dc:	6892      	ldr	r2, [r2, #8]
 80020de:	0912      	lsrs	r2, r2, #4
 80020e0:	f002 020f 	and.w	r2, r2, #15
 80020e4:	4985      	ldr	r1, [pc, #532]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	5c8a      	ldrb	r2, [r1, r2]
 80020e8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ea:	4a85      	ldr	r2, [pc, #532]	; (8002300 <HAL_RCC_OscConfig+0x4dc>)
 80020ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020ee:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x4e0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fb3e 	bl	8001774 <HAL_InitTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d045      	beq.n	800218e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	e1b5      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d029      	beq.n	8002162 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800210e:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <HAL_RCC_OscConfig+0x4e4>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fb7a 	bl	800180c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800211c:	f7ff fb76 	bl	800180c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1a1      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	496c      	ldr	r1, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214c:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	4967      	ldr	r1, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002162:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_RCC_OscConfig+0x4e4>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fb50 	bl	800180c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002170:	f7ff fb4c 	bl	800180c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e177      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d030      	beq.n	80021fc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d016      	beq.n	80021d0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	4b5a      	ldr	r3, [pc, #360]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fb30 	bl	800180c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fb2c 	bl	800180c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e157      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021c2:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x38c>
 80021ce:	e015      	b.n	80021fc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d0:	4b4e      	ldr	r3, [pc, #312]	; (800230c <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff fb19 	bl	800180c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7ff fb15 	bl	800180c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e140      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021f0:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80b5 	beq.w	8002374 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	4a36      	ldr	r2, [pc, #216]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6253      	str	r3, [r2, #36]	; 0x24
 8002226:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7ff fadd 	bl	800180c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7ff fad9 	bl	800180c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	; 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e104      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_OscConfig+0x4ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x466>
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	4a1d      	ldr	r2, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6353      	str	r3, [r2, #52]	; 0x34
 8002288:	e02d      	b.n	80022e6 <HAL_RCC_OscConfig+0x4c2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x488>
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 8002298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800229c:	6353      	str	r3, [r2, #52]	; 0x34
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a8:	6353      	str	r3, [r2, #52]	; 0x34
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x4c2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x4aa>
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022be:	6353      	str	r3, [r2, #52]	; 0x34
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6353      	str	r3, [r2, #52]	; 0x34
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x4c2>
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d8:	6353      	str	r3, [r2, #52]	; 0x34
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80022e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d024      	beq.n	8002338 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7ff fa8d 	bl	800180c <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f4:	e019      	b.n	800232a <HAL_RCC_OscConfig+0x506>
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	080045a8 	.word	0x080045a8
 8002300:	2000004c 	.word	0x2000004c
 8002304:	20000058 	.word	0x20000058
 8002308:	42470020 	.word	0x42470020
 800230c:	42470680 	.word	0x42470680
 8002310:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff fa7a 	bl	800180c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0a3      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_RCC_OscConfig+0x658>)
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ee      	beq.n	8002314 <HAL_RCC_OscConfig+0x4f0>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff fa68 	bl	800180c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff fa64 	bl	800180c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e08d      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_RCC_OscConfig+0x658>)
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ee      	bne.n	8002340 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b44      	ldr	r3, [pc, #272]	; (800247c <HAL_RCC_OscConfig+0x658>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	4a43      	ldr	r2, [pc, #268]	; (800247c <HAL_RCC_OscConfig+0x658>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d079      	beq.n	8002470 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b0c      	cmp	r3, #12
 8002380:	d056      	beq.n	8002430 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b02      	cmp	r3, #2
 8002388:	d13b      	bne.n	8002402 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_OscConfig+0x65c>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fa3c 	bl	800180c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff fa38 	bl	800180c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e063      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x658>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_OscConfig+0x658>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	4319      	orrs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	430b      	orrs	r3, r1
 80023ce:	492b      	ldr	r1, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x658>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_OscConfig+0x65c>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff fa17 	bl	800180c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e2:	f7ff fa13 	bl	800180c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e03e      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x658>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x5be>
 8002400:	e036      	b.n	8002470 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_RCC_OscConfig+0x65c>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fa00 	bl	800180c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff f9fc 	bl	800180c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e027      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_RCC_OscConfig+0x658>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x5ec>
 800242e:	e01f      	b.n	8002470 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e01a      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCC_OscConfig+0x658>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	429a      	cmp	r2, r3
 800244e:	d10d      	bne.n	800246c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	42470060 	.word	0x42470060

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e11a      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b8f      	ldr	r3, [pc, #572]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d919      	bls.n	80024da <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x34>
 80024ac:	4b8a      	ldr	r3, [pc, #552]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a89      	ldr	r2, [pc, #548]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b87      	ldr	r3, [pc, #540]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0201 	bic.w	r2, r3, #1
 80024c0:	4985      	ldr	r1, [pc, #532]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c8:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0f9      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e6:	4b7d      	ldr	r3, [pc, #500]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	497a      	ldr	r1, [pc, #488]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 808e 	beq.w	8002622 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800250e:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d121      	bne.n	800255e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e0d7      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d107      	bne.n	8002536 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d115      	bne.n	800255e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0cb      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253e:	4b67      	ldr	r3, [pc, #412]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0bf      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0b7      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255e:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	495c      	ldr	r1, [pc, #368]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002570:	f7ff f94c 	bl	800180c <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d112      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7ff f944 	bl	800180c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e09b      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002596:	4b51      	ldr	r3, [pc, #324]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_ClockConfig+0xfc>
 80025a2:	e03e      	b.n	8002622 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d112      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7ff f92d 	bl	800180c <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e084      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c4:	4b45      	ldr	r3, [pc, #276]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_ClockConfig+0x12a>
 80025d0:	e027      	b.n	8002622 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d11d      	bne.n	8002616 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff f916 	bl	800180c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e06d      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f2:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d1ee      	bne.n	80025dc <HAL_RCC_ClockConfig+0x158>
 80025fe:	e010      	b.n	8002622 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f904 	bl	800180c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e05b      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ee      	bne.n	8002600 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d219      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCC_ClockConfig+0x1be>
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0201 	bic.w	r2, r3, #1
 800264a:	4923      	ldr	r1, [pc, #140]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <HAL_RCC_ClockConfig+0x254>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e034      	b.n	80026ce <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4917      	ldr	r1, [pc, #92]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490f      	ldr	r1, [pc, #60]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f823 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_RCC_ClockConfig+0x258>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x25c>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x260>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f856 	bl	8001774 <HAL_InitTick>
 80026c8:	4603      	mov	r3, r0
 80026ca:	72fb      	strb	r3, [r7, #11]

  return status;
 80026cc:	7afb      	ldrb	r3, [r7, #11]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00
 80026dc:	40023800 	.word	0x40023800
 80026e0:	080045a8 	.word	0x080045a8
 80026e4:	2000004c 	.word	0x2000004c
 80026e8:	20000058 	.word	0x20000058

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b08e      	sub	sp, #56	; 0x38
 80026f2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80026f4:	4b58      	ldr	r3, [pc, #352]	; (8002858 <HAL_RCC_GetSysClockFreq+0x16c>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b0c      	cmp	r3, #12
 8002702:	d00d      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x34>
 8002704:	2b0c      	cmp	r3, #12
 8002706:	f200 8092 	bhi.w	800282e <HAL_RCC_GetSysClockFreq+0x142>
 800270a:	2b04      	cmp	r3, #4
 800270c:	d002      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x28>
 800270e:	2b08      	cmp	r3, #8
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x2e>
 8002712:	e08c      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCC_GetSysClockFreq+0x170>)
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002718:	e097      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271a:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_RCC_GetSysClockFreq+0x174>)
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800271e:	e094      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	0c9b      	lsrs	r3, r3, #18
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <HAL_RCC_GetSysClockFreq+0x178>)
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	0d9b      	lsrs	r3, r3, #22
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <HAL_RCC_GetSysClockFreq+0x16c>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d021      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	2200      	movs	r2, #0
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	61fa      	str	r2, [r7, #28]
 800274e:	4b44      	ldr	r3, [pc, #272]	; (8002860 <HAL_RCC_GetSysClockFreq+0x174>)
 8002750:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002754:	464a      	mov	r2, r9
 8002756:	fb03 f202 	mul.w	r2, r3, r2
 800275a:	2300      	movs	r3, #0
 800275c:	4644      	mov	r4, r8
 800275e:	fb04 f303 	mul.w	r3, r4, r3
 8002762:	4413      	add	r3, r2
 8002764:	4a3e      	ldr	r2, [pc, #248]	; (8002860 <HAL_RCC_GetSysClockFreq+0x174>)
 8002766:	4644      	mov	r4, r8
 8002768:	fba4 0102 	umull	r0, r1, r4, r2
 800276c:	440b      	add	r3, r1
 800276e:	4619      	mov	r1, r3
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	2200      	movs	r2, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	617a      	str	r2, [r7, #20]
 8002778:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800277c:	f7fd fcfe 	bl	800017c <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	637b      	str	r3, [r7, #52]	; 0x34
 8002788:	e04e      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	2200      	movs	r2, #0
 800278e:	469a      	mov	sl, r3
 8002790:	4693      	mov	fp, r2
 8002792:	4652      	mov	r2, sl
 8002794:	465b      	mov	r3, fp
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	0159      	lsls	r1, r3, #5
 80027a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a4:	0150      	lsls	r0, r2, #5
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	ebb2 080a 	subs.w	r8, r2, sl
 80027ae:	eb63 090b 	sbc.w	r9, r3, fp
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027c6:	ebb2 0408 	subs.w	r4, r2, r8
 80027ca:	eb63 0509 	sbc.w	r5, r3, r9
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	00eb      	lsls	r3, r5, #3
 80027d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027dc:	00e2      	lsls	r2, r4, #3
 80027de:	4614      	mov	r4, r2
 80027e0:	461d      	mov	r5, r3
 80027e2:	eb14 030a 	adds.w	r3, r4, sl
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	eb45 030b 	adc.w	r3, r5, fp
 80027ec:	607b      	str	r3, [r7, #4]
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027fa:	4629      	mov	r1, r5
 80027fc:	028b      	lsls	r3, r1, #10
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	4604      	mov	r4, r0
 8002804:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002808:	4601      	mov	r1, r0
 800280a:	028a      	lsls	r2, r1, #10
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	2200      	movs	r2, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	60fa      	str	r2, [r7, #12]
 8002818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800281c:	f7fd fcae 	bl	800017c <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800282c:	e00d      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	3301      	adds	r3, #1
 800283e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800284c:	4618      	mov	r0, r3
 800284e:	3738      	adds	r7, #56	; 0x38
 8002850:	46bd      	mov	sp, r7
 8002852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	00f42400 	.word	0x00f42400
 8002860:	016e3600 	.word	0x016e3600
 8002864:	0800459c 	.word	0x0800459c

08002868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d12c      	bne.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002880:	4b26      	ldr	r3, [pc, #152]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e016      	b.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	4b20      	ldr	r3, [pc, #128]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800289e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6253      	str	r3, [r2, #36]	; 0x24
 80028a4:	4b1d      	ldr	r3, [pc, #116]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80028b8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	4a17      	ldr	r2, [pc, #92]	; (800291c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80028cc:	d105      	bne.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x72>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028d4:	d101      	bne.n	80028da <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80028d6:	2301      	movs	r3, #1
 80028d8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0x84>
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 0201 	bic.w	r2, r3, #1
 80028f4:	490b      	ldr	r1, [pc, #44]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40007000 	.word	0x40007000
 8002924:	40023c00 	.word	0x40023c00

08002928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07b      	b.n	8002a32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d009      	beq.n	8002960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
 8002952:	e005      	b.n	8002960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe fbf6 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002996:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f003 0104 	and.w	r1, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	f003 0210 	and.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b088      	sub	sp, #32
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_SPI_Transmit+0x22>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e12d      	b.n	8002cb8 <HAL_SPI_Transmit+0x27e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a64:	f7fe fed2 	bl	800180c <HAL_GetTick>
 8002a68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a7e:	e116      	b.n	8002cae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_SPI_Transmit+0x52>
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a90:	e10d      	b.n	8002cae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2203      	movs	r2, #3
 8002a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad8:	d10f      	bne.n	8002afa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d007      	beq.n	8002b18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b20:	d14f      	bne.n	8002bc2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_SPI_Transmit+0xf6>
 8002b2a:	8afb      	ldrh	r3, [r7, #22]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d142      	bne.n	8002bb6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	881a      	ldrh	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	1c9a      	adds	r2, r3, #2
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b54:	e02f      	b.n	8002bb6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d112      	bne.n	8002b8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b88:	e015      	b.n	8002bb6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b8a:	f7fe fe3f 	bl	800180c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d803      	bhi.n	8002ba2 <HAL_SPI_Transmit+0x168>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba0:	d102      	bne.n	8002ba8 <HAL_SPI_Transmit+0x16e>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002bb4:	e07b      	b.n	8002cae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ca      	bne.n	8002b56 <HAL_SPI_Transmit+0x11c>
 8002bc0:	e050      	b.n	8002c64 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_SPI_Transmit+0x196>
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d144      	bne.n	8002c5a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	7812      	ldrb	r2, [r2, #0]
 8002bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bf6:	e030      	b.n	8002c5a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d113      	bne.n	8002c2e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c2c:	e015      	b.n	8002c5a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c2e:	f7fe fded 	bl	800180c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d803      	bhi.n	8002c46 <HAL_SPI_Transmit+0x20c>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_Transmit+0x212>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c58:	e029      	b.n	8002cae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1c9      	bne.n	8002bf8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f8b1 	bl	8002dd0 <SPI_EndRxTxTransaction>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e003      	b.n	8002cae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cd0:	f7fe fd9c 	bl	800180c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ce0:	f7fe fd94 	bl	800180c <HAL_GetTick>
 8002ce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	015b      	lsls	r3, r3, #5
 8002cec:	0d1b      	lsrs	r3, r3, #20
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cf6:	e054      	b.n	8002da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfe:	d050      	beq.n	8002da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d00:	f7fe fd84 	bl	800180c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d902      	bls.n	8002d16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d13d      	bne.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d2e:	d111      	bne.n	8002d54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d38:	d004      	beq.n	8002d44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d107      	bne.n	8002d54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5c:	d10f      	bne.n	8002d7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e017      	b.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4013      	ands	r3, r2
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d19b      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000004c 	.word	0x2000004c

08002dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <SPI_EndRxTxTransaction+0x7c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <SPI_EndRxTxTransaction+0x80>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0d5b      	lsrs	r3, r3, #21
 8002de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfa:	d112      	bne.n	8002e22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff ff5a 	bl	8002cc0 <SPI_WaitFlagStateUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e00f      	b.n	8002e42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d0f2      	beq.n	8002e22 <SPI_EndRxTxTransaction+0x52>
 8002e3c:	e000      	b.n	8002e40 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e3e:	bf00      	nop
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000004c 	.word	0x2000004c
 8002e50:	165e9f81 	.word	0x165e9f81

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e031      	b.n	8002eca <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe f9ba 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 f9ee 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d122      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d11b      	bne.n	8002f2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0202 	mvn.w	r2, #2
 8002efe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f991 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002f1a:	e005      	b.n	8002f28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f984 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f993 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d122      	bne.n	8002f82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d11b      	bne.n	8002f82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f06f 0204 	mvn.w	r2, #4
 8002f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f967 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002f6e:	e005      	b.n	8002f7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f95a 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f969 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d122      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11b      	bne.n	8002fd6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f06f 0208 	mvn.w	r2, #8
 8002fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f93d 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8002fc2:	e005      	b.n	8002fd0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f930 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f93f 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d122      	bne.n	800302a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d11b      	bne.n	800302a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f06f 0210 	mvn.w	r2, #16
 8002ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2208      	movs	r2, #8
 8003000:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f913 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8003016:	e005      	b.n	8003024 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f906 	bl	800322a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f915 	bl	800324e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10e      	bne.n	8003056 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f06f 0201 	mvn.w	r2, #1
 800304e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8e1 	bl	8003218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d10e      	bne.n	8003082 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d107      	bne.n	8003082 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800307a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f8ef 	bl	8003260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_ConfigClockSource+0x1c>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0b4      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x186>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030de:	d03e      	beq.n	800315e <HAL_TIM_ConfigClockSource+0xd4>
 80030e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e4:	f200 8087 	bhi.w	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	f000 8086 	beq.w	80031fc <HAL_TIM_ConfigClockSource+0x172>
 80030f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f4:	d87f      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 80030f6:	2b70      	cmp	r3, #112	; 0x70
 80030f8:	d01a      	beq.n	8003130 <HAL_TIM_ConfigClockSource+0xa6>
 80030fa:	2b70      	cmp	r3, #112	; 0x70
 80030fc:	d87b      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 80030fe:	2b60      	cmp	r3, #96	; 0x60
 8003100:	d050      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x11a>
 8003102:	2b60      	cmp	r3, #96	; 0x60
 8003104:	d877      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 8003106:	2b50      	cmp	r3, #80	; 0x50
 8003108:	d03c      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0xfa>
 800310a:	2b50      	cmp	r3, #80	; 0x50
 800310c:	d873      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d058      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0x13a>
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d86f      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 8003116:	2b30      	cmp	r3, #48	; 0x30
 8003118:	d064      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0x15a>
 800311a:	2b30      	cmp	r3, #48	; 0x30
 800311c:	d86b      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 800311e:	2b20      	cmp	r3, #32
 8003120:	d060      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0x15a>
 8003122:	2b20      	cmp	r3, #32
 8003124:	d867      	bhi.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d05c      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0x15a>
 800312a:	2b10      	cmp	r3, #16
 800312c:	d05a      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0x15a>
 800312e:	e062      	b.n	80031f6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003140:	f000 f97f 	bl	8003442 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003152:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
      break;
 800315c:	e04f      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800316e:	f000 f968 	bl	8003442 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003180:	609a      	str	r2, [r3, #8]
      break;
 8003182:	e03c      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003190:	461a      	mov	r2, r3
 8003192:	f000 f8df 	bl	8003354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2150      	movs	r1, #80	; 0x50
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f936 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031a2:	e02c      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b0:	461a      	mov	r2, r3
 80031b2:	f000 f8fd 	bl	80033b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2160      	movs	r1, #96	; 0x60
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f926 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031c2:	e01c      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d0:	461a      	mov	r2, r3
 80031d2:	f000 f8bf 	bl	8003354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f916 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031e2:	e00c      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 f90d 	bl	800340e <TIM_ITRx_SetConfig>
      break;
 80031f4:	e003      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      break;
 80031fa:	e000      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a2b      	ldr	r2, [pc, #172]	; (800333c <TIM_Base_SetConfig+0xc8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <TIM_Base_SetConfig+0xcc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a29      	ldr	r2, [pc, #164]	; (8003344 <TIM_Base_SetConfig+0xd0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x38>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d017      	beq.n	80032f6 <TIM_Base_SetConfig+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1c      	ldr	r2, [pc, #112]	; (800333c <TIM_Base_SetConfig+0xc8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <TIM_Base_SetConfig+0x82>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <TIM_Base_SetConfig+0xcc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00f      	beq.n	80032f6 <TIM_Base_SetConfig+0x82>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <TIM_Base_SetConfig+0xd0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_Base_SetConfig+0x82>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <TIM_Base_SetConfig+0x82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <TIM_Base_SetConfig+0xd8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_Base_SetConfig+0x82>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a17      	ldr	r2, [pc, #92]	; (8003350 <TIM_Base_SetConfig+0xdc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d108      	bne.n	8003308 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	615a      	str	r2, [r3, #20]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40010800 	.word	0x40010800
 800334c:	40010c00 	.word	0x40010c00
 8003350:	40011000 	.word	0x40011000

08003354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 030a 	bic.w	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0210 	bic.w	r2, r3, #16
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	031b      	lsls	r3, r3, #12
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	f043 0307 	orr.w	r3, r3, #7
 8003430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003442:	b480      	push	{r7}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800345c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	021a      	lsls	r2, r3, #8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	431a      	orrs	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4313      	orrs	r3, r2
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	609a      	str	r2, [r3, #8]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003494:	2302      	movs	r3, #2
 8003496:	e046      	b.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034da:	d00e      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10c      	bne.n	8003514 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40010800 	.word	0x40010800

0800353c <srand>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <srand+0x44>)
 8003540:	4604      	mov	r4, r0
 8003542:	681d      	ldr	r5, [r3, #0]
 8003544:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003546:	b9b3      	cbnz	r3, 8003576 <srand+0x3a>
 8003548:	2018      	movs	r0, #24
 800354a:	f000 f979 	bl	8003840 <malloc>
 800354e:	4602      	mov	r2, r0
 8003550:	6328      	str	r0, [r5, #48]	; 0x30
 8003552:	b920      	cbnz	r0, 800355e <srand+0x22>
 8003554:	2146      	movs	r1, #70	; 0x46
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <srand+0x48>)
 8003558:	480b      	ldr	r0, [pc, #44]	; (8003588 <srand+0x4c>)
 800355a:	f000 f953 	bl	8003804 <__assert_func>
 800355e:	490b      	ldr	r1, [pc, #44]	; (800358c <srand+0x50>)
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <srand+0x54>)
 8003562:	e9c0 1300 	strd	r1, r3, [r0]
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <srand+0x58>)
 8003568:	2100      	movs	r1, #0
 800356a:	6083      	str	r3, [r0, #8]
 800356c:	230b      	movs	r3, #11
 800356e:	8183      	strh	r3, [r0, #12]
 8003570:	2001      	movs	r0, #1
 8003572:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003576:	2200      	movs	r2, #0
 8003578:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800357a:	611c      	str	r4, [r3, #16]
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	200000b8 	.word	0x200000b8
 8003584:	080045b8 	.word	0x080045b8
 8003588:	080045cf 	.word	0x080045cf
 800358c:	abcd330e 	.word	0xabcd330e
 8003590:	e66d1234 	.word	0xe66d1234
 8003594:	0005deec 	.word	0x0005deec

08003598 <rand>:
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <rand+0x5c>)
 800359a:	b510      	push	{r4, lr}
 800359c:	681c      	ldr	r4, [r3, #0]
 800359e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035a0:	b9b3      	cbnz	r3, 80035d0 <rand+0x38>
 80035a2:	2018      	movs	r0, #24
 80035a4:	f000 f94c 	bl	8003840 <malloc>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6320      	str	r0, [r4, #48]	; 0x30
 80035ac:	b920      	cbnz	r0, 80035b8 <rand+0x20>
 80035ae:	2152      	movs	r1, #82	; 0x52
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <rand+0x60>)
 80035b2:	4812      	ldr	r0, [pc, #72]	; (80035fc <rand+0x64>)
 80035b4:	f000 f926 	bl	8003804 <__assert_func>
 80035b8:	4911      	ldr	r1, [pc, #68]	; (8003600 <rand+0x68>)
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <rand+0x6c>)
 80035bc:	e9c0 1300 	strd	r1, r3, [r0]
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <rand+0x70>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	6083      	str	r3, [r0, #8]
 80035c6:	230b      	movs	r3, #11
 80035c8:	8183      	strh	r3, [r0, #12]
 80035ca:	2001      	movs	r0, #1
 80035cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80035d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035d2:	480e      	ldr	r0, [pc, #56]	; (800360c <rand+0x74>)
 80035d4:	690b      	ldr	r3, [r1, #16]
 80035d6:	694c      	ldr	r4, [r1, #20]
 80035d8:	4358      	muls	r0, r3
 80035da:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <rand+0x78>)
 80035dc:	fb02 0004 	mla	r0, r2, r4, r0
 80035e0:	fba3 3202 	umull	r3, r2, r3, r2
 80035e4:	3301      	adds	r3, #1
 80035e6:	eb40 0002 	adc.w	r0, r0, r2
 80035ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80035ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	200000b8 	.word	0x200000b8
 80035f8:	080045b8 	.word	0x080045b8
 80035fc:	080045cf 	.word	0x080045cf
 8003600:	abcd330e 	.word	0xabcd330e
 8003604:	e66d1234 	.word	0xe66d1234
 8003608:	0005deec 	.word	0x0005deec
 800360c:	5851f42d 	.word	0x5851f42d
 8003610:	4c957f2d 	.word	0x4c957f2d

08003614 <std>:
 8003614:	2300      	movs	r3, #0
 8003616:	b510      	push	{r4, lr}
 8003618:	4604      	mov	r4, r0
 800361a:	e9c0 3300 	strd	r3, r3, [r0]
 800361e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003622:	6083      	str	r3, [r0, #8]
 8003624:	8181      	strh	r1, [r0, #12]
 8003626:	6643      	str	r3, [r0, #100]	; 0x64
 8003628:	81c2      	strh	r2, [r0, #14]
 800362a:	6183      	str	r3, [r0, #24]
 800362c:	4619      	mov	r1, r3
 800362e:	2208      	movs	r2, #8
 8003630:	305c      	adds	r0, #92	; 0x5c
 8003632:	f000 f8b1 	bl	8003798 <memset>
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <std+0x58>)
 8003638:	6224      	str	r4, [r4, #32]
 800363a:	6263      	str	r3, [r4, #36]	; 0x24
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <std+0x5c>)
 800363e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <std+0x60>)
 8003642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <std+0x64>)
 8003646:	6323      	str	r3, [r4, #48]	; 0x30
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <std+0x68>)
 800364a:	429c      	cmp	r4, r3
 800364c:	d006      	beq.n	800365c <std+0x48>
 800364e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003652:	4294      	cmp	r4, r2
 8003654:	d002      	beq.n	800365c <std+0x48>
 8003656:	33d0      	adds	r3, #208	; 0xd0
 8003658:	429c      	cmp	r4, r3
 800365a:	d105      	bne.n	8003668 <std+0x54>
 800365c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003664:	f000 b8ca 	b.w	80037fc <__retarget_lock_init_recursive>
 8003668:	bd10      	pop	{r4, pc}
 800366a:	bf00      	nop
 800366c:	08003afd 	.word	0x08003afd
 8003670:	08003b1f 	.word	0x08003b1f
 8003674:	08003b57 	.word	0x08003b57
 8003678:	08003b7b 	.word	0x08003b7b
 800367c:	2000018c 	.word	0x2000018c

08003680 <stdio_exit_handler>:
 8003680:	4a02      	ldr	r2, [pc, #8]	; (800368c <stdio_exit_handler+0xc>)
 8003682:	4903      	ldr	r1, [pc, #12]	; (8003690 <stdio_exit_handler+0x10>)
 8003684:	4803      	ldr	r0, [pc, #12]	; (8003694 <stdio_exit_handler+0x14>)
 8003686:	f000 b869 	b.w	800375c <_fwalk_sglue>
 800368a:	bf00      	nop
 800368c:	20000060 	.word	0x20000060
 8003690:	08003a95 	.word	0x08003a95
 8003694:	2000006c 	.word	0x2000006c

08003698 <cleanup_stdio>:
 8003698:	6841      	ldr	r1, [r0, #4]
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <cleanup_stdio+0x34>)
 800369c:	b510      	push	{r4, lr}
 800369e:	4299      	cmp	r1, r3
 80036a0:	4604      	mov	r4, r0
 80036a2:	d001      	beq.n	80036a8 <cleanup_stdio+0x10>
 80036a4:	f000 f9f6 	bl	8003a94 <_fflush_r>
 80036a8:	68a1      	ldr	r1, [r4, #8]
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <cleanup_stdio+0x38>)
 80036ac:	4299      	cmp	r1, r3
 80036ae:	d002      	beq.n	80036b6 <cleanup_stdio+0x1e>
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 f9ef 	bl	8003a94 <_fflush_r>
 80036b6:	68e1      	ldr	r1, [r4, #12]
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <cleanup_stdio+0x3c>)
 80036ba:	4299      	cmp	r1, r3
 80036bc:	d004      	beq.n	80036c8 <cleanup_stdio+0x30>
 80036be:	4620      	mov	r0, r4
 80036c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c4:	f000 b9e6 	b.w	8003a94 <_fflush_r>
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	bf00      	nop
 80036cc:	2000018c 	.word	0x2000018c
 80036d0:	200001f4 	.word	0x200001f4
 80036d4:	2000025c 	.word	0x2000025c

080036d8 <global_stdio_init.part.0>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <global_stdio_init.part.0+0x30>)
 80036dc:	4c0b      	ldr	r4, [pc, #44]	; (800370c <global_stdio_init.part.0+0x34>)
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <global_stdio_init.part.0+0x38>)
 80036e0:	4620      	mov	r0, r4
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	2104      	movs	r1, #4
 80036e6:	2200      	movs	r2, #0
 80036e8:	f7ff ff94 	bl	8003614 <std>
 80036ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036f0:	2201      	movs	r2, #1
 80036f2:	2109      	movs	r1, #9
 80036f4:	f7ff ff8e 	bl	8003614 <std>
 80036f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80036fc:	2202      	movs	r2, #2
 80036fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003702:	2112      	movs	r1, #18
 8003704:	f7ff bf86 	b.w	8003614 <std>
 8003708:	200002c4 	.word	0x200002c4
 800370c:	2000018c 	.word	0x2000018c
 8003710:	08003681 	.word	0x08003681

08003714 <__sfp_lock_acquire>:
 8003714:	4801      	ldr	r0, [pc, #4]	; (800371c <__sfp_lock_acquire+0x8>)
 8003716:	f000 b872 	b.w	80037fe <__retarget_lock_acquire_recursive>
 800371a:	bf00      	nop
 800371c:	200002c9 	.word	0x200002c9

08003720 <__sfp_lock_release>:
 8003720:	4801      	ldr	r0, [pc, #4]	; (8003728 <__sfp_lock_release+0x8>)
 8003722:	f000 b86d 	b.w	8003800 <__retarget_lock_release_recursive>
 8003726:	bf00      	nop
 8003728:	200002c9 	.word	0x200002c9

0800372c <__sinit>:
 800372c:	b510      	push	{r4, lr}
 800372e:	4604      	mov	r4, r0
 8003730:	f7ff fff0 	bl	8003714 <__sfp_lock_acquire>
 8003734:	6a23      	ldr	r3, [r4, #32]
 8003736:	b11b      	cbz	r3, 8003740 <__sinit+0x14>
 8003738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800373c:	f7ff bff0 	b.w	8003720 <__sfp_lock_release>
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <__sinit+0x28>)
 8003742:	6223      	str	r3, [r4, #32]
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <__sinit+0x2c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f5      	bne.n	8003738 <__sinit+0xc>
 800374c:	f7ff ffc4 	bl	80036d8 <global_stdio_init.part.0>
 8003750:	e7f2      	b.n	8003738 <__sinit+0xc>
 8003752:	bf00      	nop
 8003754:	08003699 	.word	0x08003699
 8003758:	200002c4 	.word	0x200002c4

0800375c <_fwalk_sglue>:
 800375c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003760:	4607      	mov	r7, r0
 8003762:	4688      	mov	r8, r1
 8003764:	4614      	mov	r4, r2
 8003766:	2600      	movs	r6, #0
 8003768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800376c:	f1b9 0901 	subs.w	r9, r9, #1
 8003770:	d505      	bpl.n	800377e <_fwalk_sglue+0x22>
 8003772:	6824      	ldr	r4, [r4, #0]
 8003774:	2c00      	cmp	r4, #0
 8003776:	d1f7      	bne.n	8003768 <_fwalk_sglue+0xc>
 8003778:	4630      	mov	r0, r6
 800377a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800377e:	89ab      	ldrh	r3, [r5, #12]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d907      	bls.n	8003794 <_fwalk_sglue+0x38>
 8003784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003788:	3301      	adds	r3, #1
 800378a:	d003      	beq.n	8003794 <_fwalk_sglue+0x38>
 800378c:	4629      	mov	r1, r5
 800378e:	4638      	mov	r0, r7
 8003790:	47c0      	blx	r8
 8003792:	4306      	orrs	r6, r0
 8003794:	3568      	adds	r5, #104	; 0x68
 8003796:	e7e9      	b.n	800376c <_fwalk_sglue+0x10>

08003798 <memset>:
 8003798:	4603      	mov	r3, r0
 800379a:	4402      	add	r2, r0
 800379c:	4293      	cmp	r3, r2
 800379e:	d100      	bne.n	80037a2 <memset+0xa>
 80037a0:	4770      	bx	lr
 80037a2:	f803 1b01 	strb.w	r1, [r3], #1
 80037a6:	e7f9      	b.n	800379c <memset+0x4>

080037a8 <__errno>:
 80037a8:	4b01      	ldr	r3, [pc, #4]	; (80037b0 <__errno+0x8>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	200000b8 	.word	0x200000b8

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2600      	movs	r6, #0
 80037b8:	4d0c      	ldr	r5, [pc, #48]	; (80037ec <__libc_init_array+0x38>)
 80037ba:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	f000 fed8 	bl	8004578 <_init>
 80037c8:	2600      	movs	r6, #0
 80037ca:	4d0a      	ldr	r5, [pc, #40]	; (80037f4 <__libc_init_array+0x40>)
 80037cc:	4c0a      	ldr	r4, [pc, #40]	; (80037f8 <__libc_init_array+0x44>)
 80037ce:	1b64      	subs	r4, r4, r5
 80037d0:	10a4      	asrs	r4, r4, #2
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	080046a0 	.word	0x080046a0
 80037f0:	080046a0 	.word	0x080046a0
 80037f4:	080046a0 	.word	0x080046a0
 80037f8:	080046a4 	.word	0x080046a4

080037fc <__retarget_lock_init_recursive>:
 80037fc:	4770      	bx	lr

080037fe <__retarget_lock_acquire_recursive>:
 80037fe:	4770      	bx	lr

08003800 <__retarget_lock_release_recursive>:
 8003800:	4770      	bx	lr
	...

08003804 <__assert_func>:
 8003804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003806:	4614      	mov	r4, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <__assert_func+0x2c>)
 800380c:	4605      	mov	r5, r0
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68d8      	ldr	r0, [r3, #12]
 8003812:	b14c      	cbz	r4, 8003828 <__assert_func+0x24>
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <__assert_func+0x30>)
 8003816:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800381a:	9100      	str	r1, [sp, #0]
 800381c:	462b      	mov	r3, r5
 800381e:	4906      	ldr	r1, [pc, #24]	; (8003838 <__assert_func+0x34>)
 8003820:	f000 f9b0 	bl	8003b84 <fiprintf>
 8003824:	f000 fa16 	bl	8003c54 <abort>
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <__assert_func+0x38>)
 800382a:	461c      	mov	r4, r3
 800382c:	e7f3      	b.n	8003816 <__assert_func+0x12>
 800382e:	bf00      	nop
 8003830:	200000b8 	.word	0x200000b8
 8003834:	08004627 	.word	0x08004627
 8003838:	08004634 	.word	0x08004634
 800383c:	08004662 	.word	0x08004662

08003840 <malloc>:
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <malloc+0xc>)
 8003842:	4601      	mov	r1, r0
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	f000 b823 	b.w	8003890 <_malloc_r>
 800384a:	bf00      	nop
 800384c:	200000b8 	.word	0x200000b8

08003850 <sbrk_aligned>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	4e0e      	ldr	r6, [pc, #56]	; (800388c <sbrk_aligned+0x3c>)
 8003854:	460c      	mov	r4, r1
 8003856:	6831      	ldr	r1, [r6, #0]
 8003858:	4605      	mov	r5, r0
 800385a:	b911      	cbnz	r1, 8003862 <sbrk_aligned+0x12>
 800385c:	f000 f9d8 	bl	8003c10 <_sbrk_r>
 8003860:	6030      	str	r0, [r6, #0]
 8003862:	4621      	mov	r1, r4
 8003864:	4628      	mov	r0, r5
 8003866:	f000 f9d3 	bl	8003c10 <_sbrk_r>
 800386a:	1c43      	adds	r3, r0, #1
 800386c:	d00a      	beq.n	8003884 <sbrk_aligned+0x34>
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	f024 0403 	bic.w	r4, r4, #3
 8003874:	42a0      	cmp	r0, r4
 8003876:	d007      	beq.n	8003888 <sbrk_aligned+0x38>
 8003878:	1a21      	subs	r1, r4, r0
 800387a:	4628      	mov	r0, r5
 800387c:	f000 f9c8 	bl	8003c10 <_sbrk_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d101      	bne.n	8003888 <sbrk_aligned+0x38>
 8003884:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003888:	4620      	mov	r0, r4
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	200002d0 	.word	0x200002d0

08003890 <_malloc_r>:
 8003890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003894:	1ccd      	adds	r5, r1, #3
 8003896:	f025 0503 	bic.w	r5, r5, #3
 800389a:	3508      	adds	r5, #8
 800389c:	2d0c      	cmp	r5, #12
 800389e:	bf38      	it	cc
 80038a0:	250c      	movcc	r5, #12
 80038a2:	2d00      	cmp	r5, #0
 80038a4:	4607      	mov	r7, r0
 80038a6:	db01      	blt.n	80038ac <_malloc_r+0x1c>
 80038a8:	42a9      	cmp	r1, r5
 80038aa:	d905      	bls.n	80038b8 <_malloc_r+0x28>
 80038ac:	230c      	movs	r3, #12
 80038ae:	2600      	movs	r6, #0
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4630      	mov	r0, r6
 80038b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800398c <_malloc_r+0xfc>
 80038bc:	f000 f912 	bl	8003ae4 <__malloc_lock>
 80038c0:	f8d8 3000 	ldr.w	r3, [r8]
 80038c4:	461c      	mov	r4, r3
 80038c6:	bb5c      	cbnz	r4, 8003920 <_malloc_r+0x90>
 80038c8:	4629      	mov	r1, r5
 80038ca:	4638      	mov	r0, r7
 80038cc:	f7ff ffc0 	bl	8003850 <sbrk_aligned>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	4604      	mov	r4, r0
 80038d4:	d155      	bne.n	8003982 <_malloc_r+0xf2>
 80038d6:	f8d8 4000 	ldr.w	r4, [r8]
 80038da:	4626      	mov	r6, r4
 80038dc:	2e00      	cmp	r6, #0
 80038de:	d145      	bne.n	800396c <_malloc_r+0xdc>
 80038e0:	2c00      	cmp	r4, #0
 80038e2:	d048      	beq.n	8003976 <_malloc_r+0xe6>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	4631      	mov	r1, r6
 80038e8:	4638      	mov	r0, r7
 80038ea:	eb04 0903 	add.w	r9, r4, r3
 80038ee:	f000 f98f 	bl	8003c10 <_sbrk_r>
 80038f2:	4581      	cmp	r9, r0
 80038f4:	d13f      	bne.n	8003976 <_malloc_r+0xe6>
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	4638      	mov	r0, r7
 80038fa:	1a6d      	subs	r5, r5, r1
 80038fc:	4629      	mov	r1, r5
 80038fe:	f7ff ffa7 	bl	8003850 <sbrk_aligned>
 8003902:	3001      	adds	r0, #1
 8003904:	d037      	beq.n	8003976 <_malloc_r+0xe6>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	442b      	add	r3, r5
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	f8d8 3000 	ldr.w	r3, [r8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d038      	beq.n	8003986 <_malloc_r+0xf6>
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	42a2      	cmp	r2, r4
 8003918:	d12b      	bne.n	8003972 <_malloc_r+0xe2>
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	e00f      	b.n	8003940 <_malloc_r+0xb0>
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	1b52      	subs	r2, r2, r5
 8003924:	d41f      	bmi.n	8003966 <_malloc_r+0xd6>
 8003926:	2a0b      	cmp	r2, #11
 8003928:	d917      	bls.n	800395a <_malloc_r+0xca>
 800392a:	1961      	adds	r1, r4, r5
 800392c:	42a3      	cmp	r3, r4
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	bf18      	it	ne
 8003932:	6059      	strne	r1, [r3, #4]
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	bf08      	it	eq
 8003938:	f8c8 1000 	streq.w	r1, [r8]
 800393c:	5162      	str	r2, [r4, r5]
 800393e:	604b      	str	r3, [r1, #4]
 8003940:	4638      	mov	r0, r7
 8003942:	f104 060b 	add.w	r6, r4, #11
 8003946:	f000 f8d3 	bl	8003af0 <__malloc_unlock>
 800394a:	f026 0607 	bic.w	r6, r6, #7
 800394e:	1d23      	adds	r3, r4, #4
 8003950:	1af2      	subs	r2, r6, r3
 8003952:	d0ae      	beq.n	80038b2 <_malloc_r+0x22>
 8003954:	1b9b      	subs	r3, r3, r6
 8003956:	50a3      	str	r3, [r4, r2]
 8003958:	e7ab      	b.n	80038b2 <_malloc_r+0x22>
 800395a:	42a3      	cmp	r3, r4
 800395c:	6862      	ldr	r2, [r4, #4]
 800395e:	d1dd      	bne.n	800391c <_malloc_r+0x8c>
 8003960:	f8c8 2000 	str.w	r2, [r8]
 8003964:	e7ec      	b.n	8003940 <_malloc_r+0xb0>
 8003966:	4623      	mov	r3, r4
 8003968:	6864      	ldr	r4, [r4, #4]
 800396a:	e7ac      	b.n	80038c6 <_malloc_r+0x36>
 800396c:	4634      	mov	r4, r6
 800396e:	6876      	ldr	r6, [r6, #4]
 8003970:	e7b4      	b.n	80038dc <_malloc_r+0x4c>
 8003972:	4613      	mov	r3, r2
 8003974:	e7cc      	b.n	8003910 <_malloc_r+0x80>
 8003976:	230c      	movs	r3, #12
 8003978:	4638      	mov	r0, r7
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	f000 f8b8 	bl	8003af0 <__malloc_unlock>
 8003980:	e797      	b.n	80038b2 <_malloc_r+0x22>
 8003982:	6025      	str	r5, [r4, #0]
 8003984:	e7dc      	b.n	8003940 <_malloc_r+0xb0>
 8003986:	605b      	str	r3, [r3, #4]
 8003988:	deff      	udf	#255	; 0xff
 800398a:	bf00      	nop
 800398c:	200002cc 	.word	0x200002cc

08003990 <__sflush_r>:
 8003990:	898a      	ldrh	r2, [r1, #12]
 8003992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003994:	4605      	mov	r5, r0
 8003996:	0710      	lsls	r0, r2, #28
 8003998:	460c      	mov	r4, r1
 800399a:	d457      	bmi.n	8003a4c <__sflush_r+0xbc>
 800399c:	684b      	ldr	r3, [r1, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	dc04      	bgt.n	80039ac <__sflush_r+0x1c>
 80039a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	dc01      	bgt.n	80039ac <__sflush_r+0x1c>
 80039a8:	2000      	movs	r0, #0
 80039aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039ae:	2e00      	cmp	r6, #0
 80039b0:	d0fa      	beq.n	80039a8 <__sflush_r+0x18>
 80039b2:	2300      	movs	r3, #0
 80039b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039b8:	682f      	ldr	r7, [r5, #0]
 80039ba:	6a21      	ldr	r1, [r4, #32]
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	d032      	beq.n	8003a26 <__sflush_r+0x96>
 80039c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	075a      	lsls	r2, r3, #29
 80039c6:	d505      	bpl.n	80039d4 <__sflush_r+0x44>
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	1ac0      	subs	r0, r0, r3
 80039cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039ce:	b10b      	cbz	r3, 80039d4 <__sflush_r+0x44>
 80039d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039d2:	1ac0      	subs	r0, r0, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	4602      	mov	r2, r0
 80039d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039da:	4628      	mov	r0, r5
 80039dc:	6a21      	ldr	r1, [r4, #32]
 80039de:	47b0      	blx	r6
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	89a3      	ldrh	r3, [r4, #12]
 80039e4:	d106      	bne.n	80039f4 <__sflush_r+0x64>
 80039e6:	6829      	ldr	r1, [r5, #0]
 80039e8:	291d      	cmp	r1, #29
 80039ea:	d82b      	bhi.n	8003a44 <__sflush_r+0xb4>
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <__sflush_r+0x100>)
 80039ee:	410a      	asrs	r2, r1
 80039f0:	07d6      	lsls	r6, r2, #31
 80039f2:	d427      	bmi.n	8003a44 <__sflush_r+0xb4>
 80039f4:	2200      	movs	r2, #0
 80039f6:	6062      	str	r2, [r4, #4]
 80039f8:	6922      	ldr	r2, [r4, #16]
 80039fa:	04d9      	lsls	r1, r3, #19
 80039fc:	6022      	str	r2, [r4, #0]
 80039fe:	d504      	bpl.n	8003a0a <__sflush_r+0x7a>
 8003a00:	1c42      	adds	r2, r0, #1
 8003a02:	d101      	bne.n	8003a08 <__sflush_r+0x78>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	b903      	cbnz	r3, 8003a0a <__sflush_r+0x7a>
 8003a08:	6560      	str	r0, [r4, #84]	; 0x54
 8003a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a0c:	602f      	str	r7, [r5, #0]
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	d0ca      	beq.n	80039a8 <__sflush_r+0x18>
 8003a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a16:	4299      	cmp	r1, r3
 8003a18:	d002      	beq.n	8003a20 <__sflush_r+0x90>
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f922 	bl	8003c64 <_free_r>
 8003a20:	2000      	movs	r0, #0
 8003a22:	6360      	str	r0, [r4, #52]	; 0x34
 8003a24:	e7c1      	b.n	80039aa <__sflush_r+0x1a>
 8003a26:	2301      	movs	r3, #1
 8003a28:	4628      	mov	r0, r5
 8003a2a:	47b0      	blx	r6
 8003a2c:	1c41      	adds	r1, r0, #1
 8003a2e:	d1c8      	bne.n	80039c2 <__sflush_r+0x32>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0c5      	beq.n	80039c2 <__sflush_r+0x32>
 8003a36:	2b1d      	cmp	r3, #29
 8003a38:	d001      	beq.n	8003a3e <__sflush_r+0xae>
 8003a3a:	2b16      	cmp	r3, #22
 8003a3c:	d101      	bne.n	8003a42 <__sflush_r+0xb2>
 8003a3e:	602f      	str	r7, [r5, #0]
 8003a40:	e7b2      	b.n	80039a8 <__sflush_r+0x18>
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a48:	81a3      	strh	r3, [r4, #12]
 8003a4a:	e7ae      	b.n	80039aa <__sflush_r+0x1a>
 8003a4c:	690f      	ldr	r7, [r1, #16]
 8003a4e:	2f00      	cmp	r7, #0
 8003a50:	d0aa      	beq.n	80039a8 <__sflush_r+0x18>
 8003a52:	0793      	lsls	r3, r2, #30
 8003a54:	bf18      	it	ne
 8003a56:	2300      	movne	r3, #0
 8003a58:	680e      	ldr	r6, [r1, #0]
 8003a5a:	bf08      	it	eq
 8003a5c:	694b      	ldreq	r3, [r1, #20]
 8003a5e:	1bf6      	subs	r6, r6, r7
 8003a60:	600f      	str	r7, [r1, #0]
 8003a62:	608b      	str	r3, [r1, #8]
 8003a64:	2e00      	cmp	r6, #0
 8003a66:	dd9f      	ble.n	80039a8 <__sflush_r+0x18>
 8003a68:	4633      	mov	r3, r6
 8003a6a:	463a      	mov	r2, r7
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	6a21      	ldr	r1, [r4, #32]
 8003a70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003a74:	47e0      	blx	ip
 8003a76:	2800      	cmp	r0, #0
 8003a78:	dc06      	bgt.n	8003a88 <__sflush_r+0xf8>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	e790      	b.n	80039aa <__sflush_r+0x1a>
 8003a88:	4407      	add	r7, r0
 8003a8a:	1a36      	subs	r6, r6, r0
 8003a8c:	e7ea      	b.n	8003a64 <__sflush_r+0xd4>
 8003a8e:	bf00      	nop
 8003a90:	dfbffffe 	.word	0xdfbffffe

08003a94 <_fflush_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	690b      	ldr	r3, [r1, #16]
 8003a98:	4605      	mov	r5, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	b913      	cbnz	r3, 8003aa4 <_fflush_r+0x10>
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	b118      	cbz	r0, 8003aae <_fflush_r+0x1a>
 8003aa6:	6a03      	ldr	r3, [r0, #32]
 8003aa8:	b90b      	cbnz	r3, 8003aae <_fflush_r+0x1a>
 8003aaa:	f7ff fe3f 	bl	800372c <__sinit>
 8003aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f3      	beq.n	8003a9e <_fflush_r+0xa>
 8003ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ab8:	07d0      	lsls	r0, r2, #31
 8003aba:	d404      	bmi.n	8003ac6 <_fflush_r+0x32>
 8003abc:	0599      	lsls	r1, r3, #22
 8003abe:	d402      	bmi.n	8003ac6 <_fflush_r+0x32>
 8003ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac2:	f7ff fe9c 	bl	80037fe <__retarget_lock_acquire_recursive>
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	4621      	mov	r1, r4
 8003aca:	f7ff ff61 	bl	8003990 <__sflush_r>
 8003ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	07da      	lsls	r2, r3, #31
 8003ad4:	d4e4      	bmi.n	8003aa0 <_fflush_r+0xc>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	059b      	lsls	r3, r3, #22
 8003ada:	d4e1      	bmi.n	8003aa0 <_fflush_r+0xc>
 8003adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ade:	f7ff fe8f 	bl	8003800 <__retarget_lock_release_recursive>
 8003ae2:	e7dd      	b.n	8003aa0 <_fflush_r+0xc>

08003ae4 <__malloc_lock>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <__malloc_lock+0x8>)
 8003ae6:	f7ff be8a 	b.w	80037fe <__retarget_lock_acquire_recursive>
 8003aea:	bf00      	nop
 8003aec:	200002c8 	.word	0x200002c8

08003af0 <__malloc_unlock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <__malloc_unlock+0x8>)
 8003af2:	f7ff be85 	b.w	8003800 <__retarget_lock_release_recursive>
 8003af6:	bf00      	nop
 8003af8:	200002c8 	.word	0x200002c8

08003afc <__sread>:
 8003afc:	b510      	push	{r4, lr}
 8003afe:	460c      	mov	r4, r1
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	f000 f872 	bl	8003bec <_read_r>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	bfab      	itete	ge
 8003b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b10:	181b      	addge	r3, r3, r0
 8003b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b16:	bfac      	ite	ge
 8003b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1a:	81a3      	strhlt	r3, [r4, #12]
 8003b1c:	bd10      	pop	{r4, pc}

08003b1e <__swrite>:
 8003b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b22:	461f      	mov	r7, r3
 8003b24:	898b      	ldrh	r3, [r1, #12]
 8003b26:	4605      	mov	r5, r0
 8003b28:	05db      	lsls	r3, r3, #23
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	d505      	bpl.n	8003b3c <__swrite+0x1e>
 8003b30:	2302      	movs	r3, #2
 8003b32:	2200      	movs	r2, #0
 8003b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b38:	f000 f846 	bl	8003bc8 <_lseek_r>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	4632      	mov	r2, r6
 8003b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	4628      	mov	r0, r5
 8003b48:	463b      	mov	r3, r7
 8003b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	f000 b86d 	b.w	8003c30 <_write_r>

08003b56 <__sseek>:
 8003b56:	b510      	push	{r4, lr}
 8003b58:	460c      	mov	r4, r1
 8003b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5e:	f000 f833 	bl	8003bc8 <_lseek_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	bf15      	itete	ne
 8003b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b72:	81a3      	strheq	r3, [r4, #12]
 8003b74:	bf18      	it	ne
 8003b76:	81a3      	strhne	r3, [r4, #12]
 8003b78:	bd10      	pop	{r4, pc}

08003b7a <__sclose>:
 8003b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7e:	f000 b813 	b.w	8003ba8 <_close_r>
	...

08003b84 <fiprintf>:
 8003b84:	b40e      	push	{r1, r2, r3}
 8003b86:	b503      	push	{r0, r1, lr}
 8003b88:	4601      	mov	r1, r0
 8003b8a:	ab03      	add	r3, sp, #12
 8003b8c:	4805      	ldr	r0, [pc, #20]	; (8003ba4 <fiprintf+0x20>)
 8003b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b92:	6800      	ldr	r0, [r0, #0]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	f000 f8d5 	bl	8003d44 <_vfiprintf_r>
 8003b9a:	b002      	add	sp, #8
 8003b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ba0:	b003      	add	sp, #12
 8003ba2:	4770      	bx	lr
 8003ba4:	200000b8 	.word	0x200000b8

08003ba8 <_close_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	2300      	movs	r3, #0
 8003bac:	4d05      	ldr	r5, [pc, #20]	; (8003bc4 <_close_r+0x1c>)
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f7fd fbe4 	bl	8001380 <_close>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_close_r+0x1a>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_close_r+0x1a>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	200002d4 	.word	0x200002d4

08003bc8 <_lseek_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4d05      	ldr	r5, [pc, #20]	; (8003be8 <_lseek_r+0x20>)
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fd fbf6 	bl	80013c8 <_lseek>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_lseek_r+0x1e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_lseek_r+0x1e>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	200002d4 	.word	0x200002d4

08003bec <_read_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4604      	mov	r4, r0
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4d05      	ldr	r5, [pc, #20]	; (8003c0c <_read_r+0x20>)
 8003bf8:	602a      	str	r2, [r5, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7fd fb87 	bl	800130e <_read>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_read_r+0x1e>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_read_r+0x1e>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	200002d4 	.word	0x200002d4

08003c10 <_sbrk_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	2300      	movs	r3, #0
 8003c14:	4d05      	ldr	r5, [pc, #20]	; (8003c2c <_sbrk_r+0x1c>)
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fd fbe0 	bl	80013e0 <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_sbrk_r+0x1a>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_sbrk_r+0x1a>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	200002d4 	.word	0x200002d4

08003c30 <_write_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4d05      	ldr	r5, [pc, #20]	; (8003c50 <_write_r+0x20>)
 8003c3c:	602a      	str	r2, [r5, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fd fb82 	bl	8001348 <_write>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_write_r+0x1e>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_write_r+0x1e>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	200002d4 	.word	0x200002d4

08003c54 <abort>:
 8003c54:	2006      	movs	r0, #6
 8003c56:	b508      	push	{r3, lr}
 8003c58:	f000 fc64 	bl	8004524 <raise>
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fd fb4c 	bl	80012fa <_exit>
	...

08003c64 <_free_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	4605      	mov	r5, r0
 8003c68:	2900      	cmp	r1, #0
 8003c6a:	d040      	beq.n	8003cee <_free_r+0x8a>
 8003c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c70:	1f0c      	subs	r4, r1, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bfb8      	it	lt
 8003c76:	18e4      	addlt	r4, r4, r3
 8003c78:	f7ff ff34 	bl	8003ae4 <__malloc_lock>
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <_free_r+0x8c>)
 8003c7e:	6813      	ldr	r3, [r2, #0]
 8003c80:	b933      	cbnz	r3, 8003c90 <_free_r+0x2c>
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	6014      	str	r4, [r2, #0]
 8003c86:	4628      	mov	r0, r5
 8003c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c8c:	f7ff bf30 	b.w	8003af0 <__malloc_unlock>
 8003c90:	42a3      	cmp	r3, r4
 8003c92:	d908      	bls.n	8003ca6 <_free_r+0x42>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	1821      	adds	r1, r4, r0
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	bf01      	itttt	eq
 8003c9c:	6819      	ldreq	r1, [r3, #0]
 8003c9e:	685b      	ldreq	r3, [r3, #4]
 8003ca0:	1809      	addeq	r1, r1, r0
 8003ca2:	6021      	streq	r1, [r4, #0]
 8003ca4:	e7ed      	b.n	8003c82 <_free_r+0x1e>
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	b10b      	cbz	r3, 8003cb0 <_free_r+0x4c>
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	d9fa      	bls.n	8003ca6 <_free_r+0x42>
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	1850      	adds	r0, r2, r1
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d10b      	bne.n	8003cd0 <_free_r+0x6c>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	4401      	add	r1, r0
 8003cbc:	1850      	adds	r0, r2, r1
 8003cbe:	4283      	cmp	r3, r0
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	d1e0      	bne.n	8003c86 <_free_r+0x22>
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4408      	add	r0, r1
 8003cca:	6010      	str	r0, [r2, #0]
 8003ccc:	6053      	str	r3, [r2, #4]
 8003cce:	e7da      	b.n	8003c86 <_free_r+0x22>
 8003cd0:	d902      	bls.n	8003cd8 <_free_r+0x74>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	e7d6      	b.n	8003c86 <_free_r+0x22>
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	1821      	adds	r1, r4, r0
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	bf01      	itttt	eq
 8003ce0:	6819      	ldreq	r1, [r3, #0]
 8003ce2:	685b      	ldreq	r3, [r3, #4]
 8003ce4:	1809      	addeq	r1, r1, r0
 8003ce6:	6021      	streq	r1, [r4, #0]
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	6054      	str	r4, [r2, #4]
 8003cec:	e7cb      	b.n	8003c86 <_free_r+0x22>
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	200002cc 	.word	0x200002cc

08003cf4 <__sfputc_r>:
 8003cf4:	6893      	ldr	r3, [r2, #8]
 8003cf6:	b410      	push	{r4}
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	6093      	str	r3, [r2, #8]
 8003cfe:	da07      	bge.n	8003d10 <__sfputc_r+0x1c>
 8003d00:	6994      	ldr	r4, [r2, #24]
 8003d02:	42a3      	cmp	r3, r4
 8003d04:	db01      	blt.n	8003d0a <__sfputc_r+0x16>
 8003d06:	290a      	cmp	r1, #10
 8003d08:	d102      	bne.n	8003d10 <__sfputc_r+0x1c>
 8003d0a:	bc10      	pop	{r4}
 8003d0c:	f000 bac8 	b.w	80042a0 <__swbuf_r>
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	1c58      	adds	r0, r3, #1
 8003d14:	6010      	str	r0, [r2, #0]
 8003d16:	7019      	strb	r1, [r3, #0]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	bc10      	pop	{r4}
 8003d1c:	4770      	bx	lr

08003d1e <__sfputs_r>:
 8003d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d20:	4606      	mov	r6, r0
 8003d22:	460f      	mov	r7, r1
 8003d24:	4614      	mov	r4, r2
 8003d26:	18d5      	adds	r5, r2, r3
 8003d28:	42ac      	cmp	r4, r5
 8003d2a:	d101      	bne.n	8003d30 <__sfputs_r+0x12>
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e007      	b.n	8003d40 <__sfputs_r+0x22>
 8003d30:	463a      	mov	r2, r7
 8003d32:	4630      	mov	r0, r6
 8003d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d38:	f7ff ffdc 	bl	8003cf4 <__sfputc_r>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d1f3      	bne.n	8003d28 <__sfputs_r+0xa>
 8003d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d44 <_vfiprintf_r>:
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	460d      	mov	r5, r1
 8003d4a:	4614      	mov	r4, r2
 8003d4c:	4698      	mov	r8, r3
 8003d4e:	4606      	mov	r6, r0
 8003d50:	b09d      	sub	sp, #116	; 0x74
 8003d52:	b118      	cbz	r0, 8003d5c <_vfiprintf_r+0x18>
 8003d54:	6a03      	ldr	r3, [r0, #32]
 8003d56:	b90b      	cbnz	r3, 8003d5c <_vfiprintf_r+0x18>
 8003d58:	f7ff fce8 	bl	800372c <__sinit>
 8003d5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d5e:	07d9      	lsls	r1, r3, #31
 8003d60:	d405      	bmi.n	8003d6e <_vfiprintf_r+0x2a>
 8003d62:	89ab      	ldrh	r3, [r5, #12]
 8003d64:	059a      	lsls	r2, r3, #22
 8003d66:	d402      	bmi.n	8003d6e <_vfiprintf_r+0x2a>
 8003d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d6a:	f7ff fd48 	bl	80037fe <__retarget_lock_acquire_recursive>
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	071b      	lsls	r3, r3, #28
 8003d72:	d501      	bpl.n	8003d78 <_vfiprintf_r+0x34>
 8003d74:	692b      	ldr	r3, [r5, #16]
 8003d76:	b99b      	cbnz	r3, 8003da0 <_vfiprintf_r+0x5c>
 8003d78:	4629      	mov	r1, r5
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f000 face 	bl	800431c <__swsetup_r>
 8003d80:	b170      	cbz	r0, 8003da0 <_vfiprintf_r+0x5c>
 8003d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d84:	07dc      	lsls	r4, r3, #31
 8003d86:	d504      	bpl.n	8003d92 <_vfiprintf_r+0x4e>
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d8c:	b01d      	add	sp, #116	; 0x74
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d92:	89ab      	ldrh	r3, [r5, #12]
 8003d94:	0598      	lsls	r0, r3, #22
 8003d96:	d4f7      	bmi.n	8003d88 <_vfiprintf_r+0x44>
 8003d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d9a:	f7ff fd31 	bl	8003800 <__retarget_lock_release_recursive>
 8003d9e:	e7f3      	b.n	8003d88 <_vfiprintf_r+0x44>
 8003da0:	2300      	movs	r3, #0
 8003da2:	9309      	str	r3, [sp, #36]	; 0x24
 8003da4:	2320      	movs	r3, #32
 8003da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003daa:	2330      	movs	r3, #48	; 0x30
 8003dac:	f04f 0901 	mov.w	r9, #1
 8003db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003db4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003f64 <_vfiprintf_r+0x220>
 8003db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	469a      	mov	sl, r3
 8003dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc4:	b10a      	cbz	r2, 8003dca <_vfiprintf_r+0x86>
 8003dc6:	2a25      	cmp	r2, #37	; 0x25
 8003dc8:	d1f9      	bne.n	8003dbe <_vfiprintf_r+0x7a>
 8003dca:	ebba 0b04 	subs.w	fp, sl, r4
 8003dce:	d00b      	beq.n	8003de8 <_vfiprintf_r+0xa4>
 8003dd0:	465b      	mov	r3, fp
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f7ff ffa1 	bl	8003d1e <__sfputs_r>
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f000 80a9 	beq.w	8003f34 <_vfiprintf_r+0x1f0>
 8003de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de4:	445a      	add	r2, fp
 8003de6:	9209      	str	r2, [sp, #36]	; 0x24
 8003de8:	f89a 3000 	ldrb.w	r3, [sl]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a1 	beq.w	8003f34 <_vfiprintf_r+0x1f0>
 8003df2:	2300      	movs	r3, #0
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dfc:	f10a 0a01 	add.w	sl, sl, #1
 8003e00:	9304      	str	r3, [sp, #16]
 8003e02:	9307      	str	r3, [sp, #28]
 8003e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e08:	931a      	str	r3, [sp, #104]	; 0x68
 8003e0a:	4654      	mov	r4, sl
 8003e0c:	2205      	movs	r2, #5
 8003e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e12:	4854      	ldr	r0, [pc, #336]	; (8003f64 <_vfiprintf_r+0x220>)
 8003e14:	f000 fba2 	bl	800455c <memchr>
 8003e18:	9a04      	ldr	r2, [sp, #16]
 8003e1a:	b9d8      	cbnz	r0, 8003e54 <_vfiprintf_r+0x110>
 8003e1c:	06d1      	lsls	r1, r2, #27
 8003e1e:	bf44      	itt	mi
 8003e20:	2320      	movmi	r3, #32
 8003e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e26:	0713      	lsls	r3, r2, #28
 8003e28:	bf44      	itt	mi
 8003e2a:	232b      	movmi	r3, #43	; 0x2b
 8003e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e30:	f89a 3000 	ldrb.w	r3, [sl]
 8003e34:	2b2a      	cmp	r3, #42	; 0x2a
 8003e36:	d015      	beq.n	8003e64 <_vfiprintf_r+0x120>
 8003e38:	4654      	mov	r4, sl
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f04f 0c0a 	mov.w	ip, #10
 8003e40:	9a07      	ldr	r2, [sp, #28]
 8003e42:	4621      	mov	r1, r4
 8003e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e48:	3b30      	subs	r3, #48	; 0x30
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d94d      	bls.n	8003eea <_vfiprintf_r+0x1a6>
 8003e4e:	b1b0      	cbz	r0, 8003e7e <_vfiprintf_r+0x13a>
 8003e50:	9207      	str	r2, [sp, #28]
 8003e52:	e014      	b.n	8003e7e <_vfiprintf_r+0x13a>
 8003e54:	eba0 0308 	sub.w	r3, r0, r8
 8003e58:	fa09 f303 	lsl.w	r3, r9, r3
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	46a2      	mov	sl, r4
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	e7d2      	b.n	8003e0a <_vfiprintf_r+0xc6>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	1d19      	adds	r1, r3, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	9103      	str	r1, [sp, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bfbb      	ittet	lt
 8003e70:	425b      	neglt	r3, r3
 8003e72:	f042 0202 	orrlt.w	r2, r2, #2
 8003e76:	9307      	strge	r3, [sp, #28]
 8003e78:	9307      	strlt	r3, [sp, #28]
 8003e7a:	bfb8      	it	lt
 8003e7c:	9204      	strlt	r2, [sp, #16]
 8003e7e:	7823      	ldrb	r3, [r4, #0]
 8003e80:	2b2e      	cmp	r3, #46	; 0x2e
 8003e82:	d10c      	bne.n	8003e9e <_vfiprintf_r+0x15a>
 8003e84:	7863      	ldrb	r3, [r4, #1]
 8003e86:	2b2a      	cmp	r3, #42	; 0x2a
 8003e88:	d134      	bne.n	8003ef4 <_vfiprintf_r+0x1b0>
 8003e8a:	9b03      	ldr	r3, [sp, #12]
 8003e8c:	3402      	adds	r4, #2
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	9203      	str	r2, [sp, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bfb8      	it	lt
 8003e98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e9c:	9305      	str	r3, [sp, #20]
 8003e9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f68 <_vfiprintf_r+0x224>
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	4650      	mov	r0, sl
 8003ea6:	7821      	ldrb	r1, [r4, #0]
 8003ea8:	f000 fb58 	bl	800455c <memchr>
 8003eac:	b138      	cbz	r0, 8003ebe <_vfiprintf_r+0x17a>
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	9b04      	ldr	r3, [sp, #16]
 8003eb2:	eba0 000a 	sub.w	r0, r0, sl
 8003eb6:	4082      	lsls	r2, r0
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	3401      	adds	r4, #1
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec2:	2206      	movs	r2, #6
 8003ec4:	4829      	ldr	r0, [pc, #164]	; (8003f6c <_vfiprintf_r+0x228>)
 8003ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eca:	f000 fb47 	bl	800455c <memchr>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d03f      	beq.n	8003f52 <_vfiprintf_r+0x20e>
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <_vfiprintf_r+0x22c>)
 8003ed4:	bb1b      	cbnz	r3, 8003f1e <_vfiprintf_r+0x1da>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	3307      	adds	r3, #7
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	3308      	adds	r3, #8
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee4:	443b      	add	r3, r7
 8003ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee8:	e768      	b.n	8003dbc <_vfiprintf_r+0x78>
 8003eea:	460c      	mov	r4, r1
 8003eec:	2001      	movs	r0, #1
 8003eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ef2:	e7a6      	b.n	8003e42 <_vfiprintf_r+0xfe>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f04f 0c0a 	mov.w	ip, #10
 8003efa:	4619      	mov	r1, r3
 8003efc:	3401      	adds	r4, #1
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f06:	3a30      	subs	r2, #48	; 0x30
 8003f08:	2a09      	cmp	r2, #9
 8003f0a:	d903      	bls.n	8003f14 <_vfiprintf_r+0x1d0>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0c6      	beq.n	8003e9e <_vfiprintf_r+0x15a>
 8003f10:	9105      	str	r1, [sp, #20]
 8003f12:	e7c4      	b.n	8003e9e <_vfiprintf_r+0x15a>
 8003f14:	4604      	mov	r4, r0
 8003f16:	2301      	movs	r3, #1
 8003f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f1c:	e7f0      	b.n	8003f00 <_vfiprintf_r+0x1bc>
 8003f1e:	ab03      	add	r3, sp, #12
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	462a      	mov	r2, r5
 8003f24:	4630      	mov	r0, r6
 8003f26:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <_vfiprintf_r+0x230>)
 8003f28:	a904      	add	r1, sp, #16
 8003f2a:	f3af 8000 	nop.w
 8003f2e:	4607      	mov	r7, r0
 8003f30:	1c78      	adds	r0, r7, #1
 8003f32:	d1d6      	bne.n	8003ee2 <_vfiprintf_r+0x19e>
 8003f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f36:	07d9      	lsls	r1, r3, #31
 8003f38:	d405      	bmi.n	8003f46 <_vfiprintf_r+0x202>
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	059a      	lsls	r2, r3, #22
 8003f3e:	d402      	bmi.n	8003f46 <_vfiprintf_r+0x202>
 8003f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f42:	f7ff fc5d 	bl	8003800 <__retarget_lock_release_recursive>
 8003f46:	89ab      	ldrh	r3, [r5, #12]
 8003f48:	065b      	lsls	r3, r3, #25
 8003f4a:	f53f af1d 	bmi.w	8003d88 <_vfiprintf_r+0x44>
 8003f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f50:	e71c      	b.n	8003d8c <_vfiprintf_r+0x48>
 8003f52:	ab03      	add	r3, sp, #12
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	462a      	mov	r2, r5
 8003f58:	4630      	mov	r0, r6
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <_vfiprintf_r+0x230>)
 8003f5c:	a904      	add	r1, sp, #16
 8003f5e:	f000 f87d 	bl	800405c <_printf_i>
 8003f62:	e7e4      	b.n	8003f2e <_vfiprintf_r+0x1ea>
 8003f64:	08004663 	.word	0x08004663
 8003f68:	08004669 	.word	0x08004669
 8003f6c:	0800466d 	.word	0x0800466d
 8003f70:	00000000 	.word	0x00000000
 8003f74:	08003d1f 	.word	0x08003d1f

08003f78 <_printf_common>:
 8003f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	4616      	mov	r6, r2
 8003f7e:	4699      	mov	r9, r3
 8003f80:	688a      	ldr	r2, [r1, #8]
 8003f82:	690b      	ldr	r3, [r1, #16]
 8003f84:	4607      	mov	r7, r0
 8003f86:	4293      	cmp	r3, r2
 8003f88:	bfb8      	it	lt
 8003f8a:	4613      	movlt	r3, r2
 8003f8c:	6033      	str	r3, [r6, #0]
 8003f8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f92:	460c      	mov	r4, r1
 8003f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f98:	b10a      	cbz	r2, 8003f9e <_printf_common+0x26>
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	6033      	str	r3, [r6, #0]
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	0699      	lsls	r1, r3, #26
 8003fa2:	bf42      	ittt	mi
 8003fa4:	6833      	ldrmi	r3, [r6, #0]
 8003fa6:	3302      	addmi	r3, #2
 8003fa8:	6033      	strmi	r3, [r6, #0]
 8003faa:	6825      	ldr	r5, [r4, #0]
 8003fac:	f015 0506 	ands.w	r5, r5, #6
 8003fb0:	d106      	bne.n	8003fc0 <_printf_common+0x48>
 8003fb2:	f104 0a19 	add.w	sl, r4, #25
 8003fb6:	68e3      	ldr	r3, [r4, #12]
 8003fb8:	6832      	ldr	r2, [r6, #0]
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	42ab      	cmp	r3, r5
 8003fbe:	dc2b      	bgt.n	8004018 <_printf_common+0xa0>
 8003fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fc4:	1e13      	subs	r3, r2, #0
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	bf18      	it	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	0692      	lsls	r2, r2, #26
 8003fce:	d430      	bmi.n	8004032 <_printf_common+0xba>
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fd8:	47c0      	blx	r8
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d023      	beq.n	8004026 <_printf_common+0xae>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	6922      	ldr	r2, [r4, #16]
 8003fe2:	f003 0306 	and.w	r3, r3, #6
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	bf14      	ite	ne
 8003fea:	2500      	movne	r5, #0
 8003fec:	6833      	ldreq	r3, [r6, #0]
 8003fee:	f04f 0600 	mov.w	r6, #0
 8003ff2:	bf08      	it	eq
 8003ff4:	68e5      	ldreq	r5, [r4, #12]
 8003ff6:	f104 041a 	add.w	r4, r4, #26
 8003ffa:	bf08      	it	eq
 8003ffc:	1aed      	subeq	r5, r5, r3
 8003ffe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004002:	bf08      	it	eq
 8004004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004008:	4293      	cmp	r3, r2
 800400a:	bfc4      	itt	gt
 800400c:	1a9b      	subgt	r3, r3, r2
 800400e:	18ed      	addgt	r5, r5, r3
 8004010:	42b5      	cmp	r5, r6
 8004012:	d11a      	bne.n	800404a <_printf_common+0xd2>
 8004014:	2000      	movs	r0, #0
 8004016:	e008      	b.n	800402a <_printf_common+0xb2>
 8004018:	2301      	movs	r3, #1
 800401a:	4652      	mov	r2, sl
 800401c:	4649      	mov	r1, r9
 800401e:	4638      	mov	r0, r7
 8004020:	47c0      	blx	r8
 8004022:	3001      	adds	r0, #1
 8004024:	d103      	bne.n	800402e <_printf_common+0xb6>
 8004026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800402e:	3501      	adds	r5, #1
 8004030:	e7c1      	b.n	8003fb6 <_printf_common+0x3e>
 8004032:	2030      	movs	r0, #48	; 0x30
 8004034:	18e1      	adds	r1, r4, r3
 8004036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004040:	4422      	add	r2, r4
 8004042:	3302      	adds	r3, #2
 8004044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004048:	e7c2      	b.n	8003fd0 <_printf_common+0x58>
 800404a:	2301      	movs	r3, #1
 800404c:	4622      	mov	r2, r4
 800404e:	4649      	mov	r1, r9
 8004050:	4638      	mov	r0, r7
 8004052:	47c0      	blx	r8
 8004054:	3001      	adds	r0, #1
 8004056:	d0e6      	beq.n	8004026 <_printf_common+0xae>
 8004058:	3601      	adds	r6, #1
 800405a:	e7d9      	b.n	8004010 <_printf_common+0x98>

0800405c <_printf_i>:
 800405c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	7e0f      	ldrb	r7, [r1, #24]
 8004062:	4691      	mov	r9, r2
 8004064:	2f78      	cmp	r7, #120	; 0x78
 8004066:	4680      	mov	r8, r0
 8004068:	460c      	mov	r4, r1
 800406a:	469a      	mov	sl, r3
 800406c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800406e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004072:	d807      	bhi.n	8004084 <_printf_i+0x28>
 8004074:	2f62      	cmp	r7, #98	; 0x62
 8004076:	d80a      	bhi.n	800408e <_printf_i+0x32>
 8004078:	2f00      	cmp	r7, #0
 800407a:	f000 80d5 	beq.w	8004228 <_printf_i+0x1cc>
 800407e:	2f58      	cmp	r7, #88	; 0x58
 8004080:	f000 80c1 	beq.w	8004206 <_printf_i+0x1aa>
 8004084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800408c:	e03a      	b.n	8004104 <_printf_i+0xa8>
 800408e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004092:	2b15      	cmp	r3, #21
 8004094:	d8f6      	bhi.n	8004084 <_printf_i+0x28>
 8004096:	a101      	add	r1, pc, #4	; (adr r1, 800409c <_printf_i+0x40>)
 8004098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	08004109 	.word	0x08004109
 80040a4:	08004085 	.word	0x08004085
 80040a8:	08004085 	.word	0x08004085
 80040ac:	08004085 	.word	0x08004085
 80040b0:	08004085 	.word	0x08004085
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004085 	.word	0x08004085
 80040bc:	08004085 	.word	0x08004085
 80040c0:	08004085 	.word	0x08004085
 80040c4:	08004085 	.word	0x08004085
 80040c8:	0800420f 	.word	0x0800420f
 80040cc:	08004135 	.word	0x08004135
 80040d0:	080041c9 	.word	0x080041c9
 80040d4:	08004085 	.word	0x08004085
 80040d8:	08004085 	.word	0x08004085
 80040dc:	08004231 	.word	0x08004231
 80040e0:	08004085 	.word	0x08004085
 80040e4:	08004135 	.word	0x08004135
 80040e8:	08004085 	.word	0x08004085
 80040ec:	08004085 	.word	0x08004085
 80040f0:	080041d1 	.word	0x080041d1
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	602a      	str	r2, [r5, #0]
 80040fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004104:	2301      	movs	r3, #1
 8004106:	e0a0      	b.n	800424a <_printf_i+0x1ee>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	0607      	lsls	r7, r0, #24
 800410e:	f103 0104 	add.w	r1, r3, #4
 8004112:	6029      	str	r1, [r5, #0]
 8004114:	d501      	bpl.n	800411a <_printf_i+0xbe>
 8004116:	681e      	ldr	r6, [r3, #0]
 8004118:	e003      	b.n	8004122 <_printf_i+0xc6>
 800411a:	0646      	lsls	r6, r0, #25
 800411c:	d5fb      	bpl.n	8004116 <_printf_i+0xba>
 800411e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004122:	2e00      	cmp	r6, #0
 8004124:	da03      	bge.n	800412e <_printf_i+0xd2>
 8004126:	232d      	movs	r3, #45	; 0x2d
 8004128:	4276      	negs	r6, r6
 800412a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412e:	230a      	movs	r3, #10
 8004130:	4859      	ldr	r0, [pc, #356]	; (8004298 <_printf_i+0x23c>)
 8004132:	e012      	b.n	800415a <_printf_i+0xfe>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	1d19      	adds	r1, r3, #4
 800413a:	6029      	str	r1, [r5, #0]
 800413c:	0605      	lsls	r5, r0, #24
 800413e:	d501      	bpl.n	8004144 <_printf_i+0xe8>
 8004140:	681e      	ldr	r6, [r3, #0]
 8004142:	e002      	b.n	800414a <_printf_i+0xee>
 8004144:	0641      	lsls	r1, r0, #25
 8004146:	d5fb      	bpl.n	8004140 <_printf_i+0xe4>
 8004148:	881e      	ldrh	r6, [r3, #0]
 800414a:	2f6f      	cmp	r7, #111	; 0x6f
 800414c:	bf0c      	ite	eq
 800414e:	2308      	moveq	r3, #8
 8004150:	230a      	movne	r3, #10
 8004152:	4851      	ldr	r0, [pc, #324]	; (8004298 <_printf_i+0x23c>)
 8004154:	2100      	movs	r1, #0
 8004156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800415a:	6865      	ldr	r5, [r4, #4]
 800415c:	2d00      	cmp	r5, #0
 800415e:	bfa8      	it	ge
 8004160:	6821      	ldrge	r1, [r4, #0]
 8004162:	60a5      	str	r5, [r4, #8]
 8004164:	bfa4      	itt	ge
 8004166:	f021 0104 	bicge.w	r1, r1, #4
 800416a:	6021      	strge	r1, [r4, #0]
 800416c:	b90e      	cbnz	r6, 8004172 <_printf_i+0x116>
 800416e:	2d00      	cmp	r5, #0
 8004170:	d04b      	beq.n	800420a <_printf_i+0x1ae>
 8004172:	4615      	mov	r5, r2
 8004174:	fbb6 f1f3 	udiv	r1, r6, r3
 8004178:	fb03 6711 	mls	r7, r3, r1, r6
 800417c:	5dc7      	ldrb	r7, [r0, r7]
 800417e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004182:	4637      	mov	r7, r6
 8004184:	42bb      	cmp	r3, r7
 8004186:	460e      	mov	r6, r1
 8004188:	d9f4      	bls.n	8004174 <_printf_i+0x118>
 800418a:	2b08      	cmp	r3, #8
 800418c:	d10b      	bne.n	80041a6 <_printf_i+0x14a>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	07de      	lsls	r6, r3, #31
 8004192:	d508      	bpl.n	80041a6 <_printf_i+0x14a>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	6861      	ldr	r1, [r4, #4]
 8004198:	4299      	cmp	r1, r3
 800419a:	bfde      	ittt	le
 800419c:	2330      	movle	r3, #48	; 0x30
 800419e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041a2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80041a6:	1b52      	subs	r2, r2, r5
 80041a8:	6122      	str	r2, [r4, #16]
 80041aa:	464b      	mov	r3, r9
 80041ac:	4621      	mov	r1, r4
 80041ae:	4640      	mov	r0, r8
 80041b0:	f8cd a000 	str.w	sl, [sp]
 80041b4:	aa03      	add	r2, sp, #12
 80041b6:	f7ff fedf 	bl	8003f78 <_printf_common>
 80041ba:	3001      	adds	r0, #1
 80041bc:	d14a      	bne.n	8004254 <_printf_i+0x1f8>
 80041be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c2:	b004      	add	sp, #16
 80041c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	f043 0320 	orr.w	r3, r3, #32
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	2778      	movs	r7, #120	; 0x78
 80041d2:	4832      	ldr	r0, [pc, #200]	; (800429c <_printf_i+0x240>)
 80041d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	6829      	ldr	r1, [r5, #0]
 80041dc:	061f      	lsls	r7, r3, #24
 80041de:	f851 6b04 	ldr.w	r6, [r1], #4
 80041e2:	d402      	bmi.n	80041ea <_printf_i+0x18e>
 80041e4:	065f      	lsls	r7, r3, #25
 80041e6:	bf48      	it	mi
 80041e8:	b2b6      	uxthmi	r6, r6
 80041ea:	07df      	lsls	r7, r3, #31
 80041ec:	bf48      	it	mi
 80041ee:	f043 0320 	orrmi.w	r3, r3, #32
 80041f2:	6029      	str	r1, [r5, #0]
 80041f4:	bf48      	it	mi
 80041f6:	6023      	strmi	r3, [r4, #0]
 80041f8:	b91e      	cbnz	r6, 8004202 <_printf_i+0x1a6>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f023 0320 	bic.w	r3, r3, #32
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	2310      	movs	r3, #16
 8004204:	e7a6      	b.n	8004154 <_printf_i+0xf8>
 8004206:	4824      	ldr	r0, [pc, #144]	; (8004298 <_printf_i+0x23c>)
 8004208:	e7e4      	b.n	80041d4 <_printf_i+0x178>
 800420a:	4615      	mov	r5, r2
 800420c:	e7bd      	b.n	800418a <_printf_i+0x12e>
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	6826      	ldr	r6, [r4, #0]
 8004212:	1d18      	adds	r0, r3, #4
 8004214:	6961      	ldr	r1, [r4, #20]
 8004216:	6028      	str	r0, [r5, #0]
 8004218:	0635      	lsls	r5, r6, #24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	d501      	bpl.n	8004222 <_printf_i+0x1c6>
 800421e:	6019      	str	r1, [r3, #0]
 8004220:	e002      	b.n	8004228 <_printf_i+0x1cc>
 8004222:	0670      	lsls	r0, r6, #25
 8004224:	d5fb      	bpl.n	800421e <_printf_i+0x1c2>
 8004226:	8019      	strh	r1, [r3, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	4615      	mov	r5, r2
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	e7bc      	b.n	80041aa <_printf_i+0x14e>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	2100      	movs	r1, #0
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	602a      	str	r2, [r5, #0]
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	6862      	ldr	r2, [r4, #4]
 800423c:	4628      	mov	r0, r5
 800423e:	f000 f98d 	bl	800455c <memchr>
 8004242:	b108      	cbz	r0, 8004248 <_printf_i+0x1ec>
 8004244:	1b40      	subs	r0, r0, r5
 8004246:	6060      	str	r0, [r4, #4]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	2300      	movs	r3, #0
 800424e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004252:	e7aa      	b.n	80041aa <_printf_i+0x14e>
 8004254:	462a      	mov	r2, r5
 8004256:	4649      	mov	r1, r9
 8004258:	4640      	mov	r0, r8
 800425a:	6923      	ldr	r3, [r4, #16]
 800425c:	47d0      	blx	sl
 800425e:	3001      	adds	r0, #1
 8004260:	d0ad      	beq.n	80041be <_printf_i+0x162>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	079b      	lsls	r3, r3, #30
 8004266:	d413      	bmi.n	8004290 <_printf_i+0x234>
 8004268:	68e0      	ldr	r0, [r4, #12]
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	4298      	cmp	r0, r3
 800426e:	bfb8      	it	lt
 8004270:	4618      	movlt	r0, r3
 8004272:	e7a6      	b.n	80041c2 <_printf_i+0x166>
 8004274:	2301      	movs	r3, #1
 8004276:	4632      	mov	r2, r6
 8004278:	4649      	mov	r1, r9
 800427a:	4640      	mov	r0, r8
 800427c:	47d0      	blx	sl
 800427e:	3001      	adds	r0, #1
 8004280:	d09d      	beq.n	80041be <_printf_i+0x162>
 8004282:	3501      	adds	r5, #1
 8004284:	68e3      	ldr	r3, [r4, #12]
 8004286:	9903      	ldr	r1, [sp, #12]
 8004288:	1a5b      	subs	r3, r3, r1
 800428a:	42ab      	cmp	r3, r5
 800428c:	dcf2      	bgt.n	8004274 <_printf_i+0x218>
 800428e:	e7eb      	b.n	8004268 <_printf_i+0x20c>
 8004290:	2500      	movs	r5, #0
 8004292:	f104 0619 	add.w	r6, r4, #25
 8004296:	e7f5      	b.n	8004284 <_printf_i+0x228>
 8004298:	08004674 	.word	0x08004674
 800429c:	08004685 	.word	0x08004685

080042a0 <__swbuf_r>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	460e      	mov	r6, r1
 80042a4:	4614      	mov	r4, r2
 80042a6:	4605      	mov	r5, r0
 80042a8:	b118      	cbz	r0, 80042b2 <__swbuf_r+0x12>
 80042aa:	6a03      	ldr	r3, [r0, #32]
 80042ac:	b90b      	cbnz	r3, 80042b2 <__swbuf_r+0x12>
 80042ae:	f7ff fa3d 	bl	800372c <__sinit>
 80042b2:	69a3      	ldr	r3, [r4, #24]
 80042b4:	60a3      	str	r3, [r4, #8]
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	071a      	lsls	r2, r3, #28
 80042ba:	d525      	bpl.n	8004308 <__swbuf_r+0x68>
 80042bc:	6923      	ldr	r3, [r4, #16]
 80042be:	b31b      	cbz	r3, 8004308 <__swbuf_r+0x68>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	6922      	ldr	r2, [r4, #16]
 80042c4:	b2f6      	uxtb	r6, r6
 80042c6:	1a98      	subs	r0, r3, r2
 80042c8:	6963      	ldr	r3, [r4, #20]
 80042ca:	4637      	mov	r7, r6
 80042cc:	4283      	cmp	r3, r0
 80042ce:	dc04      	bgt.n	80042da <__swbuf_r+0x3a>
 80042d0:	4621      	mov	r1, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7ff fbde 	bl	8003a94 <_fflush_r>
 80042d8:	b9e0      	cbnz	r0, 8004314 <__swbuf_r+0x74>
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	701e      	strb	r6, [r3, #0]
 80042e8:	6962      	ldr	r2, [r4, #20]
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d004      	beq.n	80042fa <__swbuf_r+0x5a>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	07db      	lsls	r3, r3, #31
 80042f4:	d506      	bpl.n	8004304 <__swbuf_r+0x64>
 80042f6:	2e0a      	cmp	r6, #10
 80042f8:	d104      	bne.n	8004304 <__swbuf_r+0x64>
 80042fa:	4621      	mov	r1, r4
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7ff fbc9 	bl	8003a94 <_fflush_r>
 8004302:	b938      	cbnz	r0, 8004314 <__swbuf_r+0x74>
 8004304:	4638      	mov	r0, r7
 8004306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004308:	4621      	mov	r1, r4
 800430a:	4628      	mov	r0, r5
 800430c:	f000 f806 	bl	800431c <__swsetup_r>
 8004310:	2800      	cmp	r0, #0
 8004312:	d0d5      	beq.n	80042c0 <__swbuf_r+0x20>
 8004314:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004318:	e7f4      	b.n	8004304 <__swbuf_r+0x64>
	...

0800431c <__swsetup_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4b2a      	ldr	r3, [pc, #168]	; (80043c8 <__swsetup_r+0xac>)
 8004320:	4605      	mov	r5, r0
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	460c      	mov	r4, r1
 8004326:	b118      	cbz	r0, 8004330 <__swsetup_r+0x14>
 8004328:	6a03      	ldr	r3, [r0, #32]
 800432a:	b90b      	cbnz	r3, 8004330 <__swsetup_r+0x14>
 800432c:	f7ff f9fe 	bl	800372c <__sinit>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004336:	0718      	lsls	r0, r3, #28
 8004338:	d422      	bmi.n	8004380 <__swsetup_r+0x64>
 800433a:	06d9      	lsls	r1, r3, #27
 800433c:	d407      	bmi.n	800434e <__swsetup_r+0x32>
 800433e:	2309      	movs	r3, #9
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	e034      	b.n	80043b8 <__swsetup_r+0x9c>
 800434e:	0758      	lsls	r0, r3, #29
 8004350:	d512      	bpl.n	8004378 <__swsetup_r+0x5c>
 8004352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004354:	b141      	cbz	r1, 8004368 <__swsetup_r+0x4c>
 8004356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800435a:	4299      	cmp	r1, r3
 800435c:	d002      	beq.n	8004364 <__swsetup_r+0x48>
 800435e:	4628      	mov	r0, r5
 8004360:	f7ff fc80 	bl	8003c64 <_free_r>
 8004364:	2300      	movs	r3, #0
 8004366:	6363      	str	r3, [r4, #52]	; 0x34
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800436e:	81a3      	strh	r3, [r4, #12]
 8004370:	2300      	movs	r3, #0
 8004372:	6063      	str	r3, [r4, #4]
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	81a3      	strh	r3, [r4, #12]
 8004380:	6923      	ldr	r3, [r4, #16]
 8004382:	b94b      	cbnz	r3, 8004398 <__swsetup_r+0x7c>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800438a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438e:	d003      	beq.n	8004398 <__swsetup_r+0x7c>
 8004390:	4621      	mov	r1, r4
 8004392:	4628      	mov	r0, r5
 8004394:	f000 f83f 	bl	8004416 <__smakebuf_r>
 8004398:	89a0      	ldrh	r0, [r4, #12]
 800439a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800439e:	f010 0301 	ands.w	r3, r0, #1
 80043a2:	d00a      	beq.n	80043ba <__swsetup_r+0x9e>
 80043a4:	2300      	movs	r3, #0
 80043a6:	60a3      	str	r3, [r4, #8]
 80043a8:	6963      	ldr	r3, [r4, #20]
 80043aa:	425b      	negs	r3, r3
 80043ac:	61a3      	str	r3, [r4, #24]
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	b943      	cbnz	r3, 80043c4 <__swsetup_r+0xa8>
 80043b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043b6:	d1c4      	bne.n	8004342 <__swsetup_r+0x26>
 80043b8:	bd38      	pop	{r3, r4, r5, pc}
 80043ba:	0781      	lsls	r1, r0, #30
 80043bc:	bf58      	it	pl
 80043be:	6963      	ldrpl	r3, [r4, #20]
 80043c0:	60a3      	str	r3, [r4, #8]
 80043c2:	e7f4      	b.n	80043ae <__swsetup_r+0x92>
 80043c4:	2000      	movs	r0, #0
 80043c6:	e7f7      	b.n	80043b8 <__swsetup_r+0x9c>
 80043c8:	200000b8 	.word	0x200000b8

080043cc <__swhatbuf_r>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	460c      	mov	r4, r1
 80043d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d4:	4615      	mov	r5, r2
 80043d6:	2900      	cmp	r1, #0
 80043d8:	461e      	mov	r6, r3
 80043da:	b096      	sub	sp, #88	; 0x58
 80043dc:	da0c      	bge.n	80043f8 <__swhatbuf_r+0x2c>
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	2100      	movs	r1, #0
 80043e2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043e6:	bf0c      	ite	eq
 80043e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80043ec:	2340      	movne	r3, #64	; 0x40
 80043ee:	2000      	movs	r0, #0
 80043f0:	6031      	str	r1, [r6, #0]
 80043f2:	602b      	str	r3, [r5, #0]
 80043f4:	b016      	add	sp, #88	; 0x58
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	466a      	mov	r2, sp
 80043fa:	f000 f849 	bl	8004490 <_fstat_r>
 80043fe:	2800      	cmp	r0, #0
 8004400:	dbed      	blt.n	80043de <__swhatbuf_r+0x12>
 8004402:	9901      	ldr	r1, [sp, #4]
 8004404:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004408:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800440c:	4259      	negs	r1, r3
 800440e:	4159      	adcs	r1, r3
 8004410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004414:	e7eb      	b.n	80043ee <__swhatbuf_r+0x22>

08004416 <__smakebuf_r>:
 8004416:	898b      	ldrh	r3, [r1, #12]
 8004418:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800441a:	079d      	lsls	r5, r3, #30
 800441c:	4606      	mov	r6, r0
 800441e:	460c      	mov	r4, r1
 8004420:	d507      	bpl.n	8004432 <__smakebuf_r+0x1c>
 8004422:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	6123      	str	r3, [r4, #16]
 800442a:	2301      	movs	r3, #1
 800442c:	6163      	str	r3, [r4, #20]
 800442e:	b002      	add	sp, #8
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	466a      	mov	r2, sp
 8004434:	ab01      	add	r3, sp, #4
 8004436:	f7ff ffc9 	bl	80043cc <__swhatbuf_r>
 800443a:	9900      	ldr	r1, [sp, #0]
 800443c:	4605      	mov	r5, r0
 800443e:	4630      	mov	r0, r6
 8004440:	f7ff fa26 	bl	8003890 <_malloc_r>
 8004444:	b948      	cbnz	r0, 800445a <__smakebuf_r+0x44>
 8004446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800444a:	059a      	lsls	r2, r3, #22
 800444c:	d4ef      	bmi.n	800442e <__smakebuf_r+0x18>
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	f043 0302 	orr.w	r3, r3, #2
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	e7e3      	b.n	8004422 <__smakebuf_r+0xc>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	6020      	str	r0, [r4, #0]
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	81a3      	strh	r3, [r4, #12]
 8004464:	9b00      	ldr	r3, [sp, #0]
 8004466:	6120      	str	r0, [r4, #16]
 8004468:	6163      	str	r3, [r4, #20]
 800446a:	9b01      	ldr	r3, [sp, #4]
 800446c:	b15b      	cbz	r3, 8004486 <__smakebuf_r+0x70>
 800446e:	4630      	mov	r0, r6
 8004470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004474:	f000 f81e 	bl	80044b4 <_isatty_r>
 8004478:	b128      	cbz	r0, 8004486 <__smakebuf_r+0x70>
 800447a:	89a3      	ldrh	r3, [r4, #12]
 800447c:	f023 0303 	bic.w	r3, r3, #3
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	431d      	orrs	r5, r3
 800448a:	81a5      	strh	r5, [r4, #12]
 800448c:	e7cf      	b.n	800442e <__smakebuf_r+0x18>
	...

08004490 <_fstat_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	2300      	movs	r3, #0
 8004494:	4d06      	ldr	r5, [pc, #24]	; (80044b0 <_fstat_r+0x20>)
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	f7fc ff7a 	bl	8001396 <_fstat>
 80044a2:	1c43      	adds	r3, r0, #1
 80044a4:	d102      	bne.n	80044ac <_fstat_r+0x1c>
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	b103      	cbz	r3, 80044ac <_fstat_r+0x1c>
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
 80044ae:	bf00      	nop
 80044b0:	200002d4 	.word	0x200002d4

080044b4 <_isatty_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	2300      	movs	r3, #0
 80044b8:	4d05      	ldr	r5, [pc, #20]	; (80044d0 <_isatty_r+0x1c>)
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc ff78 	bl	80013b4 <_isatty>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_isatty_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_isatty_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	200002d4 	.word	0x200002d4

080044d4 <_raise_r>:
 80044d4:	291f      	cmp	r1, #31
 80044d6:	b538      	push	{r3, r4, r5, lr}
 80044d8:	4604      	mov	r4, r0
 80044da:	460d      	mov	r5, r1
 80044dc:	d904      	bls.n	80044e8 <_raise_r+0x14>
 80044de:	2316      	movs	r3, #22
 80044e0:	6003      	str	r3, [r0, #0]
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80044ea:	b112      	cbz	r2, 80044f2 <_raise_r+0x1e>
 80044ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044f0:	b94b      	cbnz	r3, 8004506 <_raise_r+0x32>
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f830 	bl	8004558 <_getpid_r>
 80044f8:	462a      	mov	r2, r5
 80044fa:	4601      	mov	r1, r0
 80044fc:	4620      	mov	r0, r4
 80044fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004502:	f000 b817 	b.w	8004534 <_kill_r>
 8004506:	2b01      	cmp	r3, #1
 8004508:	d00a      	beq.n	8004520 <_raise_r+0x4c>
 800450a:	1c59      	adds	r1, r3, #1
 800450c:	d103      	bne.n	8004516 <_raise_r+0x42>
 800450e:	2316      	movs	r3, #22
 8004510:	6003      	str	r3, [r0, #0]
 8004512:	2001      	movs	r0, #1
 8004514:	e7e7      	b.n	80044e6 <_raise_r+0x12>
 8004516:	2400      	movs	r4, #0
 8004518:	4628      	mov	r0, r5
 800451a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800451e:	4798      	blx	r3
 8004520:	2000      	movs	r0, #0
 8004522:	e7e0      	b.n	80044e6 <_raise_r+0x12>

08004524 <raise>:
 8004524:	4b02      	ldr	r3, [pc, #8]	; (8004530 <raise+0xc>)
 8004526:	4601      	mov	r1, r0
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	f7ff bfd3 	b.w	80044d4 <_raise_r>
 800452e:	bf00      	nop
 8004530:	200000b8 	.word	0x200000b8

08004534 <_kill_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	2300      	movs	r3, #0
 8004538:	4d06      	ldr	r5, [pc, #24]	; (8004554 <_kill_r+0x20>)
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	f7fc feca 	bl	80012da <_kill>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	d102      	bne.n	8004550 <_kill_r+0x1c>
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	b103      	cbz	r3, 8004550 <_kill_r+0x1c>
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	bd38      	pop	{r3, r4, r5, pc}
 8004552:	bf00      	nop
 8004554:	200002d4 	.word	0x200002d4

08004558 <_getpid_r>:
 8004558:	f7fc beb8 	b.w	80012cc <_getpid>

0800455c <memchr>:
 800455c:	4603      	mov	r3, r0
 800455e:	b510      	push	{r4, lr}
 8004560:	b2c9      	uxtb	r1, r1
 8004562:	4402      	add	r2, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	4618      	mov	r0, r3
 8004568:	d101      	bne.n	800456e <memchr+0x12>
 800456a:	2000      	movs	r0, #0
 800456c:	e003      	b.n	8004576 <memchr+0x1a>
 800456e:	7804      	ldrb	r4, [r0, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	428c      	cmp	r4, r1
 8004574:	d1f6      	bne.n	8004564 <memchr+0x8>
 8004576:	bd10      	pop	{r4, pc}

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr
