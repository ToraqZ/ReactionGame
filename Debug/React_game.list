
React_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b9c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d00  08002d00  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d08  08002d08  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000060  08002d70  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002d70  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a4da  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd4  00000000  00000000  0002a5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000818  00000000  00000000  0002cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016277  00000000  00000000  0002d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b65c  00000000  00000000  000436bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b32b  00000000  00000000  0004ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bf4  00000000  00000000  000da048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000dcc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000060 	.word	0x20000060
 8000158:	00000000 	.word	0x00000000
 800015c:	08002cc0 	.word	0x08002cc0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000064 	.word	0x20000064
 8000178:	08002cc0 	.word	0x08002cc0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <set_new_state>:
		             {0,1,0,0},
					 {0,0,1,0},
					 {0,0,0,1},
					 {1,1,1,1}};

static void set_new_state(FSM_State_Enum _new_state){
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if ((_new_state >= 0) && (_new_state < fsm_handle->states_list_sz)){
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <set_new_state+0x58>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	429a      	cmp	r2, r3
 8000490:	d219      	bcs.n	80004c6 <set_new_state+0x4a>
		fsm_handle->state = fsm_handle->states_list[_new_state];
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <set_new_state+0x58>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	441a      	add	r2, r3
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <set_new_state+0x58>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004a6:	e883 0003 	stmia.w	r3, {r0, r1}

		fsm_handle->controllers.state_execution_count=0;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <set_new_state+0x58>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
		fsm_handle->controllers.animation_state=ANIMATION_RUNNING;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <set_new_state+0x58>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
		fsm_handle->controllers.state_base_time=HAL_GetTick();
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <set_new_state+0x58>)
 80004bc:	681c      	ldr	r4, [r3, #0]
 80004be:	f000 fd6f 	bl	8000fa0 <HAL_GetTick>
 80004c2:	4603      	mov	r3, r0
 80004c4:	61a3      	str	r3, [r4, #24]
	}
	max7219_erase_no_decode();
 80004c6:	f000 fcc9 	bl	8000e5c <max7219_erase_no_decode>
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000080 	.word	0x20000080

080004d8 <init_game>:

HAL_StatusTypeDef init_game(Game_Handle_TypeDef *_game_handle, FSM_Handle_TypeDef *_fsm_handle){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef led_array_status = HAL_OK;

	game_handle = _game_handle;
 80004e6:	4a11      	ldr	r2, [pc, #68]	; (800052c <init_game+0x54>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6013      	str	r3, [r2, #0]
	fsm_handle = _fsm_handle;
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <init_game+0x58>)
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	6013      	str	r3, [r2, #0]

	max7219_status = max7219_init(&game_handle->max7219_handle);
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <init_game+0x54>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 fc14 	bl	8000d24 <max7219_init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]

	if (max7219_status != HAL_OK)
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <init_game+0x32>
		return max7219_status;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	e00b      	b.n	8000522 <init_game+0x4a>

	fsm_handle->states_list = states_list;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <init_game+0x58>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <init_game+0x5c>)
 8000510:	609a      	str	r2, [r3, #8]
	fsm_handle->states_list_sz = sizeof(states_list) / sizeof(FSM_State_TypeDef);
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <init_game+0x58>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2206      	movs	r2, #6
 8000518:	60da      	str	r2, [r3, #12]

	set_new_state(STATE_START);
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff ffae 	bl	800047c <set_new_state>

	return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000007c 	.word	0x2000007c
 8000530:	20000080 	.word	0x20000080
 8000534:	20000000 	.word	0x20000000

08000538 <run_game>:


HAL_StatusTypeDef run_game(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	fsm_handle->state.state_callback();
 800053e:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <run_game+0xc0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	4798      	blx	r3
	fsm_handle->controllers.state_execution_count += 1;
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <run_game+0xc0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	695a      	ldr	r2, [r3, #20]
 800054c:	4b2a      	ldr	r3, [pc, #168]	; (80005f8 <run_game+0xc0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3201      	adds	r2, #1
 8000552:	615a      	str	r2, [r3, #20]

	switch(fsm_handle->state.state){
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <run_game+0xc0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b05      	cmp	r3, #5
 800055c:	d847      	bhi.n	80005ee <run_game+0xb6>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <run_game+0x2c>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	0800057d 	.word	0x0800057d
 8000568:	080005ef 	.word	0x080005ef
 800056c:	080005ef 	.word	0x080005ef
 8000570:	080005ef 	.word	0x080005ef
 8000574:	080005ef 	.word	0x080005ef
 8000578:	080005ef 	.word	0x080005ef
	case STATE_START:
		uint8_t actualBTN1 = fsm_handle->inputs.nb_press_btn1;
 800057c:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <run_game+0xc0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	7c1b      	ldrb	r3, [r3, #16]
 8000582:	71fb      	strb	r3, [r7, #7]
		uint8_t actualBTN2 = fsm_handle->inputs.nb_press_btn2;
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <run_game+0xc0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	7c5b      	ldrb	r3, [r3, #17]
 800058a:	71bb      	strb	r3, [r7, #6]
		uint8_t actualBTN3 = fsm_handle->inputs.nb_press_btn3;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <run_game+0xc0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	7c9b      	ldrb	r3, [r3, #18]
 8000592:	717b      	strb	r3, [r7, #5]
		uint8_t actualBTN4 = fsm_handle->inputs.nb_press_btn4;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <run_game+0xc0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	7cdb      	ldrb	r3, [r3, #19]
 800059a:	713b      	strb	r3, [r7, #4]

		uint8_t checkP1=0;
 800059c:	2300      	movs	r3, #0
 800059e:	70fb      	strb	r3, [r7, #3]
		uint8_t checkP2=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	70bb      	strb	r3, [r7, #2]
		uint8_t checkP3=0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	707b      	strb	r3, [r7, #1]
		uint8_t checkP4=0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	703b      	strb	r3, [r7, #0]

		checkP1 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <run_game+0xc0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	7c1a      	ldrb	r2, [r3, #16]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	70fb      	strb	r3, [r7, #3]
		checkP2 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <run_game+0xc0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	7c1a      	ldrb	r2, [r3, #16]
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	70bb      	strb	r3, [r7, #2]
		checkP3 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <run_game+0xc0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	7c1a      	ldrb	r2, [r3, #16]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	707b      	strb	r3, [r7, #1]
		checkP4 = fsm_handle->inputs.nb_press_btn1 - actualBTN1;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <run_game+0xc0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	7c1a      	ldrb	r2, [r3, #16]
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	703b      	strb	r3, [r7, #0]

		if(fsm_handle->controllers.animation_state==ANIMATION_ENDED){
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <run_game+0xc0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	7f1b      	ldrb	r3, [r3, #28]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d102      	bne.n	80005ec <run_game+0xb4>
				set_new_state(STATE_WP);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff48 	bl	800047c <set_new_state>
	//	if (checkP1 != 0 || checkP2 != 0 || checkP3 != 0 || checkP4 != 0){
	//		set_new_state(STATE_WP);
	//	}


		break;
 80005ec:	bf00      	nop
		break;
	case STATE_STOP:
		break;
	}

	return HAL_OK;
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000080 	.word	0x20000080

080005fc <state_start>:

void state_start(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	//Affichage
	max7219_status=display_letter(game_handle->max7219_handle, 'G', 0);
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <state_start+0xa4>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2347      	movs	r3, #71	; 0x47
 800060c:	ca07      	ldmia	r2, {r0, r1, r2}
 800060e:	f000 f87b 	bl	8000708 <display_letter>
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	if(max7219_status != HAL_OK)
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <state_start+0x24>
		Error_Handler();
 800061c:	f000 fa3a 	bl	8000a94 <Error_Handler>
	max7219_status=display_letter(game_handle->max7219_handle, 'A', 1);
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <state_start+0xa4>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2341      	movs	r3, #65	; 0x41
 800062a:	ca07      	ldmia	r2, {r0, r1, r2}
 800062c:	f000 f86c 	bl	8000708 <display_letter>
 8000630:	4603      	mov	r3, r0
 8000632:	71fb      	strb	r3, [r7, #7]
	if(max7219_status != HAL_OK)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <state_start+0x42>
		Error_Handler();
 800063a:	f000 fa2b 	bl	8000a94 <Error_Handler>
	max7219_status=display_letter(game_handle->max7219_handle, 'M', 2);
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <state_start+0xa4>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	234d      	movs	r3, #77	; 0x4d
 8000648:	ca07      	ldmia	r2, {r0, r1, r2}
 800064a:	f000 f85d 	bl	8000708 <display_letter>
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	if(max7219_status != HAL_OK)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <state_start+0x60>
		Error_Handler();
 8000658:	f000 fa1c 	bl	8000a94 <Error_Handler>
	max7219_status=display_letter(game_handle->max7219_handle, 'E', 3);
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <state_start+0xa4>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	2303      	movs	r3, #3
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2345      	movs	r3, #69	; 0x45
 8000666:	ca07      	ldmia	r2, {r0, r1, r2}
 8000668:	f000 f84e 	bl	8000708 <display_letter>
 800066c:	4603      	mov	r3, r0
 800066e:	71fb      	strb	r3, [r7, #7]
	if(max7219_status != HAL_OK)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <state_start+0x7e>
		Error_Handler();
 8000676:	f000 fa0d 	bl	8000a94 <Error_Handler>

	//Ellapsed time
	if(HAL_GetTick()-fsm_handle->controllers.state_base_time>=3000){
 800067a:	f000 fc91 	bl	8000fa0 <HAL_GetTick>
 800067e:	4602      	mov	r2, r0
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <state_start+0xa8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800068c:	4293      	cmp	r3, r2
 800068e:	d903      	bls.n	8000698 <state_start+0x9c>
		fsm_handle->controllers.animation_state=ANIMATION_ENDED;
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <state_start+0xa8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2201      	movs	r2, #1
 8000696:	771a      	strb	r2, [r3, #28]
	}


}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	20000080 	.word	0x20000080

080006a8 <state_wp>:
void state_wp(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef max7219_status;

	max7219_status=display_letter(game_handle->max7219_handle, 'P', 1);
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <state_wp+0x2c>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2350      	movs	r3, #80	; 0x50
 80006b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ba:	f000 f825 	bl	8000708 <display_letter>
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	if(max7219_status != HAL_OK)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <state_wp+0x24>
		Error_Handler();
 80006c8:	f000 f9e4 	bl	8000a94 <Error_Handler>

}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000007c 	.word	0x2000007c

080006d8 <state_gp>:
void state_gp(void){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <state_wait>:
void state_wait(void){
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <state_disp>:
void state_disp(void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <state_stop>:
void state_stop(void){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <display_letter>:

HAL_StatusTypeDef display_letter(MAX7219_Handle_TypeDef max7219_handle, char letter, int pos){
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	1d3c      	adds	r4, r7, #4
 8000710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000714:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef max7219_status;

if(letter >= 'A' && letter <= 'Z'){
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2b40      	cmp	r3, #64	; 0x40
 800071a:	d90e      	bls.n	800073a <display_letter+0x32>
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2b5a      	cmp	r3, #90	; 0x5a
 8000720:	d80b      	bhi.n	800073a <display_letter+0x32>
	max7219_status = max7219_display_no_decode(pos, LETTERS[letter - 'A']);
 8000722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000724:	b2da      	uxtb	r2, r3
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	3b41      	subs	r3, #65	; 0x41
 800072a:	4906      	ldr	r1, [pc, #24]	; (8000744 <display_letter+0x3c>)
 800072c:	5ccb      	ldrb	r3, [r1, r3]
 800072e:	4619      	mov	r1, r3
 8000730:	4610      	mov	r0, r2
 8000732:	f000 fb55 	bl	8000de0 <max7219_display_no_decode>
 8000736:	4603      	mov	r3, r0
 8000738:	75fb      	strb	r3, [r7, #23]
}
return max7219_status;
 800073a:	7dfb      	ldrb	r3, [r7, #23]
}
 800073c:	4618      	mov	r0, r3
 800073e:	371c      	adds	r7, #28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000030 	.word	0x20000030

08000748 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin){
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000758:	d014      	beq.n	8000784 <HAL_GPIO_EXTI_Callback+0x3c>
 800075a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800075e:	dc26      	bgt.n	80007ae <HAL_GPIO_EXTI_Callback+0x66>
 8000760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000764:	d007      	beq.n	8000776 <HAL_GPIO_EXTI_Callback+0x2e>
 8000766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800076a:	dc20      	bgt.n	80007ae <HAL_GPIO_EXTI_Callback+0x66>
 800076c:	2b20      	cmp	r3, #32
 800076e:	d017      	beq.n	80007a0 <HAL_GPIO_EXTI_Callback+0x58>
 8000770:	2b40      	cmp	r3, #64	; 0x40
 8000772:	d00e      	beq.n	8000792 <HAL_GPIO_EXTI_Callback+0x4a>
		case BTN4_Pin:
			fsm_handle->inputs.nb_press_btn4++;
			break;
	}

}
 8000774:	e01b      	b.n	80007ae <HAL_GPIO_EXTI_Callback+0x66>
			fsm_handle->inputs.nb_press_btn1++;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	7c1a      	ldrb	r2, [r3, #16]
 800077c:	3201      	adds	r2, #1
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	741a      	strb	r2, [r3, #16]
			break;
 8000782:	e014      	b.n	80007ae <HAL_GPIO_EXTI_Callback+0x66>
			fsm_handle->inputs.nb_press_btn2++;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	7c5a      	ldrb	r2, [r3, #17]
 800078a:	3201      	adds	r2, #1
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	745a      	strb	r2, [r3, #17]
			break;
 8000790:	e00d      	b.n	80007ae <HAL_GPIO_EXTI_Callback+0x66>
			fsm_handle->inputs.nb_press_btn3++;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	7c9a      	ldrb	r2, [r3, #18]
 8000798:	3201      	adds	r2, #1
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	749a      	strb	r2, [r3, #18]
			break;
 800079e:	e006      	b.n	80007ae <HAL_GPIO_EXTI_Callback+0x66>
			fsm_handle->inputs.nb_press_btn4++;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x70>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	7cda      	ldrb	r2, [r3, #19]
 80007a6:	3201      	adds	r2, #1
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	74da      	strb	r2, [r3, #19]
			break;
 80007ac:	bf00      	nop
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000080 	.word	0x20000080

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b090      	sub	sp, #64	; 0x40
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fb89 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f82b 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f8f5 	bl	80009b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ce:	f000 f86f 	bl	80008b0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80007d2:	f000 f8a3 	bl	800091c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Handle_TypeDef max7219_handle ={
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <main+0x60>)
 80007d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            &hspi1,
            NCS_GPIO_Port,
            NCS_Pin,
            4
    };
  HAL_StatusTypeDef game_status = HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    Game_Handle_TypeDef game_handler = {
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            max7219_handle,
    };

    FSM_Handle_TypeDef fsm_handler;

    init_game(&game_handler, &fsm_handler);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fe6a 	bl	80004d8 <init_game>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  game_status=run_game();
 8000804:	f7ff fe98 	bl	8000538 <run_game>
 8000808:	4603      	mov	r3, r0
 800080a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  if(game_status != HAL_OK)Error_Handler();
 800080e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f6      	beq.n	8000804 <main+0x48>
 8000816:	f000 f93d 	bl	8000a94 <Error_Handler>
	  game_status=run_game();
 800081a:	e7f3      	b.n	8000804 <main+0x48>
 800081c:	08002cd8 	.word	0x08002cd8

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b092      	sub	sp, #72	; 0x48
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fa1a 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <SystemClock_Config+0x8c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <SystemClock_Config+0x8c>)
 800084c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000850:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000856:	2301      	movs	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800085e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fe6f 	bl	8001550 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000878:	f000 f90c 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f98b 	bl	8001bb0 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008a0:	f000 f8f8 	bl	8000a94 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3748      	adds	r7, #72	; 0x48
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_SPI1_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_SPI1_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI1_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI1_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_SPI1_Init+0x64>)
 8000902:	f001 fba7 	bl	8002054 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 f8c2 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000084 	.word	0x20000084
 8000918:	40013000 	.word	0x40013000

0800091c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_TIM2_Init+0x98>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM2_Init+0x98>)
 8000942:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM2_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM2_Init+0x98>)
 8000950:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000954:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_TIM2_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM2_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_TIM2_Init+0x98>)
 8000964:	f001 fe0c 	bl	8002580 <HAL_TIM_Base_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800096e:	f000 f891 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000976:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	; (80009b4 <MX_TIM2_Init+0x98>)
 8000980:	f001 ff19 	bl	80027b6 <HAL_TIM_ConfigClockSource>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800098a:	f000 f883 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	4619      	mov	r1, r3
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_TIM2_Init+0x98>)
 800099c:	f002 f906 	bl	8002bac <HAL_TIMEx_MasterConfigSynchronization>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009a6:	f000 f875 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000dc 	.word	0x200000dc

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_GPIO_Port, NCS_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a06:	f000 fd73 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN4_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin;
 8000a0a:	2360      	movs	r3, #96	; 0x60
 8000a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <MX_GPIO_Init+0xd8>)
 8000a20:	f000 fbd6 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NCS_Pin */
  GPIO_InitStruct.Pin = NCS_Pin;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NCS_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a3e:	f000 fbc7 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8000a42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a5a:	f000 fbb9 	bl	80011d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2017      	movs	r0, #23
 8000a64:	f000 fb7d 	bl	8001162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a68:	2017      	movs	r0, #23
 8000a6a:	f000 fb96 	bl	800119a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2028      	movs	r0, #40	; 0x28
 8000a74:	f000 fb75 	bl	8001162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a78:	2028      	movs	r0, #40	; 0x28
 8000a7a:	f000 fb8e 	bl	800119a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40020800 	.word	0x40020800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <HAL_MspInit+0x58>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <HAL_MspInit+0x58>)
 8000aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_MspInit+0x58>)
 8000ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_MspInit+0x58>)
 8000ac0:	6a1b      	ldr	r3, [r3, #32]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_MspInit+0x58>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6213      	str	r3, [r2, #32]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_MspInit+0x58>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x58>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_MspInit+0x58>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_MspInit+0x58>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_SPI_MspInit+0x7c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d127      	bne.n	8000b6e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_SPI_MspInit+0x80>)
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_SPI_MspInit+0x80>)
 8000b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b28:	6213      	str	r3, [r2, #32]
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_SPI_MspInit+0x80>)
 8000b2c:	6a1b      	ldr	r3, [r3, #32]
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_SPI_MspInit+0x80>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_SPI_MspInit+0x80>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_SPI_MspInit+0x80>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5e:	2305      	movs	r3, #5
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_SPI_MspInit+0x84>)
 8000b6a:	f000 fb31 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013000 	.word	0x40013000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b94:	d113      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	201c      	movs	r0, #28
 8000bb4:	f000 fad5 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f000 faee 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f9b3 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f000 fc7e 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 8000c24:	2040      	movs	r0, #64	; 0x40
 8000c26:	f000 fc7b 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM2_IRQHandler+0x10>)
 8000c36:	f001 fce2 	bl	80025fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000dc 	.word	0x200000dc

08000c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8000c48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c4c:	f000 fc68 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8000c50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c54:	f000 fc64 	bl	8001520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c68:	f7ff fff8 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c84:	4c09      	ldr	r4, [pc, #36]	; (8000cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f001 fff1 	bl	8002c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fd91 	bl	80007bc <main>
  bx lr
 8000c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ca4:	08002d10 	.word	0x08002d10
  ldr r2, =_sbss
 8000ca8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cac:	20000124 	.word	0x20000124

08000cb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC1_IRQHandler>
	...

08000cb4 <max7219_transmit>:
 * @brief Send data to address
 * @param _address Address on 8 bits
 * @param _data Data on 8 bits
 */
static HAL_StatusTypeDef max7219_transmit(uint8_t _address, uint8_t _data)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {_address, _data};				 // SPI transmit buffer
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	723b      	strb	r3, [r7, #8]
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	727b      	strb	r3, [r7, #9]
	size_t data_sz = sizeof(data) / sizeof(uint8_t); // Size of SPI transmit buffer
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef max7219_status = HAL_OK;		 // Return value
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	72fb      	strb	r3, [r7, #11]

	// Select MAX7219, send data, de-select MAX7219
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_RESET);
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <max7219_transmit+0x6c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6858      	ldr	r0, [r3, #4]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <max7219_transmit+0x6c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	891b      	ldrh	r3, [r3, #8]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f000 fc04 	bl	80014f0 <HAL_GPIO_WritePin>
	max7219_status = HAL_SPI_Transmit(max7219_handle->hspi, data, data_sz, 100);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <max7219_transmit+0x6c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	f107 0108 	add.w	r1, r7, #8
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	f001 fa35 	bl	8002166 <HAL_SPI_Transmit>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max7219_handle->spi_ncs_port, max7219_handle->spi_ncs_pin, GPIO_PIN_SET);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <max7219_transmit+0x6c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6858      	ldr	r0, [r3, #4]
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <max7219_transmit+0x6c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	891b      	ldrh	r3, [r3, #8]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f000 fbee 	bl	80014f0 <HAL_GPIO_WritePin>

	// Return transmit status
	return max7219_status;
 8000d14:	7afb      	ldrb	r3, [r7, #11]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000011c 	.word	0x2000011c

08000d24 <max7219_init>:
 * also initializes basic functions of MAX7219
 * @param _max_7219_handle Pointer to MAX7219 handle
 *
 */
HAL_StatusTypeDef max7219_init(MAX7219_Handle_TypeDef *_max_7219_handle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	/* Attribute parameters to static variables */
	max7219_handle = _max_7219_handle;
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <max7219_init+0xb8>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]

	CHECK_MAX7219_PARAMS();
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <max7219_init+0xb8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <max7219_init+0x20>
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <max7219_init+0xb8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	e047      	b.n	8000dd4 <max7219_init+0xb0>

	/* Initialize MAX7219 following datasheet */
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

	// Shutdown MAX7219 to reset configuration
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_SHUTDOWN_MODE);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	200c      	movs	r0, #12
 8000d4c:	f7ff ffb2 	bl	8000cb4 <max7219_transmit>
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <max7219_init+0x3a>
		return max7219_status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	e03a      	b.n	8000dd4 <max7219_init+0xb0>

	// Enable MAX7219
	max7219_status = max7219_transmit(SHUTDOWN_REG_BASE, SHUTDOWN_REG_NORMAL_MODE);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	200c      	movs	r0, #12
 8000d62:	f7ff ffa7 	bl	8000cb4 <max7219_transmit>
 8000d66:	4603      	mov	r3, r0
 8000d68:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <max7219_init+0x50>
		return max7219_status;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	e02f      	b.n	8000dd4 <max7219_init+0xb0>

	// Set scan limit to number of digits
	max7219_status = max7219_transmit(SCAN_LIMIT_REGG_BASE, max7219_handle->digits_count - 1);
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <max7219_init+0xb8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	7a9b      	ldrb	r3, [r3, #10]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4619      	mov	r1, r3
 8000d80:	200b      	movs	r0, #11
 8000d82:	f7ff ff97 	bl	8000cb4 <max7219_transmit>
 8000d86:	4603      	mov	r3, r0
 8000d88:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <max7219_init+0x70>
		return max7219_status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	e01f      	b.n	8000dd4 <max7219_init+0xb0>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2009      	movs	r0, #9
 8000d98:	f7ff ff8c 	bl	8000cb4 <max7219_transmit>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <max7219_init+0x86>
		return max7219_status;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	e014      	b.n	8000dd4 <max7219_init+0xb0>

	// Set brightness to middle value
	max7219_status = max7219_transmit(INTENSITY_REG_BASE, 0x08);
 8000daa:	2108      	movs	r1, #8
 8000dac:	200a      	movs	r0, #10
 8000dae:	f7ff ff81 	bl	8000cb4 <max7219_transmit>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <max7219_init+0x9c>
		return max7219_status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	e009      	b.n	8000dd4 <max7219_init+0xb0>

	// Erase all digits
	max7219_status = max7219_erase_no_decode();
 8000dc0:	f000 f84c 	bl	8000e5c <max7219_erase_no_decode>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <max7219_init+0xae>
		return max7219_status;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	e000      	b.n	8000dd4 <max7219_init+0xb0>

	// Return on success
	return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000011c 	.word	0x2000011c

08000de0 <max7219_display_no_decode>:
 * @param _digit_index 7 segment digit index (starts at 0)
 * @param _digit_value Desired digit value to be written
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_display_no_decode(uint8_t _digit_index, uint8_t _digit_value)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	460a      	mov	r2, r1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	4613      	mov	r3, r2
 8000dee:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <max7219_display_no_decode+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <max7219_display_no_decode+0x26>
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <max7219_display_no_decode+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	e022      	b.n	8000e4c <max7219_display_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2009      	movs	r0, #9
 8000e0a:	f7ff ff53 	bl	8000cb4 <max7219_transmit>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <max7219_display_no_decode+0x3c>
		return max7219_status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	e017      	b.n	8000e4c <max7219_display_no_decode+0x6c>

	/* Check if digit index does not overflow actual hardware setup */
	if (_digit_index > max7219_handle->digits_count)
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <max7219_display_no_decode+0x74>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	7a9b      	ldrb	r3, [r3, #10]
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d901      	bls.n	8000e2c <max7219_display_no_decode+0x4c>
		return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e00f      	b.n	8000e4c <max7219_display_no_decode+0x6c>

	// Display value
	max7219_status = max7219_transmit(digits_registers[_digit_index], _digit_value);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <max7219_display_no_decode+0x78>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	79ba      	ldrb	r2, [r7, #6]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff3c 	bl	8000cb4 <max7219_transmit>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	73fb      	strb	r3, [r7, #15]
	if (max7219_status != HAL_OK)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <max7219_display_no_decode+0x6a>
		return max7219_status;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	e000      	b.n	8000e4c <max7219_display_no_decode+0x6c>

	return max7219_status;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000011c 	.word	0x2000011c
 8000e58:	20000050 	.word	0x20000050

08000e5c <max7219_erase_no_decode>:
/**
 * @brief Erase display
 * @retval HAL_OK on success
 */
HAL_StatusTypeDef max7219_erase_no_decode(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef max7219_status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]

	// Check if init has been called
	CHECK_MAX7219_PARAMS();
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <max7219_erase_no_decode+0x74>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d104      	bne.n	8000e78 <max7219_erase_no_decode+0x1c>
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <max7219_erase_no_decode+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	2301      	movs	r3, #1
 8000e76:	e027      	b.n	8000ec8 <max7219_erase_no_decode+0x6c>

	// Set decode mode to 'no decode'
	max7219_status = max7219_transmit(DECODE_MODE_REG_BASE, 0x00);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2009      	movs	r0, #9
 8000e7c:	f7ff ff1a 	bl	8000cb4 <max7219_transmit>
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
	if (max7219_status != HAL_OK)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <max7219_erase_no_decode+0x32>
		return max7219_status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	e01c      	b.n	8000ec8 <max7219_erase_no_decode+0x6c>

	for (int i = 0; i < max7219_handle->digits_count; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	e011      	b.n	8000eb8 <max7219_erase_no_decode+0x5c>
	{
		max7219_status = max7219_transmit(digits_registers[i], DIGIT_OFF);
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <max7219_erase_no_decode+0x78>)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff08 	bl	8000cb4 <max7219_transmit>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
		if (max7219_status != HAL_OK)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <max7219_erase_no_decode+0x56>
			return max7219_status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	e00a      	b.n	8000ec8 <max7219_erase_no_decode+0x6c>
	for (int i = 0; i < max7219_handle->digits_count; i++)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <max7219_erase_no_decode+0x74>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	7a9b      	ldrb	r3, [r3, #10]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	dbe6      	blt.n	8000e94 <max7219_erase_no_decode+0x38>
	}

	return max7219_status;
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000011c 	.word	0x2000011c
 8000ed4:	20000050 	.word	0x20000050

08000ed8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f932 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee8:	200f      	movs	r0, #15
 8000eea:	f000 f80d 	bl	8000f08 <HAL_InitTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	e001      	b.n	8000efe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efa:	f7ff fdd1 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x68>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d022      	beq.n	8000f62 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_InitTick+0x68>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f940 	bl	80011b6 <HAL_SYSTICK_Config>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10f      	bne.n	8000f5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	d809      	bhi.n	8000f56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	2200      	movs	r2, #0
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4a:	f000 f90a 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0x70>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e007      	b.n	8000f66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e004      	b.n	8000f66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000005c 	.word	0x2000005c
 8000f74:	2000004c 	.word	0x2000004c
 8000f78:	20000058 	.word	0x20000058

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000120 	.word	0x20000120
 8000f9c:	2000005c 	.word	0x2000005c

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000120 	.word	0x20000120

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4906      	ldr	r1, [pc, #24]	; (800104c <__NVIC_EnableIRQ+0x34>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f7ff ff90 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff2d 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff42 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff90 	bl	80010a4 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5f 	bl	8001050 <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff35 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011e6:	e160      	b.n	80014aa <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8152 	beq.w	80014a4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d005      	beq.n	8001218 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001214:	2b02      	cmp	r3, #2
 8001216:	d130      	bne.n	800127a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800124e:	2201      	movs	r2, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	091b      	lsrs	r3, r3, #4
 8001264:	f003 0201 	and.w	r2, r3, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b03      	cmp	r3, #3
 8001284:	d017      	beq.n	80012b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d123      	bne.n	800130a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	6939      	ldr	r1, [r7, #16]
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0203 	and.w	r2, r3, #3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 80ac 	beq.w	80014a4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134c:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_GPIO_Init+0x2f8>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a5d      	ldr	r2, [pc, #372]	; (80014c8 <HAL_GPIO_Init+0x2f8>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <HAL_GPIO_Init+0x2f8>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001364:	4a59      	ldr	r2, [pc, #356]	; (80014cc <HAL_GPIO_Init+0x2fc>)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a51      	ldr	r2, [pc, #324]	; (80014d0 <HAL_GPIO_Init+0x300>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d025      	beq.n	80013dc <HAL_GPIO_Init+0x20c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a50      	ldr	r2, [pc, #320]	; (80014d4 <HAL_GPIO_Init+0x304>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d01f      	beq.n	80013d8 <HAL_GPIO_Init+0x208>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a4f      	ldr	r2, [pc, #316]	; (80014d8 <HAL_GPIO_Init+0x308>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d019      	beq.n	80013d4 <HAL_GPIO_Init+0x204>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <HAL_GPIO_Init+0x30c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x200>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4d      	ldr	r2, [pc, #308]	; (80014e0 <HAL_GPIO_Init+0x310>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1fc>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_GPIO_Init+0x314>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1f8>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_GPIO_Init+0x318>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1f4>
 80013c0:	2306      	movs	r3, #6
 80013c2:	e00c      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013c4:	2307      	movs	r3, #7
 80013c6:	e00a      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013c8:	2305      	movs	r3, #5
 80013ca:	e008      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013cc:	2304      	movs	r3, #4
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013d0:	2303      	movs	r3, #3
 80013d2:	e004      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e002      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_GPIO_Init+0x20e>
 80013dc:	2300      	movs	r3, #0
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	f002 0203 	and.w	r2, r2, #3
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	4093      	lsls	r3, r2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013ee:	4937      	ldr	r1, [pc, #220]	; (80014cc <HAL_GPIO_Init+0x2fc>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fc:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_GPIO_Init+0x31c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001420:	4a32      	ldr	r2, [pc, #200]	; (80014ec <HAL_GPIO_Init+0x31c>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <HAL_GPIO_Init+0x31c>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800144a:	4a28      	ldr	r2, [pc, #160]	; (80014ec <HAL_GPIO_Init+0x31c>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_GPIO_Init+0x31c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_GPIO_Init+0x31c>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_GPIO_Init+0x31c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_GPIO_Init+0x31c>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa22 f303 	lsr.w	r3, r2, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f ae97 	bne.w	80011e8 <HAL_GPIO_Init+0x18>
  }
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f902 	bl	8000748 <HAL_GPIO_EXTI_Callback>
  }
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010400 	.word	0x40010400

08001550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e31d      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b94      	ldr	r3, [pc, #592]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	4b91      	ldr	r3, [pc, #580]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001574:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d07b      	beq.n	800167a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b08      	cmp	r3, #8
 8001586:	d006      	beq.n	8001596 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d10f      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d10b      	bne.n	80015ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	4b87      	ldr	r3, [pc, #540]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06a      	beq.n	8001678 <HAL_RCC_OscConfig+0x128>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d166      	bne.n	8001678 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e2f7      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d106      	bne.n	80015c4 <HAL_RCC_OscConfig+0x74>
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e02d      	b.n	8001620 <HAL_RCC_OscConfig+0xd0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x96>
 80015cc:	4b79      	ldr	r3, [pc, #484]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a78      	ldr	r2, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a75      	ldr	r2, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0xd0>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0xb8>
 80015ee:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6d      	ldr	r2, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xd0>
 8001608:	4b6a      	ldr	r3, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a69      	ldr	r2, [pc, #420]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b67      	ldr	r3, [pc, #412]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a66      	ldr	r2, [pc, #408]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fcba 	bl	8000fa0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fcb6 	bl	8000fa0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e2ad      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001642:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xe0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fca6 	bl	8000fa0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fca2 	bl	8000fa0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e299      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800166a:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x108>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d05a      	beq.n	800173c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d119      	bne.n	80016c6 <HAL_RCC_OscConfig+0x176>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d116      	bne.n	80016c6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x160>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e276      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	493d      	ldr	r1, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c4:	e03a      	b.n	800173c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d020      	beq.n	8001710 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ce:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <HAL_RCC_OscConfig+0x268>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc64 	bl	8000fa0 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc60 	bl	8000fa0 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e257      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	492a      	ldr	r1, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
 800170e:	e015      	b.n	800173c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_RCC_OscConfig+0x268>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fc43 	bl	8000fa0 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fc3f 	bl	8000fa0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e236      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80b8 	beq.w	80018ba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d170      	bne.n	8001832 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_OscConfig+0x218>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e21a      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001774:	429a      	cmp	r2, r3
 8001776:	d921      	bls.n	80017bc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fc09 	bl	8001f94 <RCC_SetFlashLatencyFromMSIRange>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e208      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4906      	ldr	r1, [pc, #24]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	061b      	lsls	r3, r3, #24
 80017ac:	4901      	ldr	r1, [pc, #4]	; (80017b4 <HAL_RCC_OscConfig+0x264>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
 80017b2:	e020      	b.n	80017f6 <HAL_RCC_OscConfig+0x2a6>
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017bc:	4b99      	ldr	r3, [pc, #612]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4996      	ldr	r1, [pc, #600]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ce:	4b95      	ldr	r3, [pc, #596]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	4991      	ldr	r1, [pc, #580]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fbd4 	bl	8001f94 <RCC_SetFlashLatencyFromMSIRange>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e1d3      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	0b5b      	lsrs	r3, r3, #13
 80017fc:	3301      	adds	r3, #1
 80017fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001806:	4a87      	ldr	r2, [pc, #540]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001808:	6892      	ldr	r2, [r2, #8]
 800180a:	0912      	lsrs	r2, r2, #4
 800180c:	f002 020f 	and.w	r2, r2, #15
 8001810:	4985      	ldr	r1, [pc, #532]	; (8001a28 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	5c8a      	ldrb	r2, [r1, r2]
 8001814:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001816:	4a85      	ldr	r2, [pc, #532]	; (8001a2c <HAL_RCC_OscConfig+0x4dc>)
 8001818:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <HAL_RCC_OscConfig+0x4e0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb72 	bl	8000f08 <HAL_InitTick>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d045      	beq.n	80018ba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	e1b5      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d029      	beq.n	800188e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800183a:	4b7e      	ldr	r3, [pc, #504]	; (8001a34 <HAL_RCC_OscConfig+0x4e4>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fbae 	bl	8000fa0 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001848:	f7ff fbaa 	bl	8000fa0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1a1      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800185a:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001866:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	496c      	ldr	r1, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	4967      	ldr	r1, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800188e:	4b69      	ldr	r3, [pc, #420]	; (8001a34 <HAL_RCC_OscConfig+0x4e4>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fb84 	bl	8000fa0 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189c:	f7ff fb80 	bl	8000fa0 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e177      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ae:	4b5d      	ldr	r3, [pc, #372]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d016      	beq.n	80018fc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_RCC_OscConfig+0x4e8>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fb64 	bl	8000fa0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fb60 	bl	8000fa0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e157      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x38c>
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fc:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_RCC_OscConfig+0x4e8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff fb4d 	bl	8000fa0 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff fb49 	bl	8000fa0 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e140      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800191c:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80b5 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10d      	bne.n	8001962 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6253      	str	r3, [r2, #36]	; 0x24
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195e:	2301      	movs	r3, #1
 8001960:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_OscConfig+0x4ec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <HAL_RCC_OscConfig+0x4ec>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <HAL_RCC_OscConfig+0x4ec>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff fb11 	bl	8000fa0 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff fb0d 	bl	8000fa0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e104      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_RCC_OscConfig+0x4ec>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x466>
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6353      	str	r3, [r2, #52]	; 0x34
 80019b4:	e02d      	b.n	8001a12 <HAL_RCC_OscConfig+0x4c2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x488>
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c8:	6353      	str	r3, [r2, #52]	; 0x34
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019d4:	6353      	str	r3, [r2, #52]	; 0x34
 80019d6:	e01c      	b.n	8001a12 <HAL_RCC_OscConfig+0x4c2>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d10c      	bne.n	80019fa <HAL_RCC_OscConfig+0x4aa>
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6353      	str	r3, [r2, #52]	; 0x34
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6353      	str	r3, [r2, #52]	; 0x34
 80019f8:	e00b      	b.n	8001a12 <HAL_RCC_OscConfig+0x4c2>
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a04:	6353      	str	r3, [r2, #52]	; 0x34
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_RCC_OscConfig+0x4d4>)
 8001a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a10:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d024      	beq.n	8001a64 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fac1 	bl	8000fa0 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a20:	e019      	b.n	8001a56 <HAL_RCC_OscConfig+0x506>
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08002cf0 	.word	0x08002cf0
 8001a2c:	2000004c 	.word	0x2000004c
 8001a30:	20000058 	.word	0x20000058
 8001a34:	42470020 	.word	0x42470020
 8001a38:	42470680 	.word	0x42470680
 8001a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff faae 	bl	8000fa0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0a3      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a56:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4f0>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fa9c 	bl	8000fa0 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fa98 	bl	8000fa0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e08d      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a82:	4b49      	ldr	r3, [pc, #292]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a8e:	7ffb      	ldrb	r3, [r7, #31]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d079      	beq.n	8001b9c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d056      	beq.n	8001b5c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d13b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x65c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fa70 	bl	8000fa0 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff fa6c 	bl	8000fa0 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e063      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	4319      	orrs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	430b      	orrs	r3, r1
 8001afa:	492b      	ldr	r1, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x65c>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7ff fa4b 	bl	8000fa0 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff fa47 	bl	8000fa0 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e03e      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x5be>
 8001b2c:	e036      	b.n	8001b9c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x65c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fa34 	bl	8000fa0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7ff fa30 	bl	8000fa0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e027      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5ec>
 8001b5a:	e01f      	b.n	8001b9c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e01a      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCC_OscConfig+0x658>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470060 	.word	0x42470060

08001bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e11a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d919      	bls.n	8001c06 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x34>
 8001bd8:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a89      	ldr	r2, [pc, #548]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b87      	ldr	r3, [pc, #540]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 0201 	bic.w	r2, r3, #1
 8001bec:	4985      	ldr	r1, [pc, #532]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf4:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0f9      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d008      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c12:	4b7d      	ldr	r3, [pc, #500]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	497a      	ldr	r1, [pc, #488]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 808e 	beq.w	8001d4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d121      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0d7      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d115      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0cb      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0bf      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0b7      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	495c      	ldr	r1, [pc, #368]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f980 	bl	8000fa0 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d112      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f978 	bl	8000fa0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e09b      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc2:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d1ee      	bne.n	8001cac <HAL_RCC_ClockConfig+0xfc>
 8001cce:	e03e      	b.n	8001d4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d112      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f7ff f961 	bl	8000fa0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e084      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf0:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b0c      	cmp	r3, #12
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_ClockConfig+0x12a>
 8001cfc:	e027      	b.n	8001d4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d11d      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f94a 	bl	8000fa0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e06d      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d1ee      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x158>
 8001d2a:	e010      	b.n	8001d4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff f938 	bl	8000fa0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e05b      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ee      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d219      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x1be>
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0201 	bic.w	r2, r3, #1
 8001d76:	4923      	ldr	r1, [pc, #140]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_ClockConfig+0x254>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e034      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4917      	ldr	r1, [pc, #92]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490f      	ldr	r1, [pc, #60]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f823 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_ClockConfig+0x258>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490b      	ldr	r1, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x25c>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x260>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x264>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f88a 	bl	8000f08 <HAL_InitTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001df8:	7afb      	ldrb	r3, [r7, #11]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08002cf0 	.word	0x08002cf0
 8001e10:	2000004c 	.word	0x2000004c
 8001e14:	20000058 	.word	0x20000058

08001e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e1c:	b08e      	sub	sp, #56	; 0x38
 8001e1e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d00d      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x34>
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f200 8092 	bhi.w	8001f5a <HAL_RCC_GetSysClockFreq+0x142>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x28>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x2e>
 8001e3e:	e08c      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x170>)
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e44:	e097      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x174>)
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4a:	e094      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4e:	0c9b      	lsrs	r3, r3, #18
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	0d9b      	lsrs	r3, r3, #22
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d021      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	2200      	movs	r2, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	61fa      	str	r2, [r7, #28]
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x174>)
 8001e7c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001e80:	464a      	mov	r2, r9
 8001e82:	fb03 f202 	mul.w	r2, r3, r2
 8001e86:	2300      	movs	r3, #0
 8001e88:	4644      	mov	r4, r8
 8001e8a:	fb04 f303 	mul.w	r3, r4, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a3e      	ldr	r2, [pc, #248]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x174>)
 8001e92:	4644      	mov	r4, r8
 8001e94:	fba4 0102 	umull	r0, r1, r4, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	617a      	str	r2, [r7, #20]
 8001ea4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea8:	f7fe f968 	bl	800017c <__aeabi_uldivmod>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb4:	e04e      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	2200      	movs	r2, #0
 8001eba:	469a      	mov	sl, r3
 8001ebc:	4693      	mov	fp, r2
 8001ebe:	4652      	mov	r2, sl
 8001ec0:	465b      	mov	r3, fp
 8001ec2:	f04f 0000 	mov.w	r0, #0
 8001ec6:	f04f 0100 	mov.w	r1, #0
 8001eca:	0159      	lsls	r1, r3, #5
 8001ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed0:	0150      	lsls	r0, r2, #5
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eda:	eb63 090b 	sbc.w	r9, r3, fp
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ef2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ef6:	eb63 0509 	sbc.w	r5, r3, r9
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	00eb      	lsls	r3, r5, #3
 8001f04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f08:	00e2      	lsls	r2, r4, #3
 8001f0a:	4614      	mov	r4, r2
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	eb14 030a 	adds.w	r3, r4, sl
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	eb45 030b 	adc.w	r3, r5, fp
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f26:	4629      	mov	r1, r5
 8001f28:	028b      	lsls	r3, r1, #10
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	4604      	mov	r4, r0
 8001f30:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001f34:	4601      	mov	r1, r0
 8001f36:	028a      	lsls	r2, r1, #10
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f48:	f7fe f918 	bl	800017c <__aeabi_uldivmod>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4613      	mov	r3, r2
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f58:	e00d      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	0b5b      	lsrs	r3, r3, #13
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3738      	adds	r7, #56	; 0x38
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	016e3600 	.word	0x016e3600
 8001f90:	08002ce4 	.word	0x08002ce4

08001f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d12c      	bne.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001fb8:	4b24      	ldr	r3, [pc, #144]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e016      	b.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6253      	str	r3, [r2, #36]	; 0x24
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001fe4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ff8:	d105      	bne.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002000:	d101      	bne.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002002:	2301      	movs	r3, #1
 8002004:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0201 	bic.w	r2, r3, #1
 8002020:	490b      	ldr	r1, [pc, #44]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000
 8002050:	40023c00 	.word	0x40023c00

08002054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07b      	b.n	800215e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002076:	d009      	beq.n	800208c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
 800207e:	e005      	b.n	800208c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fd28 	bl	8000afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	f003 0104 	and.w	r1, r3, #4
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f003 0210 	and.w	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b088      	sub	sp, #32
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_SPI_Transmit+0x22>
 8002184:	2302      	movs	r3, #2
 8002186:	e12d      	b.n	80023e4 <HAL_SPI_Transmit+0x27e>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002190:	f7fe ff06 	bl	8000fa0 <HAL_GetTick>
 8002194:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d002      	beq.n	80021ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021aa:	e116      	b.n	80023da <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_SPI_Transmit+0x52>
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021bc:	e10d      	b.n	80023da <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2203      	movs	r2, #3
 80021c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	88fa      	ldrh	r2, [r7, #6]
 80021dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002204:	d10f      	bne.n	8002226 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d007      	beq.n	8002244 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800224c:	d14f      	bne.n	80022ee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0xf6>
 8002256:	8afb      	ldrh	r3, [r7, #22]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d142      	bne.n	80022e2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	881a      	ldrh	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	1c9a      	adds	r2, r3, #2
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002280:	e02f      	b.n	80022e2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	d112      	bne.n	80022b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	1c9a      	adds	r2, r3, #2
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b4:	e015      	b.n	80022e2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b6:	f7fe fe73 	bl	8000fa0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d803      	bhi.n	80022ce <HAL_SPI_Transmit+0x168>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_Transmit+0x16e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80022e0:	e07b      	b.n	80023da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ca      	bne.n	8002282 <HAL_SPI_Transmit+0x11c>
 80022ec:	e050      	b.n	8002390 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_SPI_Transmit+0x196>
 80022f6:	8afb      	ldrh	r3, [r7, #22]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d144      	bne.n	8002386 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	330c      	adds	r3, #12
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002322:	e030      	b.n	8002386 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d113      	bne.n	800235a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
 8002358:	e015      	b.n	8002386 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235a:	f7fe fe21 	bl	8000fa0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d803      	bhi.n	8002372 <HAL_SPI_Transmit+0x20c>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002370:	d102      	bne.n	8002378 <HAL_SPI_Transmit+0x212>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002384:	e029      	b.n	80023da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1c9      	bne.n	8002324 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f8b1 	bl	80024fc <SPI_EndRxTxTransaction>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	77fb      	strb	r3, [r7, #31]
 80023d0:	e003      	b.n	80023da <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023fc:	f7fe fdd0 	bl	8000fa0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4413      	add	r3, r2
 800240a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800240c:	f7fe fdc8 	bl	8000fa0 <HAL_GetTick>
 8002410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	015b      	lsls	r3, r3, #5
 8002418:	0d1b      	lsrs	r3, r3, #20
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002422:	e054      	b.n	80024ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242a:	d050      	beq.n	80024ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800242c:	f7fe fdb8 	bl	8000fa0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	429a      	cmp	r2, r3
 800243a:	d902      	bls.n	8002442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d13d      	bne.n	80024be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245a:	d111      	bne.n	8002480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	d004      	beq.n	8002470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246e:	d107      	bne.n	8002480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002488:	d10f      	bne.n	80024aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e017      	b.n	80024ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	bf0c      	ite	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2300      	movne	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d19b      	bne.n	8002424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000004c 	.word	0x2000004c

080024fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <SPI_EndRxTxTransaction+0x7c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <SPI_EndRxTxTransaction+0x80>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0d5b      	lsrs	r3, r3, #21
 8002514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002526:	d112      	bne.n	800254e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff ff5a 	bl	80023ec <SPI_WaitFlagStateUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e00f      	b.n	800256e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3b01      	subs	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d0f2      	beq.n	800254e <SPI_EndRxTxTransaction+0x52>
 8002568:	e000      	b.n	800256c <SPI_EndRxTxTransaction+0x70>
        break;
 800256a:	bf00      	nop
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000004c 	.word	0x2000004c
 800257c:	165e9f81 	.word	0x165e9f81

08002580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e031      	b.n	80025f6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe faec 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f000 f9ee 	bl	80029a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d122      	bne.n	800265a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d11b      	bne.n	800265a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f06f 0202 	mvn.w	r2, #2
 800262a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f991 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 8002646:	e005      	b.n	8002654 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f984 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f993 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b04      	cmp	r3, #4
 8002666:	d122      	bne.n	80026ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d11b      	bne.n	80026ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0204 	mvn.w	r2, #4
 800267e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f967 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 800269a:	e005      	b.n	80026a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f95a 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f969 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d122      	bne.n	8002702 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11b      	bne.n	8002702 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f06f 0208 	mvn.w	r2, #8
 80026d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2204      	movs	r2, #4
 80026d8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f93d 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 80026ee:	e005      	b.n	80026fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f930 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f93f 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b10      	cmp	r3, #16
 800270e:	d122      	bne.n	8002756 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d11b      	bne.n	8002756 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0210 	mvn.w	r2, #16
 8002726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2208      	movs	r2, #8
 800272c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f913 	bl	8002968 <HAL_TIM_IC_CaptureCallback>
 8002742:	e005      	b.n	8002750 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f906 	bl	8002956 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f915 	bl	800297a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10e      	bne.n	8002782 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f06f 0201 	mvn.w	r2, #1
 800277a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f8e1 	bl	8002944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d10e      	bne.n	80027ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d107      	bne.n	80027ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f8ef 	bl	800298c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_ConfigClockSource+0x1c>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e0b4      	b.n	800293c <HAL_TIM_ConfigClockSource+0x186>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280a:	d03e      	beq.n	800288a <HAL_TIM_ConfigClockSource+0xd4>
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002810:	f200 8087 	bhi.w	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002818:	f000 8086 	beq.w	8002928 <HAL_TIM_ConfigClockSource+0x172>
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d87f      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 8002822:	2b70      	cmp	r3, #112	; 0x70
 8002824:	d01a      	beq.n	800285c <HAL_TIM_ConfigClockSource+0xa6>
 8002826:	2b70      	cmp	r3, #112	; 0x70
 8002828:	d87b      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 800282a:	2b60      	cmp	r3, #96	; 0x60
 800282c:	d050      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0x11a>
 800282e:	2b60      	cmp	r3, #96	; 0x60
 8002830:	d877      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 8002832:	2b50      	cmp	r3, #80	; 0x50
 8002834:	d03c      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0xfa>
 8002836:	2b50      	cmp	r3, #80	; 0x50
 8002838:	d873      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d058      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0x13a>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d86f      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 8002842:	2b30      	cmp	r3, #48	; 0x30
 8002844:	d064      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x15a>
 8002846:	2b30      	cmp	r3, #48	; 0x30
 8002848:	d86b      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 800284a:	2b20      	cmp	r3, #32
 800284c:	d060      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x15a>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d867      	bhi.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
 8002852:	2b00      	cmp	r3, #0
 8002854:	d05c      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x15a>
 8002856:	2b10      	cmp	r3, #16
 8002858:	d05a      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x15a>
 800285a:	e062      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	f000 f97f 	bl	8002b6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800287e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	609a      	str	r2, [r3, #8]
      break;
 8002888:	e04f      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	f000 f968 	bl	8002b6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ac:	609a      	str	r2, [r3, #8]
      break;
 80028ae:	e03c      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028bc:	461a      	mov	r2, r3
 80028be:	f000 f8df 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2150      	movs	r1, #80	; 0x50
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f936 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 80028ce:	e02c      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028dc:	461a      	mov	r2, r3
 80028de:	f000 f8fd 	bl	8002adc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2160      	movs	r1, #96	; 0x60
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f926 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 80028ee:	e01c      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fc:	461a      	mov	r2, r3
 80028fe:	f000 f8bf 	bl	8002a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f916 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 800290e:	e00c      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f000 f90d 	bl	8002b3a <TIM_ITRx_SetConfig>
      break;
 8002920:	e003      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      break;
 8002926:	e000      	b.n	800292a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002928:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
	...

080029a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d00f      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <TIM_Base_SetConfig+0xc8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <TIM_Base_SetConfig+0xcc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <TIM_Base_SetConfig+0xd0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <TIM_Base_SetConfig+0xd4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d108      	bne.n	80029ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f0:	d017      	beq.n	8002a22 <TIM_Base_SetConfig+0x82>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <TIM_Base_SetConfig+0xc8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <TIM_Base_SetConfig+0x82>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <TIM_Base_SetConfig+0xcc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00f      	beq.n	8002a22 <TIM_Base_SetConfig+0x82>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <TIM_Base_SetConfig+0xd0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x82>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <TIM_Base_SetConfig+0xd4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x82>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <TIM_Base_SetConfig+0xd8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x82>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <TIM_Base_SetConfig+0xdc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800
 8002a70:	40000c00 	.word	0x40000c00
 8002a74:	40010800 	.word	0x40010800
 8002a78:	40010c00 	.word	0x40010c00
 8002a7c:	40011000 	.word	0x40011000

08002a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f023 0201 	bic.w	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f023 030a 	bic.w	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	621a      	str	r2, [r3, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f023 0210 	bic.w	r2, r3, #16
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	031b      	lsls	r3, r3, #12
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f043 0307 	orr.w	r3, r3, #7
 8002b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	021a      	lsls	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	609a      	str	r2, [r3, #8]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e046      	b.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10c      	bne.n	8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40010800 	.word	0x40010800

08002c68 <memset>:
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4402      	add	r2, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <__libc_init_array>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	2600      	movs	r6, #0
 8002c7c:	4d0c      	ldr	r5, [pc, #48]	; (8002cb0 <__libc_init_array+0x38>)
 8002c7e:	4c0d      	ldr	r4, [pc, #52]	; (8002cb4 <__libc_init_array+0x3c>)
 8002c80:	1b64      	subs	r4, r4, r5
 8002c82:	10a4      	asrs	r4, r4, #2
 8002c84:	42a6      	cmp	r6, r4
 8002c86:	d109      	bne.n	8002c9c <__libc_init_array+0x24>
 8002c88:	f000 f81a 	bl	8002cc0 <_init>
 8002c8c:	2600      	movs	r6, #0
 8002c8e:	4d0a      	ldr	r5, [pc, #40]	; (8002cb8 <__libc_init_array+0x40>)
 8002c90:	4c0a      	ldr	r4, [pc, #40]	; (8002cbc <__libc_init_array+0x44>)
 8002c92:	1b64      	subs	r4, r4, r5
 8002c94:	10a4      	asrs	r4, r4, #2
 8002c96:	42a6      	cmp	r6, r4
 8002c98:	d105      	bne.n	8002ca6 <__libc_init_array+0x2e>
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca0:	4798      	blx	r3
 8002ca2:	3601      	adds	r6, #1
 8002ca4:	e7ee      	b.n	8002c84 <__libc_init_array+0xc>
 8002ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002caa:	4798      	blx	r3
 8002cac:	3601      	adds	r6, #1
 8002cae:	e7f2      	b.n	8002c96 <__libc_init_array+0x1e>
 8002cb0:	08002d08 	.word	0x08002d08
 8002cb4:	08002d08 	.word	0x08002d08
 8002cb8:	08002d08 	.word	0x08002d08
 8002cbc:	08002d0c 	.word	0x08002d0c

08002cc0 <_init>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	bf00      	nop
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr

08002ccc <_fini>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr
